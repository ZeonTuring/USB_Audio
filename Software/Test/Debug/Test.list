
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008860  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a88  08008a88  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a90  08008a90  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08008a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  200001a0  08008c38  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00005004  20000bdc  08008c38  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a21f  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038eb  00000000  00000000  0003a3ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  0003dce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  0003eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000296fc  00000000  00000000  0003fea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013cf1  00000000  00000000  000695a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0b3f  00000000  00000000  0007d295  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ddd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000492c  00000000  00000000  0016de50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001a0 	.word	0x200001a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008a10 	.word	0x08008a10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001a4 	.word	0x200001a4
 8000204:	08008a10 	.word	0x08008a10

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f94b 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f806 	bl	8000524 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f007 fa00 	bl	800791c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f965 	bl	8000812 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f92d 	bl	80007be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000bc 	.word	0x200000bc
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	200001cc 	.word	0x200001cc

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200001cc 	.word	0x200001cc

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d005      	beq.n	80005ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_Delay+0x40>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffde 	bl	80005ac <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8f7      	bhi.n	80005ec <HAL_Delay+0x28>
  {
  }
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000004 	.word	0x20000004

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <__NVIC_SetPriorityGrouping+0x40>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	4313      	orrs	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x40>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	05fa0000 	.word	0x05fa0000

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <__NVIC_EnableIRQ+0x38>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff8e 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff29 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff3e 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff8e 	bl	80006fc <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff31 	bl	800066c <__NVIC_EnableIRQ>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffa2 	bl	8000764 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000838:	f7ff feb8 	bl	80005ac <HAL_GetTick>
 800083c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	e099      	b.n	800097c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2202      	movs	r2, #2
 8000854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f022 0201 	bic.w	r2, r2, #1
 8000866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000868:	e00f      	b.n	800088a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800086a:	f7ff fe9f 	bl	80005ac <HAL_GetTick>
 800086e:	4602      	mov	r2, r0
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	2b05      	cmp	r3, #5
 8000876:	d908      	bls.n	800088a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2220      	movs	r2, #32
 800087c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2203      	movs	r2, #3
 8000882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000886:	2303      	movs	r3, #3
 8000888:	e078      	b.n	800097c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1e8      	bne.n	800086a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <HAL_DMA_Init+0x158>)
 80008a4:	4013      	ands	r3, r2
 80008a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4313      	orrs	r3, r2
 80008da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d107      	bne.n	80008f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4313      	orrs	r3, r2
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	f023 0307 	bic.w	r3, r3, #7
 800090a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	4313      	orrs	r3, r2
 8000914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091a:	2b04      	cmp	r3, #4
 800091c:	d117      	bne.n	800094e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4313      	orrs	r3, r2
 8000926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00e      	beq.n	800094e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f9e9 	bl	8000d08 <DMA_CheckFifoParam>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d008      	beq.n	800094e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2240      	movs	r2, #64	; 0x40
 8000940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2201      	movs	r2, #1
 8000946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800094a:	2301      	movs	r3, #1
 800094c:	e016      	b.n	800097c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f9a0 	bl	8000c9c <DMA_CalcBaseAndBitshift>
 800095c:	4603      	mov	r3, r0
 800095e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000964:	223f      	movs	r2, #63	; 0x3f
 8000966:	409a      	lsls	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	f010803f 	.word	0xf010803f

08000988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8000994:	4b92      	ldr	r3, [pc, #584]	; (8000be0 <HAL_DMA_IRQHandler+0x258>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a92      	ldr	r2, [pc, #584]	; (8000be4 <HAL_DMA_IRQHandler+0x25c>)
 800099a:	fba2 2303 	umull	r2, r3, r2, r3
 800099e:	0a9b      	lsrs	r3, r3, #10
 80009a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b2:	2208      	movs	r2, #8
 80009b4:	409a      	lsls	r2, r3
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4013      	ands	r3, r2
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d01a      	beq.n	80009f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d013      	beq.n	80009f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f022 0204 	bic.w	r2, r2, #4
 80009da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e0:	2208      	movs	r2, #8
 80009e2:	409a      	lsls	r2, r3
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ec:	f043 0201 	orr.w	r2, r3, #1
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f8:	2201      	movs	r2, #1
 80009fa:	409a      	lsls	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d012      	beq.n	8000a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00b      	beq.n	8000a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a16:	2201      	movs	r2, #1
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a22:	f043 0202 	orr.w	r2, r3, #2
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2e:	2204      	movs	r2, #4
 8000a30:	409a      	lsls	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4013      	ands	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d012      	beq.n	8000a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00b      	beq.n	8000a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a58:	f043 0204 	orr.w	r2, r3, #4
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a64:	2210      	movs	r2, #16
 8000a66:	409a      	lsls	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d043      	beq.n	8000af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d03c      	beq.n	8000af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a82:	2210      	movs	r2, #16
 8000a84:	409a      	lsls	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d018      	beq.n	8000aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d108      	bne.n	8000ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d024      	beq.n	8000af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	4798      	blx	r3
 8000ab6:	e01f      	b.n	8000af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d01b      	beq.n	8000af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	4798      	blx	r3
 8000ac8:	e016      	b.n	8000af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d107      	bne.n	8000ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0208 	bic.w	r2, r2, #8
 8000ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afc:	2220      	movs	r2, #32
 8000afe:	409a      	lsls	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 808e 	beq.w	8000c26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0310 	and.w	r3, r3, #16
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 8086 	beq.w	8000c26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1e:	2220      	movs	r2, #32
 8000b20:	409a      	lsls	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b05      	cmp	r3, #5
 8000b30:	d136      	bne.n	8000ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 0216 	bic.w	r2, r2, #22
 8000b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	695a      	ldr	r2, [r3, #20]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <HAL_DMA_IRQHandler+0x1da>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d007      	beq.n	8000b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0208 	bic.w	r2, r2, #8
 8000b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b76:	223f      	movs	r2, #63	; 0x3f
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d07d      	beq.n	8000c92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	4798      	blx	r3
        }
        return;
 8000b9e:	e078      	b.n	8000c92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d01c      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d108      	bne.n	8000bce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d030      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	4798      	blx	r3
 8000bcc:	e02b      	b.n	8000c26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d027      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	4798      	blx	r3
 8000bde:	e022      	b.n	8000c26 <HAL_DMA_IRQHandler+0x29e>
 8000be0:	200000bc 	.word	0x200000bc
 8000be4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10f      	bne.n	8000c16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0210 	bic.w	r2, r2, #16
 8000c04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2201      	movs	r2, #1
 8000c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d032      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d022      	beq.n	8000c80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d307      	bcc.n	8000c6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f2      	bne.n	8000c52 <HAL_DMA_IRQHandler+0x2ca>
 8000c6c:	e000      	b.n	8000c70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000c6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d005      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	4798      	blx	r3
 8000c90:	e000      	b.n	8000c94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000c92:	bf00      	nop
    }
  }
}
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop

08000c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3b10      	subs	r3, #16
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <DMA_CalcBaseAndBitshift+0x60>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <DMA_CalcBaseAndBitshift+0x64>)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d908      	bls.n	8000cdc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <DMA_CalcBaseAndBitshift+0x68>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	1d1a      	adds	r2, r3, #4
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8000cda:	e006      	b.n	8000cea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <DMA_CalcBaseAndBitshift+0x68>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	aaaaaaab 	.word	0xaaaaaaab
 8000d00:	08008a68 	.word	0x08008a68
 8000d04:	fffffc00 	.word	0xfffffc00

08000d08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d11f      	bne.n	8000d62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d855      	bhi.n	8000dd4 <DMA_CheckFifoParam+0xcc>
 8000d28:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <DMA_CheckFifoParam+0x28>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000d41 	.word	0x08000d41
 8000d34:	08000d53 	.word	0x08000d53
 8000d38:	08000d41 	.word	0x08000d41
 8000d3c:	08000dd5 	.word	0x08000dd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d045      	beq.n	8000dd8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d50:	e042      	b.n	8000dd8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d5a:	d13f      	bne.n	8000ddc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d60:	e03c      	b.n	8000ddc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d6a:	d121      	bne.n	8000db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d836      	bhi.n	8000de0 <DMA_CheckFifoParam+0xd8>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <DMA_CheckFifoParam+0x70>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000d8f 	.word	0x08000d8f
 8000d80:	08000d89 	.word	0x08000d89
 8000d84:	08000da1 	.word	0x08000da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8000d8c:	e02f      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d024      	beq.n	8000de4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d9e:	e021      	b.n	8000de4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000da8:	d11e      	bne.n	8000de8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000dae:	e01b      	b.n	8000de8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d902      	bls.n	8000dbc <DMA_CheckFifoParam+0xb4>
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d003      	beq.n	8000dc2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000dba:	e018      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8000dc0:	e015      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00e      	beq.n	8000dec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8000dd2:	e00b      	b.n	8000dec <DMA_CheckFifoParam+0xe4>
      break;
 8000dd4:	bf00      	nop
 8000dd6:	e00a      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      break;
 8000dd8:	bf00      	nop
 8000dda:	e008      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      break;
 8000ddc:	bf00      	nop
 8000dde:	e006      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      break;
 8000de0:	bf00      	nop
 8000de2:	e004      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      break;
 8000de4:	bf00      	nop
 8000de6:	e002      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      break;   
 8000de8:	bf00      	nop
 8000dea:	e000      	b.n	8000dee <DMA_CheckFifoParam+0xe6>
      break;
 8000dec:	bf00      	nop
    }
  } 
  
  return status; 
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000e0c:	4ba9      	ldr	r3, [pc, #676]	; (80010b4 <HAL_ETH_Init+0x2b8>)
 8000e0e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e183      	b.n	800112a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f006 fd94 	bl	8007964 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <HAL_ETH_Init+0x2bc>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <HAL_ETH_Init+0x2bc>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6453      	str	r3, [r2, #68]	; 0x44
 8000e48:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <HAL_ETH_Init+0x2bc>)
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e54:	4b99      	ldr	r3, [pc, #612]	; (80010bc <HAL_ETH_Init+0x2c0>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4a98      	ldr	r2, [pc, #608]	; (80010bc <HAL_ETH_Init+0x2c0>)
 8000e5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e5e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e60:	4b96      	ldr	r3, [pc, #600]	; (80010bc <HAL_ETH_Init+0x2c0>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4994      	ldr	r1, [pc, #592]	; (80010bc <HAL_ETH_Init+0x2c0>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0201 	orr.w	r2, r2, #1
 8000e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e84:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e86:	f7ff fb91 	bl	80005ac <HAL_GetTick>
 8000e8a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e8c:	e011      	b.n	8000eb2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e8e:	f7ff fb8d 	bl	80005ac <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e9c:	d909      	bls.n	8000eb2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e13b      	b.n	800112a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e4      	bne.n	8000e8e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f023 031c 	bic.w	r3, r3, #28
 8000ed2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000ed4:	f002 fd2a 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8000ed8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4a78      	ldr	r2, [pc, #480]	; (80010c0 <HAL_ETH_Init+0x2c4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d908      	bls.n	8000ef4 <HAL_ETH_Init+0xf8>
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	4a77      	ldr	r2, [pc, #476]	; (80010c4 <HAL_ETH_Init+0x2c8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d804      	bhi.n	8000ef4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e027      	b.n	8000f44 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	4a73      	ldr	r2, [pc, #460]	; (80010c4 <HAL_ETH_Init+0x2c8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d908      	bls.n	8000f0e <HAL_ETH_Init+0x112>
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_ETH_Init+0x2cc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d804      	bhi.n	8000f0e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f043 030c 	orr.w	r3, r3, #12
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	e01a      	b.n	8000f44 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4a6d      	ldr	r2, [pc, #436]	; (80010c8 <HAL_ETH_Init+0x2cc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d903      	bls.n	8000f1e <HAL_ETH_Init+0x122>
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4a6c      	ldr	r2, [pc, #432]	; (80010cc <HAL_ETH_Init+0x2d0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d911      	bls.n	8000f42 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4a6a      	ldr	r2, [pc, #424]	; (80010cc <HAL_ETH_Init+0x2d0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d908      	bls.n	8000f38 <HAL_ETH_Init+0x13c>
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <HAL_ETH_Init+0x2d4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d804      	bhi.n	8000f38 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e005      	b.n	8000f44 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	e000      	b.n	8000f44 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f42:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f956 	bl	8001204 <HAL_ETH_WritePHYRegister>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f62:	6939      	ldr	r1, [r7, #16]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f9b3 	bl	80012d0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e0d9      	b.n	800112a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f76:	20ff      	movs	r0, #255	; 0xff
 8000f78:	f7ff fb24 	bl	80005c4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80a7 	beq.w	80010d4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f86:	f7ff fb11 	bl	80005ac <HAL_GetTick>
 8000f8a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	461a      	mov	r2, r3
 8000f92:	2101      	movs	r1, #1
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f8cd 	bl	8001134 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f9a:	f7ff fb07 	bl	80005ac <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d90f      	bls.n	8000fcc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000fb0:	6939      	ldr	r1, [r7, #16]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f98c 	bl	80012d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0ae      	b.n	800112a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0da      	beq.n	8000f8c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fda:	2100      	movs	r1, #0
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f911 	bl	8001204 <HAL_ETH_WritePHYRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f96e 	bl	80012d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e094      	b.n	800112a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001000:	f7ff fad4 	bl	80005ac <HAL_GetTick>
 8001004:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	461a      	mov	r2, r3
 800100c:	2101      	movs	r1, #1
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f890 	bl	8001134 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001014:	f7ff faca 	bl	80005ac <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001022:	4293      	cmp	r3, r2
 8001024:	d90f      	bls.n	8001046 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800102a:	6939      	ldr	r1, [r7, #16]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f94f 	bl	80012d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e071      	b.n	800112a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0da      	beq.n	8001006 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	461a      	mov	r2, r3
 8001056:	211f      	movs	r1, #31
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f86b 	bl	8001134 <HAL_ETH_ReadPHYRegister>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001068:	6939      	ldr	r1, [r7, #16]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f930 	bl	80012d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001078:	2301      	movs	r3, #1
 800107a:	e056      	b.n	800112a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	e002      	b.n	8001096 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	e037      	b.n	8001118 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	e032      	b.n	8001118 <HAL_ETH_Init+0x31c>
 80010b2:	bf00      	nop
 80010b4:	03938700 	.word	0x03938700
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40013800 	.word	0x40013800
 80010c0:	01312cff 	.word	0x01312cff
 80010c4:	02160ebf 	.word	0x02160ebf
 80010c8:	039386ff 	.word	0x039386ff
 80010cc:	05f5e0ff 	.word	0x05f5e0ff
 80010d0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f889 	bl	8001204 <HAL_ETH_WritePHYRegister>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00b      	beq.n	8001110 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010fc:	6939      	ldr	r1, [r7, #16]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f8e6 	bl	80012d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00c      	b.n	800112a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001110:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001114:	f7ff fa56 	bl	80005c4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001118:	6939      	ldr	r1, [r7, #16]
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f8d8 	bl	80012d0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop

08001134 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	460b      	mov	r3, r1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b82      	cmp	r3, #130	; 0x82
 8001154:	d101      	bne.n	800115a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001156:	2302      	movs	r3, #2
 8001158:	e050      	b.n	80011fc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2282      	movs	r2, #130	; 0x82
 800115e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 031c 	and.w	r3, r3, #28
 8001170:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8a1b      	ldrh	r3, [r3, #16]
 8001176:	02db      	lsls	r3, r3, #11
 8001178:	b29b      	uxth	r3, r3
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	019b      	lsls	r3, r3, #6
 8001184:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	4313      	orrs	r3, r2
 800118c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f023 0302 	bic.w	r3, r3, #2
 8001194:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011a6:	f7ff fa01 	bl	80005ac <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011ac:	e015      	b.n	80011da <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80011ae:	f7ff f9fd 	bl	80005ac <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d309      	bcc.n	80011d2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e014      	b.n	80011fc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e4      	bne.n	80011ae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	460b      	mov	r3, r1
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b42      	cmp	r3, #66	; 0x42
 8001224:	d101      	bne.n	800122a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001226:	2302      	movs	r3, #2
 8001228:	e04e      	b.n	80012c8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2242      	movs	r2, #66	; 0x42
 800122e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 031c 	and.w	r3, r3, #28
 8001240:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8a1b      	ldrh	r3, [r3, #16]
 8001246:	02db      	lsls	r3, r3, #11
 8001248:	b29b      	uxth	r3, r3
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4313      	orrs	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001250:	897b      	ldrh	r3, [r7, #10]
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	4313      	orrs	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff f994 	bl	80005ac <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001286:	e015      	b.n	80012b4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001288:	f7ff f990 	bl	80005ac <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001296:	d309      	bcc.n	80012ac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e00d      	b.n	80012c8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e4      	bne.n	8001288 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0b0      	sub	sp, #192	; 0xc0
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80012fe:	2300      	movs	r3, #0
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131a:	663b      	str	r3, [r7, #96]	; 0x60
 800131c:	e001      	b.n	8001322 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001326:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800132c:	2300      	movs	r3, #0
 800132e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800133c:	2340      	movs	r3, #64	; 0x40
 800133e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80013a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013a8:	4bab      	ldr	r3, [pc, #684]	; (8001658 <ETH_MACDMAConfig+0x388>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80013b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80013b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80013b4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80013b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80013b8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80013ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80013bc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80013c2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80013c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80013c6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80013c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80013ca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80013d0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80013d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80013d4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80013d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80013d8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80013da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80013dc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80013de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80013e0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80013e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80013e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80013e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013ea:	4313      	orrs	r3, r2
 80013ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff f8dd 	bl	80005c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001412:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001414:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001418:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800141a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800141c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800141e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001422:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001428:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800142a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800142e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001434:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001438:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001440:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001442:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff f8b8 	bl	80005c4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800145c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001466:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001470:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800147c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001480:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001484:	4013      	ands	r3, r2
 8001486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800148a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800148e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001494:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800149a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800149c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80014a0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80014a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80014a6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80014a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80014ac:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80014ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014b2:	4313      	orrs	r3, r2
 80014b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014c0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff f879 	bl	80005c4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014da:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80014e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff f864 	bl	80005c4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001504:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800150a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800150e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001514:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001518:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800152a:	2304      	movs	r3, #4
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800152e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800153a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800154a:	2300      	movs	r3, #0
 800154c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800154e:	2300      	movs	r3, #0
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f241 0318 	movw	r3, #4120	; 0x1018
 800155a:	4413      	add	r3, r2
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001562:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <ETH_MACDMAConfig+0x38c>)
 8001568:	4013      	ands	r3, r2
 800156a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800156e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001570:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001572:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001574:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001576:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001578:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800157a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800157c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800157e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001580:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001582:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001584:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001586:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800158a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800158e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001590:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001594:	4313      	orrs	r3, r2
 8001596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f241 0318 	movw	r3, #4120	; 0x1018
 80015a2:	4413      	add	r3, r2
 80015a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015a8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80015b2:	4413      	add	r3, r2
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff f802 	bl	80005c4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80015c8:	4413      	add	r3, r2
 80015ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ce:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015d4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80015d8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80015da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015dc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80015de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80015e0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80015e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80015e6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80015e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80015ea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001608:	2001      	movs	r0, #1
 800160a:	f7fe ffdb 	bl	80005c4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800161a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d10d      	bne.n	8001640 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f241 031c 	movw	r3, #4124	; 0x101c
 800162c:	4413      	add	r3, r2
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6811      	ldr	r1, [r2, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <ETH_MACDMAConfig+0x390>)
 8001636:	431a      	orrs	r2, r3
 8001638:	f241 031c 	movw	r3, #4124	; 0x101c
 800163c:	440b      	add	r3, r1
 800163e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	461a      	mov	r2, r3
 8001646:	2100      	movs	r1, #0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f80b 	bl	8001664 <ETH_MACAddressConfig>
}
 800164e:	bf00      	nop
 8001650:	37c0      	adds	r7, #192	; 0xc0
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	ff20810f 	.word	0xff20810f
 800165c:	f8de3f23 	.word	0xf8de3f23
 8001660:	00010040 	.word	0x00010040

08001664 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3305      	adds	r3, #5
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	3204      	adds	r2, #4
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <ETH_MACAddressConfig+0x68>)
 8001686:	4413      	add	r3, r2
 8001688:	461a      	mov	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3303      	adds	r3, #3
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	061a      	lsls	r2, r3, #24
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3302      	adds	r3, #2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3301      	adds	r3, #1
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	4313      	orrs	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <ETH_MACAddressConfig+0x6c>)
 80016b6:	4413      	add	r3, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	6013      	str	r3, [r2, #0]
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40028040 	.word	0x40028040
 80016d0:	40028044 	.word	0x40028044

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e175      	b.n	80019e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8164 	bne.w	80019da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x4e>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b12      	cmp	r3, #18
 8001720:	d123      	bne.n	800176a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	69b9      	ldr	r1, [r7, #24]
 8001766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0203 	and.w	r2, r3, #3
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d00b      	beq.n	80017be <HAL_GPIO_Init+0xea>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b2:	2b11      	cmp	r3, #17
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b12      	cmp	r3, #18
 80017bc:	d130      	bne.n	8001820 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80be 	beq.w	80019da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <HAL_GPIO_Init+0x320>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a64      	ldr	r2, [pc, #400]	; (80019f4 <HAL_GPIO_Init+0x320>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <HAL_GPIO_Init+0x320>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001876:	4a60      	ldr	r2, [pc, #384]	; (80019f8 <HAL_GPIO_Init+0x324>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a57      	ldr	r2, [pc, #348]	; (80019fc <HAL_GPIO_Init+0x328>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d037      	beq.n	8001912 <HAL_GPIO_Init+0x23e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a56      	ldr	r2, [pc, #344]	; (8001a00 <HAL_GPIO_Init+0x32c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d031      	beq.n	800190e <HAL_GPIO_Init+0x23a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a55      	ldr	r2, [pc, #340]	; (8001a04 <HAL_GPIO_Init+0x330>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_GPIO_Init+0x236>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a54      	ldr	r2, [pc, #336]	; (8001a08 <HAL_GPIO_Init+0x334>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x232>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a53      	ldr	r2, [pc, #332]	; (8001a0c <HAL_GPIO_Init+0x338>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x22e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_GPIO_Init+0x33c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x22a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <HAL_GPIO_Init+0x340>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x226>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_GPIO_Init+0x344>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x222>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4f      	ldr	r2, [pc, #316]	; (8001a1c <HAL_GPIO_Init+0x348>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x21e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <HAL_GPIO_Init+0x34c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x21a>
 80018ea:	2309      	movs	r3, #9
 80018ec:	e012      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018ee:	230a      	movs	r3, #10
 80018f0:	e010      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018f2:	2308      	movs	r3, #8
 80018f4:	e00e      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e00c      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x240>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x240>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001924:	4934      	ldr	r1, [pc, #208]	; (80019f8 <HAL_GPIO_Init+0x324>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <HAL_GPIO_Init+0x350>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001956:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_GPIO_Init+0x350>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_GPIO_Init+0x350>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001980:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <HAL_GPIO_Init+0x350>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_GPIO_Init+0x350>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_GPIO_Init+0x350>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_GPIO_Init+0x350>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <HAL_GPIO_Init+0x350>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f ae86 	bls.w	80016f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40021400 	.word	0x40021400
 8001a14:	40021800 	.word	0x40021800
 8001a18:	40021c00 	.word	0x40021c00
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	40022400 	.word	0x40022400
 8001a24:	40013c00 	.word	0x40013c00

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	619a      	str	r2, [r3, #24]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0d2      	b.n	8001c14 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f006 f826 	bl	8007ad4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69d9      	ldr	r1, [r3, #28]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b60      	ldr	r3, [pc, #384]	; (8001c1c <HAL_I2S_Init+0x1c0>)
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d067      	beq.n	8001b80 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e001      	b.n	8001ac2 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d102      	bne.n	8001ade <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8001ad8:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <HAL_I2S_Init+0x1c4>)
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e003      	b.n	8001ae6 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8a2 	bl	8001c28 <I2S_GetClockFreq>
 8001ae4:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aee:	d125      	bne.n	8001b3c <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d010      	beq.n	8001b1a <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	3305      	adds	r3, #5
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	e01f      	b.n	8001b5a <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	3305      	adds	r3, #5
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e00e      	b.n	8001b5a <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	3305      	adds	r3, #5
 8001b58:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <HAL_I2S_Init+0x1c8>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	e003      	b.n	8001b88 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d902      	bls.n	8001b94 <HAL_I2S_Init+0x138>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2bff      	cmp	r3, #255	; 0xff
 8001b92:	d907      	bls.n	8001ba4 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	f043 0210 	orr.w	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e037      	b.n	8001c14 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	ea42 0103 	orr.w	r1, r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_I2S_Init+0x1c0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6851      	ldr	r1, [r2, #4]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6892      	ldr	r2, [r2, #8]
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68d2      	ldr	r2, [r2, #12]
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6992      	ldr	r2, [r2, #24]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001be2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b30      	cmp	r3, #48	; 0x30
 8001bea:	d003      	beq.n	8001bf4 <HAL_I2S_Init+0x198>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2bb0      	cmp	r3, #176	; 0xb0
 8001bf2:	d107      	bne.n	8001c04 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c02:	61da      	str	r2, [r3, #28]
  }
#endif

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	fffff040 	.word	0xfffff040
 8001c20:	00bb8000 	.word	0x00bb8000
 8001c24:	cccccccd 	.word	0xcccccccd

08001c28 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d02d      	beq.n	8001c94 <I2S_GetClockFreq+0x6c>
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d12e      	bne.n	8001c9a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <I2S_GetClockFreq+0x88>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d108      	bne.n	8001c5a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <I2S_GetClockFreq+0x88>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <I2S_GetClockFreq+0x8c>)
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e007      	b.n	8001c6a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <I2S_GetClockFreq+0x88>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <I2S_GetClockFreq+0x90>)
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <I2S_GetClockFreq+0x88>)
 8001c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c70:	0f1b      	lsrs	r3, r3, #28
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <I2S_GetClockFreq+0x88>)
 8001c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	fb02 f203 	mul.w	r2, r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	613b      	str	r3, [r7, #16]

      break;
 8001c92:	e005      	b.n	8001ca0 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <I2S_GetClockFreq+0x94>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	e002      	b.n	8001ca0 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
      break;
 8001c9e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8001ca0:	693b      	ldr	r3, [r7, #16]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200
 8001cbc:	00bb8000 	.word	0x00bb8000

08001cc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b08f      	sub	sp, #60	; 0x3c
 8001cc4:	af0a      	add	r7, sp, #40	; 0x28
 8001cc6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e10a      	b.n	8001ee8 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f006 f8fa 	bl	8007ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 ff50 	bl	8004b9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	687e      	ldr	r6, [r7, #4]
 8001d06:	466d      	mov	r5, sp
 8001d08:	f106 0410 	add.w	r4, r6, #16
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d1c:	1d33      	adds	r3, r6, #4
 8001d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f002 fe31 	bl	8004988 <USB_CoreInit>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0d7      	b.n	8001ee8 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 ff3e 	bl	8004bc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e04a      	b.n	8001de0 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	333d      	adds	r3, #61	; 0x3d
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	333c      	adds	r3, #60	; 0x3c
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	b298      	uxth	r0, r3
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3342      	adds	r3, #66	; 0x42
 8001d86:	4602      	mov	r2, r0
 8001d88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	333f      	adds	r3, #63	; 0x3f
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3344      	adds	r3, #68	; 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3348      	adds	r3, #72	; 0x48
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3350      	adds	r3, #80	; 0x50
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3af      	bcc.n	8001d4a <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e044      	b.n	8001e7a <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	3301      	adds	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3b5      	bcc.n	8001df0 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	687e      	ldr	r6, [r7, #4]
 8001e8c:	466d      	mov	r5, sp
 8001e8e:	f106 0410 	add.w	r4, r6, #16
 8001e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea2:	1d33      	adds	r3, r6, #4
 8001ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea6:	6838      	ldr	r0, [r7, #0]
 8001ea8:	f002 feb4 	bl	8004c14 <USB_DevInit>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e014      	b.n	8001ee8 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d102      	bne.n	8001edc <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f001 f874 	bl	8002fc4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fe73 	bl	8005bcc <USB_DevDisconnect>

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_PCD_Start+0x16>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e012      	b.n	8001f2c <HAL_PCD_Start+0x3c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fe42 	bl	8005b9c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f002 fe2d 	bl	8004b7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b08d      	sub	sp, #52	; 0x34
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fee7 	bl	8005d22 <USB_GetMode>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 83bd 	bne.w	80026d6 <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fe4b 	bl	8005bfc <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 83b3 	beq.w	80026d4 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fe42 	bl	8005bfc <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d107      	bne.n	8001f92 <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f002 0202 	and.w	r2, r2, #2
 8001f90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fe30 	bl	8005bfc <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fa6:	d17b      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fe36 	bl	8005c22 <USB_ReadDevAllOutEpInterrupt>
 8001fb6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fb8:	e06f      	b.n	800209a <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d064      	beq.n	800208e <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fe5b 	bl	8005c8a <USB_ReadDevOutEPInterrupt>
 8001fd4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fec:	461a      	mov	r2, r3
 8001fee:	2301      	movs	r3, #1
 8001ff0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fe25 	bl	8002c44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00c      	beq.n	800201e <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 ff24 	bl	8002e54 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002018:	461a      	mov	r2, r3
 800201a:	2308      	movs	r3, #8
 800201c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002034:	461a      	mov	r2, r3
 8002036:	2310      	movs	r3, #16
 8002038:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002056:	461a      	mov	r2, r3
 8002058:	2101      	movs	r1, #1
 800205a:	f003 fea7 	bl	8005dac <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206a:	461a      	mov	r2, r3
 800206c:	2320      	movs	r3, #32
 800206e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002086:	461a      	mov	r2, r3
 8002088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d18c      	bne.n	8001fba <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fda9 	bl	8005bfc <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020b4:	f040 80c4 	bne.w	8002240 <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fdca 	bl	8005c56 <USB_ReadDevAllInEpInterrupt>
 80020c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020c8:	e0b6      	b.n	8002238 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80ab 	beq.w	800222c <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fdf0 	bl	8005cc6 <USB_ReadDevInEPInterrupt>
 80020e6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d05b      	beq.n	80021aa <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	2201      	movs	r2, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	43db      	mvns	r3, r3
 800210c:	69f9      	ldr	r1, [r7, #28]
 800210e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002112:	4013      	ands	r3, r2
 8002114:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002122:	461a      	mov	r2, r3
 8002124:	2301      	movs	r3, #1
 8002126:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d11b      	bne.n	8002168 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3348      	adds	r3, #72	; 0x48
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4403      	add	r3, r0
 8002150:	3344      	adds	r3, #68	; 0x44
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4419      	add	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4403      	add	r3, r0
 8002164:	3348      	adds	r3, #72	; 0x48
 8002166:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	b2db      	uxtb	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f005 ff47 	bl	8008002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d116      	bne.n	80021aa <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d113      	bne.n	80021aa <HAL_PCD_IRQHandler+0x276>
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3350      	adds	r3, #80	; 0x50
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d108      	bne.n	80021aa <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021a2:	461a      	mov	r2, r3
 80021a4:	2101      	movs	r1, #1
 80021a6:	f003 fe01 	bl	8005dac <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c0:	461a      	mov	r2, r3
 80021c2:	2308      	movs	r3, #8
 80021c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021dc:	461a      	mov	r2, r3
 80021de:	2310      	movs	r3, #16
 80021e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f8:	461a      	mov	r2, r3
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002214:	461a      	mov	r2, r3
 8002216:	2302      	movs	r3, #2
 8002218:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fc7e 	bl	8002b28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	3301      	adds	r3, #1
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f af45 	bne.w	80020ca <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 fcd9 	bl	8005bfc <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002254:	d122      	bne.n	800229c <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002270:	2b01      	cmp	r3, #1
 8002272:	d108      	bne.n	8002286 <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800227c:	2100      	movs	r1, #0
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f006 f900 	bl	8008484 <HAL_PCDEx_LPM_Callback>
 8002284:	e002      	b.n	800228c <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 ff32 	bl	80080f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800229a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fcab 	bl	8005bfc <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022b0:	d112      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f005 feee 	bl	80080a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022d6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 fc8d 	bl	8005bfc <USB_ReadInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ec:	d121      	bne.n	8002332 <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80022fc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	f003 020f 	and.w	r2, r3, #15
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002322:	2101      	movs	r1, #1
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 f8ad 	bl	8008484 <HAL_PCDEx_LPM_Callback>
 800232a:	e002      	b.n	8002332 <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f005 feb9 	bl	80080a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fc60 	bl	8005bfc <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002346:	f040 80a7 	bne.w	8002498 <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2110      	movs	r1, #16
 8002364:	4618      	mov	r0, r3
 8002366:	f002 fdd1 	bl	8004f0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800236e:	e036      	b.n	80023de <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237c:	461a      	mov	r2, r3
 800237e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002382:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002394:	0151      	lsls	r1, r2, #5
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	440a      	add	r2, r1
 800239a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800239e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b0:	461a      	mov	r2, r3
 80023b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c8:	0151      	lsls	r1, r2, #5
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	440a      	add	r2, r1
 80023ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	3301      	adds	r3, #1
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d3c3      	bcc.n	8002370 <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	2b00      	cmp	r3, #0
 8002402:	d016      	beq.n	8002432 <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002414:	f043 030b 	orr.w	r3, r3, #11
 8002418:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242a:	f043 030b 	orr.w	r3, r3, #11
 800242e:	6453      	str	r3, [r2, #68]	; 0x44
 8002430:	e015      	b.n	800245e <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	4619      	mov	r1, r3
 8002442:	f242 032b 	movw	r3, #8235	; 0x202b
 8002446:	4313      	orrs	r3, r2
 8002448:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002458:	f043 030b 	orr.w	r3, r3, #11
 800245c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800246c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002470:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002482:	461a      	mov	r2, r3
 8002484:	f003 fc92 	bl	8005dac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fbad 	bl	8005bfc <USB_ReadInterrupts>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ac:	d12a      	bne.n	8002504 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fc44 	bl	8005d40 <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 fd86 	bl	8004fce <USB_GetDevSpeed>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	e002      	b.n	80024d6 <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2203      	movs	r2, #3
 80024d4:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681c      	ldr	r4, [r3, #0]
 80024da:	f001 fa27 	bl	800392c <HAL_RCC_GetHCLKFreq>
 80024de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	4620      	mov	r0, r4
 80024ea:	f002 faa5 	bl	8004a38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f005 fdaf 	bl	8008052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002502:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fb77 	bl	8005bfc <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b10      	cmp	r3, #16
 8002516:	d161      	bne.n	80025dc <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0210 	bic.w	r2, r2, #16
 8002526:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	2b02      	cmp	r3, #2
 8002552:	d124      	bne.n	800259e <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d035      	beq.n	80025cc <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800256a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6a38      	ldr	r0, [r7, #32]
 8002574:	f003 f9ef 	bl	8005956 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002584:	441a      	add	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002596:	441a      	add	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	619a      	str	r2, [r3, #24]
 800259c:	e016      	b.n	80025cc <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	0c5b      	lsrs	r3, r3, #17
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d110      	bne.n	80025cc <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025b0:	2208      	movs	r2, #8
 80025b2:	4619      	mov	r1, r3
 80025b4:	6a38      	ldr	r0, [r7, #32]
 80025b6:	f003 f9ce 	bl	8005956 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c6:	441a      	add	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0210 	orr.w	r2, r2, #16
 80025da:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fb0b 	bl	8005bfc <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d10a      	bne.n	8002606 <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f005 fd20 	bl	8008036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 0208 	and.w	r2, r2, #8
 8002604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 faf6 	bl	8005bfc <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261a:	d10d      	bne.n	8002638 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f005 fd84 	bl	8008130 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fadd 	bl	8005bfc <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800264c:	d10d      	bne.n	800266a <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4619      	mov	r1, r3
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f005 fd59 	bl	800810c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fac4 	bl	8005bfc <USB_ReadInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d10a      	bne.n	8002696 <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f005 fd67 	bl	8008154 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 faae 	bl	8005bfc <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d115      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f005 fd57 	bl	8008170 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	e000      	b.n	80026d6 <HAL_PCD_IRQHandler+0x7a2>
      return;
 80026d4:	bf00      	nop
    }
  }
}
 80026d6:	3734      	adds	r7, #52	; 0x34
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}

080026dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_SetAddress+0x1a>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e013      	b.n	800271e <HAL_PCD_SetAddress+0x42>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fa1e 	bl	8005b50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	4608      	mov	r0, r1
 8002730:	4611      	mov	r1, r2
 8002732:	461a      	mov	r2, r3
 8002734:	4603      	mov	r3, r0
 8002736:	70fb      	strb	r3, [r7, #3]
 8002738:	460b      	mov	r3, r1
 800273a:	803b      	strh	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002748:	2b00      	cmp	r3, #0
 800274a:	da0f      	bge.n	800276c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 020f 	and.w	r2, r3, #15
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	3338      	adds	r3, #56	; 0x38
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	705a      	strb	r2, [r3, #1]
 800276a:	e00f      	b.n	800278c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002798:	883a      	ldrh	r2, [r7, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	78ba      	ldrb	r2, [r7, #2]
 80027a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027b6:	78bb      	ldrb	r3, [r7, #2]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d102      	bne.n	80027c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_PCD_EP_Open+0xaa>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e00e      	b.n	80027ee <HAL_PCD_EP_Open+0xc8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fc1a 	bl	8005018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80027ec:	7afb      	ldrb	r3, [r7, #11]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da0f      	bge.n	800282a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3338      	adds	r3, #56	; 0x38
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	705a      	strb	r2, [r3, #1]
 8002828:	e00f      	b.n	800284a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 020f 	and.w	r2, r3, #15
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_PCD_EP_Close+0x6e>
 8002860:	2302      	movs	r3, #2
 8002862:	e00e      	b.n	8002882 <HAL_PCD_EP_Close+0x8c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 fc58 	bl	8005128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	460b      	mov	r3, r1
 8002898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800289a:	7afb      	ldrb	r3, [r7, #11]
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	3304      	adds	r3, #4
 80028b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d102      	bne.n	80028e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	6979      	ldr	r1, [r7, #20]
 80028fe:	f002 fead 	bl	800565c <USB_EP0StartXfer>
 8002902:	e008      	b.n	8002916 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	6979      	ldr	r1, [r7, #20]
 8002912:	f002 fc8d 	bl	8005230 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	460b      	mov	r3, r1
 800292e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	3338      	adds	r3, #56	; 0x38
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2201      	movs	r2, #1
 800295e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	b2da      	uxtb	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	f002 fe63 	bl	800565c <USB_EP0StartXfer>
 8002996:	e008      	b.n	80029aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6979      	ldr	r1, [r7, #20]
 80029a6:	f002 fc43 	bl	8005230 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d901      	bls.n	80029d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e050      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da0f      	bge.n	80029fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	3338      	adds	r3, #56	; 0x38
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	3304      	adds	r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	705a      	strb	r2, [r3, #1]
 80029f8:	e00d      	b.n	8002a16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_EP_SetStall+0x82>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e01e      	b.n	8002a74 <HAL_PCD_EP_SetStall+0xc0>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 ffaf 	bl	80059a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	b2d9      	uxtb	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a64:	461a      	mov	r2, r3
 8002a66:	f003 f9a1 	bl	8005dac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d901      	bls.n	8002a9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e042      	b.n	8002b20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da0f      	bge.n	8002ac2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3338      	adds	r3, #56	; 0x38
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	705a      	strb	r2, [r3, #1]
 8002ac0:	e00f      	b.n	8002ae2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_EP_ClrStall+0x86>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e00e      	b.n	8002b20 <HAL_PCD_EP_ClrStall+0xa4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 ffb7 	bl	8005a84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	3338      	adds	r3, #56	; 0x38
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d901      	bls.n	8002b60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e06c      	b.n	8002c3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d902      	bls.n	8002b7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3303      	adds	r3, #3
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b84:	e02b      	b.n	8002bde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d902      	bls.n	8002ba2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3303      	adds	r3, #3
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f002 fe93 	bl	80058ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	441a      	add	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	441a      	add	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d809      	bhi.n	8002c08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d203      	bcs.n	8002c08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1be      	bne.n	8002b86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d811      	bhi.n	8002c38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c34:	4013      	ands	r3, r2
 8002c36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	333c      	adds	r3, #60	; 0x3c
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	f040 80b3 	bne.w	8002de2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a70      	ldr	r2, [pc, #448]	; (8002e4c <PCD_EP_OutXfrComplete_int+0x208>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d90e      	bls.n	8002cac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002caa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f005 f97b 	bl	8007fa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	f003 f874 	bl	8005dac <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	6093      	str	r3, [r2, #8]
 8002cd6:	e0b3      	b.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	6093      	str	r3, [r2, #8]
 8002cf4:	e0a4      	b.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 809f 	bne.w	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a51      	ldr	r2, [pc, #324]	; (8002e4c <PCD_EP_OutXfrComplete_int+0x208>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d90f      	bls.n	8002d2a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d20:	461a      	mov	r2, r3
 8002d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d26:	6093      	str	r3, [r2, #8]
 8002d28:	e08a      	b.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d3c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	0159      	lsls	r1, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d50:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4403      	add	r3, r0
 8002d60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d64:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4419      	add	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4403      	add	r3, r0
 8002d9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002da2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f005 f90e 	bl	8007fcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d144      	bne.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d138      	bne.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2101      	movs	r1, #1
 8002ddc:	f002 ffe6 	bl	8005dac <USB_EP0_OutStart>
 8002de0:	e02e      	b.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d124      	bne.n	8002e34 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e00:	461a      	mov	r2, r3
 8002e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e06:	6093      	str	r3, [r2, #8]
 8002e08:	e01a      	b.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e20:	461a      	mov	r2, r3
 8002e22:	2320      	movs	r3, #32
 8002e24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f005 f8cd 	bl	8007fcc <HAL_PCD_DataOutStageCallback>
 8002e32:	e005      	b.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f005 f8c6 	bl	8007fcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	4f54300a 	.word	0x4f54300a
 8002e50:	4f54310a 	.word	0x4f54310a

08002e54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	333c      	adds	r3, #60	; 0x3c
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d113      	bne.n	8002eb2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <PCD_EP_OutSetupPacket_int+0xb8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d922      	bls.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01d      	beq.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eae:	6093      	str	r3, [r2, #8]
 8002eb0:	e012      	b.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10e      	bne.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f005 f865 	bl	8007fa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <PCD_EP_OutSetupPacket_int+0xb8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d90c      	bls.n	8002f00 <PCD_EP_OutSetupPacket_int+0xac>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2101      	movs	r1, #1
 8002efc:	f002 ff56 	bl	8005dac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	4f54300a 	.word	0x4f54300a
 8002f10:	4f54310a 	.word	0x4f54310a

08002f14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
 8002f20:	4613      	mov	r3, r2
 8002f22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d107      	bne.n	8002f42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f32:	883b      	ldrh	r3, [r7, #0]
 8002f34:	0419      	lsls	r1, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f40:	e028      	b.n	8002f94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e00d      	b.n	8002f72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3340      	adds	r3, #64	; 0x40
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	4413      	add	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d3ec      	bcc.n	8002f56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f7c:	883b      	ldrh	r3, [r7, #0]
 8002f7e:	0418      	lsls	r0, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4302      	orrs	r2, r0
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	10000003 	.word	0x10000003

0800300c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40007000 	.word	0x40007000

0800302c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800304e:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800305a:	f7fd faa7 	bl	80005ac <HAL_GetTick>
 800305e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003060:	e009      	b.n	8003076 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003062:	f7fd faa3 	bl	80005ac <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003070:	d901      	bls.n	8003076 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e022      	b.n	80030bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d1ee      	bne.n	8003062 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800308a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003090:	f7fd fa8c 	bl	80005ac <HAL_GetTick>
 8003094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003096:	e009      	b.n	80030ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003098:	f7fd fa88 	bl	80005ac <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a6:	d901      	bls.n	80030ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e007      	b.n	80030bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b8:	d1ee      	bne.n	8003098 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40007000 	.word	0x40007000

080030cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e25c      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8087 	beq.w	80031fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f0:	4b96      	ldr	r3, [pc, #600]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d00c      	beq.n	8003116 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fc:	4b93      	ldr	r3, [pc, #588]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d112      	bne.n	800312e <HAL_RCC_OscConfig+0x62>
 8003108:	4b90      	ldr	r3, [pc, #576]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003114:	d10b      	bne.n	800312e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003116:	4b8d      	ldr	r3, [pc, #564]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d06c      	beq.n	80031fc <HAL_RCC_OscConfig+0x130>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d168      	bne.n	80031fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e236      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x7a>
 8003138:	4b84      	ldr	r3, [pc, #528]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a83      	ldr	r2, [pc, #524]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	e02e      	b.n	80031a4 <HAL_RCC_OscConfig+0xd8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x9c>
 800314e:	4b7f      	ldr	r3, [pc, #508]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7e      	ldr	r2, [pc, #504]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b7c      	ldr	r3, [pc, #496]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7b      	ldr	r2, [pc, #492]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xd8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0xc0>
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a75      	ldr	r2, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b73      	ldr	r3, [pc, #460]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xd8>
 800318c:	4b6f      	ldr	r3, [pc, #444]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6e      	ldr	r2, [pc, #440]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b6c      	ldr	r3, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6b      	ldr	r2, [pc, #428]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fd f9fe 	bl	80005ac <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fd f9fa 	bl	80005ac <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1ea      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b61      	ldr	r3, [pc, #388]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xe8>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fd f9ea 	bl	80005ac <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fd f9e6 	bl	80005ac <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1d6      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	4b57      	ldr	r3, [pc, #348]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x110>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d069      	beq.n	80032de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800320a:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003216:	4b4d      	ldr	r3, [pc, #308]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11c      	bne.n	800325c <HAL_RCC_OscConfig+0x190>
 8003222:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_RCC_OscConfig+0x17a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e1aa      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003246:	4b41      	ldr	r3, [pc, #260]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	493d      	ldr	r1, [pc, #244]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	e040      	b.n	80032de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d023      	beq.n	80032ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a38      	ldr	r2, [pc, #224]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd f99c 	bl	80005ac <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003278:	f7fd f998 	bl	80005ac <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e188      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b2d      	ldr	r3, [pc, #180]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4929      	ldr	r1, [pc, #164]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
 80032aa:	e018      	b.n	80032de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ac:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd f978 	bl	80005ac <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c0:	f7fd f974 	bl	80005ac <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e164      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d038      	beq.n	800335c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <HAL_RCC_OscConfig+0x280>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fd f955 	bl	80005ac <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003306:	f7fd f951 	bl	80005ac <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e141      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x23a>
 8003324:	e01a      	b.n	800335c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_OscConfig+0x280>)
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	4a08      	ldr	r2, [pc, #32]	; (800334c <HAL_RCC_OscConfig+0x280>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd f93b 	bl	80005ac <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333a:	f7fd f937 	bl	80005ac <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d903      	bls.n	8003350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e127      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
 800334c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b94      	ldr	r3, [pc, #592]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ee      	bne.n	800333a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a4 	beq.w	80034b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336a:	4b8e      	ldr	r3, [pc, #568]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	4b8b      	ldr	r3, [pc, #556]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a8a      	ldr	r2, [pc, #552]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b88      	ldr	r3, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d118      	bne.n	80033d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a81      	ldr	r2, [pc, #516]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033aa:	f7fd f8ff 	bl	80005ac <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033b2:	f7fd f8fb 	bl	80005ac <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b64      	cmp	r3, #100	; 0x64
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0eb      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c4:	4b78      	ldr	r3, [pc, #480]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x31a>
 80033d8:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a71      	ldr	r2, [pc, #452]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	e02d      	b.n	8003442 <HAL_RCC_OscConfig+0x376>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x33c>
 80033ee:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a6c      	ldr	r2, [pc, #432]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a69      	ldr	r2, [pc, #420]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	e01c      	b.n	8003442 <HAL_RCC_OscConfig+0x376>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b05      	cmp	r3, #5
 800340e:	d10c      	bne.n	800342a <HAL_RCC_OscConfig+0x35e>
 8003410:	4b64      	ldr	r3, [pc, #400]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a63      	ldr	r2, [pc, #396]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a60      	ldr	r2, [pc, #384]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	e00b      	b.n	8003442 <HAL_RCC_OscConfig+0x376>
 800342a:	4b5e      	ldr	r3, [pc, #376]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a5d      	ldr	r2, [pc, #372]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	4b5b      	ldr	r3, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5a      	ldr	r2, [pc, #360]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d015      	beq.n	8003476 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344a:	f7fd f8af 	bl	80005ac <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fd f8ab 	bl	80005ac <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e099      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ee      	beq.n	8003452 <HAL_RCC_OscConfig+0x386>
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fd f899 	bl	80005ac <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fd f895 	bl	80005ac <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e083      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003494:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1ee      	bne.n	800347e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d105      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a6:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a3e      	ldr	r2, [pc, #248]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80034ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06f      	beq.n	800359a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ba:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d067      	beq.n	8003596 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d149      	bne.n	8003562 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a34      	ldr	r2, [pc, #208]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80034d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fd f867 	bl	80005ac <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fd f863 	bl	80005ac <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e053      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f4:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	019b      	lsls	r3, r3, #6
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	4313      	orrs	r3, r2
 8003526:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800352c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd f837 	bl	80005ac <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fd f833 	bl	80005ac <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e023      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x476>
 8003560:	e01b      	b.n	800359a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 8003568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fd f81d 	bl	80005ac <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd f819 	bl	80005ac <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e009      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x4d8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x4aa>
 8003594:	e001      	b.n	800359a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0ce      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b69      	ldr	r3, [pc, #420]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	4964      	ldr	r1, [pc, #400]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b62      	ldr	r3, [pc, #392]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b6      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b58      	ldr	r3, [pc, #352]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a57      	ldr	r2, [pc, #348]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b52      	ldr	r3, [pc, #328]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494c      	ldr	r1, [pc, #304]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b46      	ldr	r3, [pc, #280]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07d      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b40      	ldr	r3, [pc, #256]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e071      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e069      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4935      	ldr	r1, [pc, #212]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7fc ff84 	bl	80005ac <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fc ff80 	bl	80005ac <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e051      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4921      	ldr	r1, [pc, #132]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b1f      	ldr	r3, [pc, #124]	; (800376c <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e030      	b.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4915      	ldr	r1, [pc, #84]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490d      	ldr	r1, [pc, #52]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f81d 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8003742:	4601      	mov	r1, r0
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	fa21 f303 	lsr.w	r3, r1, r3
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_RCC_ClockConfig+0x1cc>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800375a:	2000      	movs	r0, #0
 800375c:	f7fc fee2 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	08008a70 	.word	0x08008a70
 8003778:	200000bc 	.word	0x200000bc

0800377c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	2300      	movs	r3, #0
 800378c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b04      	cmp	r3, #4
 800379c:	d007      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x32>
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d008      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x38>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80b4 	bne.w	8003910 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b5e      	ldr	r3, [pc, #376]	; (8003924 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037aa:	60bb      	str	r3, [r7, #8]
       break;
 80037ac:	e0b3      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ae:	4b5e      	ldr	r3, [pc, #376]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037b0:	60bb      	str	r3, [r7, #8]
      break;
 80037b2:	e0b0      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b4:	4b5a      	ldr	r3, [pc, #360]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037be:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04a      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	4b55      	ldr	r3, [pc, #340]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	f04f 0400 	mov.w	r4, #0
 80037d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	ea03 0501 	and.w	r5, r3, r1
 80037e0:	ea04 0602 	and.w	r6, r4, r2
 80037e4:	4629      	mov	r1, r5
 80037e6:	4632      	mov	r2, r6
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f04f 0400 	mov.w	r4, #0
 80037f0:	0154      	lsls	r4, r2, #5
 80037f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f6:	014b      	lsls	r3, r1, #5
 80037f8:	4619      	mov	r1, r3
 80037fa:	4622      	mov	r2, r4
 80037fc:	1b49      	subs	r1, r1, r5
 80037fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f04f 0400 	mov.w	r4, #0
 800380a:	0194      	lsls	r4, r2, #6
 800380c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003810:	018b      	lsls	r3, r1, #6
 8003812:	1a5b      	subs	r3, r3, r1
 8003814:	eb64 0402 	sbc.w	r4, r4, r2
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	00e2      	lsls	r2, r4, #3
 8003822:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003826:	00d9      	lsls	r1, r3, #3
 8003828:	460b      	mov	r3, r1
 800382a:	4614      	mov	r4, r2
 800382c:	195b      	adds	r3, r3, r5
 800382e:	eb44 0406 	adc.w	r4, r4, r6
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	0262      	lsls	r2, r4, #9
 800383c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003840:	0259      	lsls	r1, r3, #9
 8003842:	460b      	mov	r3, r1
 8003844:	4614      	mov	r4, r2
 8003846:	4618      	mov	r0, r3
 8003848:	4621      	mov	r1, r4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f04f 0400 	mov.w	r4, #0
 8003850:	461a      	mov	r2, r3
 8003852:	4623      	mov	r3, r4
 8003854:	f7fc fcd8 	bl	8000208 <__aeabi_uldivmod>
 8003858:	4603      	mov	r3, r0
 800385a:	460c      	mov	r4, r1
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e049      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	f04f 0400 	mov.w	r4, #0
 800386a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	ea03 0501 	and.w	r5, r3, r1
 8003876:	ea04 0602 	and.w	r6, r4, r2
 800387a:	4629      	mov	r1, r5
 800387c:	4632      	mov	r2, r6
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f04f 0400 	mov.w	r4, #0
 8003886:	0154      	lsls	r4, r2, #5
 8003888:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800388c:	014b      	lsls	r3, r1, #5
 800388e:	4619      	mov	r1, r3
 8003890:	4622      	mov	r2, r4
 8003892:	1b49      	subs	r1, r1, r5
 8003894:	eb62 0206 	sbc.w	r2, r2, r6
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	f04f 0400 	mov.w	r4, #0
 80038a0:	0194      	lsls	r4, r2, #6
 80038a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	1a5b      	subs	r3, r3, r1
 80038aa:	eb64 0402 	sbc.w	r4, r4, r2
 80038ae:	f04f 0100 	mov.w	r1, #0
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	00e2      	lsls	r2, r4, #3
 80038b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038bc:	00d9      	lsls	r1, r3, #3
 80038be:	460b      	mov	r3, r1
 80038c0:	4614      	mov	r4, r2
 80038c2:	195b      	adds	r3, r3, r5
 80038c4:	eb44 0406 	adc.w	r4, r4, r6
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	02a2      	lsls	r2, r4, #10
 80038d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038d6:	0299      	lsls	r1, r3, #10
 80038d8:	460b      	mov	r3, r1
 80038da:	4614      	mov	r4, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	4621      	mov	r1, r4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	461a      	mov	r2, r3
 80038e8:	4623      	mov	r3, r4
 80038ea:	f7fc fc8d 	bl	8000208 <__aeabi_uldivmod>
 80038ee:	4603      	mov	r3, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	3301      	adds	r3, #1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	60bb      	str	r3, [r7, #8]
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003912:	60bb      	str	r3, [r7, #8]
      break;
 8003914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003916:	68bb      	ldr	r3, [r7, #8]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	00f42400 	.word	0x00f42400
 8003928:	007a1200 	.word	0x007a1200

0800392c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_RCC_GetHCLKFreq+0x14>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	200000bc 	.word	0x200000bc

08003944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003948:	f7ff fff0 	bl	800392c <HAL_RCC_GetHCLKFreq>
 800394c:	4601      	mov	r1, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0a9b      	lsrs	r3, r3, #10
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4a03      	ldr	r2, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	08008a80 	.word	0x08008a80

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003970:	f7ff ffdc 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003974:	4601      	mov	r1, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0b5b      	lsrs	r3, r3, #13
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4a03      	ldr	r2, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	08008a80 	.word	0x08008a80

08003994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d012      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039bc:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a68      	ldr	r2, [pc, #416]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	4964      	ldr	r1, [pc, #400]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d017      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ee:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	4959      	ldr	r1, [pc, #356]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d017      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a2a:	4b4e      	ldr	r3, [pc, #312]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	494a      	ldr	r1, [pc, #296]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 808b 	beq.w	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6413      	str	r3, [r2, #64]	; 0x40
 8003a84:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a90:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a34      	ldr	r2, [pc, #208]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fc fd86 	bl	80005ac <HAL_GetTick>
 8003aa0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa4:	f7fc fd82 	bl	80005ac <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e355      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ab6:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ac2:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d035      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d02e      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b02:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d114      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fc fd4a 	bl	80005ac <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fc fd46 	bl	80005ac <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e317      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ee      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b4a:	d111      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b5a:	400b      	ands	r3, r1
 8003b5c:	4901      	ldr	r1, [pc, #4]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	0ffffcff 	.word	0x0ffffcff
 8003b70:	4bb0      	ldr	r3, [pc, #704]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4aaf      	ldr	r2, [pc, #700]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b7a:	6093      	str	r3, [r2, #8]
 8003b7c:	4bad      	ldr	r3, [pc, #692]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	49aa      	ldr	r1, [pc, #680]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d010      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b9a:	4ba6      	ldr	r3, [pc, #664]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba0:	4aa4      	ldr	r2, [pc, #656]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003baa:	4ba2      	ldr	r3, [pc, #648]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	499f      	ldr	r1, [pc, #636]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc8:	4b9a      	ldr	r3, [pc, #616]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd6:	4997      	ldr	r1, [pc, #604]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bea:	4b92      	ldr	r3, [pc, #584]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf8:	498e      	ldr	r1, [pc, #568]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c0c:	4b89      	ldr	r3, [pc, #548]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	4986      	ldr	r1, [pc, #536]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c2e:	4b81      	ldr	r3, [pc, #516]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	497d      	ldr	r1, [pc, #500]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c50:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	4975      	ldr	r1, [pc, #468]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f023 020c 	bic.w	r2, r3, #12
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	496c      	ldr	r1, [pc, #432]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c94:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	4964      	ldr	r1, [pc, #400]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cb6:	4b5f      	ldr	r3, [pc, #380]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	495b      	ldr	r1, [pc, #364]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cd8:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	4953      	ldr	r1, [pc, #332]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003cfa:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	494a      	ldr	r1, [pc, #296]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d1c:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	4942      	ldr	r1, [pc, #264]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	4939      	ldr	r1, [pc, #228]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d60:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d6e:	4931      	ldr	r1, [pc, #196]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d011      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d82:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d90:	4928      	ldr	r1, [pc, #160]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da0:	d101      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd0:	4918      	ldr	r1, [pc, #96]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df4:	490f      	ldr	r1, [pc, #60]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d005      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e0a:	f040 80d8 	bne.w	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1a:	f7fc fbc7 	bl	80005ac <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e22:	f7fc fbc3 	bl	80005ac <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	; 0x64
 8003e2e:	d903      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e196      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003e34:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e38:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ee      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d021      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11d      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e58:	4b64      	ldr	r3, [pc, #400]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e66:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	0e1b      	lsrs	r3, r3, #24
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	019a      	lsls	r2, r3, #6
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	071b      	lsls	r3, r3, #28
 8003e8c:	4957      	ldr	r1, [pc, #348]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02e      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ebe:	d129      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ec0:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ece:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	0f1b      	lsrs	r3, r3, #28
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	019a      	lsls	r2, r3, #6
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	071b      	lsls	r3, r3, #28
 8003ef4:	493d      	ldr	r1, [pc, #244]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f02:	f023 021f 	bic.w	r2, r3, #31
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	4937      	ldr	r1, [pc, #220]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01d      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f20:	4b32      	ldr	r3, [pc, #200]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f26:	0e1b      	lsrs	r3, r3, #24
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f2e:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f34:	0f1b      	lsrs	r3, r3, #28
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	019a      	lsls	r2, r3, #6
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	071b      	lsls	r3, r3, #28
 8003f54:	4925      	ldr	r1, [pc, #148]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d011      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	019a      	lsls	r2, r3, #6
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	071b      	lsls	r3, r3, #28
 8003f84:	4919      	ldr	r1, [pc, #100]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a16      	ldr	r2, [pc, #88]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fc fb08 	bl	80005ac <HAL_GetTick>
 8003f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fa0:	f7fc fb04 	bl	80005ac <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0d7      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	f040 80cd 	bne.w	8004160 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fc faeb 	bl	80005ac <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fda:	f7fc fae7 	bl	80005ac <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b64      	cmp	r3, #100	; 0x64
 8003fe6:	d903      	bls.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0ba      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003fec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffc:	d0ed      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800401a:	2b00      	cmp	r3, #0
 800401c:	d02e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d12a      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004026:	4b51      	ldr	r3, [pc, #324]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004034:	4b4d      	ldr	r3, [pc, #308]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	0f1b      	lsrs	r3, r3, #28
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	019a      	lsls	r2, r3, #6
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	4944      	ldr	r1, [pc, #272]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004062:	4b42      	ldr	r3, [pc, #264]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004068:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	493d      	ldr	r1, [pc, #244]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d022      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004090:	d11d      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	0e1b      	lsrs	r3, r3, #24
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040a0:	4b32      	ldr	r3, [pc, #200]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	0f1b      	lsrs	r3, r3, #28
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	019a      	lsls	r2, r3, #6
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	431a      	orrs	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	071b      	lsls	r3, r3, #28
 80040c6:	4929      	ldr	r1, [pc, #164]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d028      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	0e1b      	lsrs	r3, r3, #24
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040e8:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	019a      	lsls	r2, r3, #6
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	071b      	lsls	r3, r3, #28
 800410e:	4917      	ldr	r1, [pc, #92]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	4911      	ldr	r1, [pc, #68]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0e      	ldr	r2, [pc, #56]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004138:	f7fc fa38 	bl	80005ac <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004140:	f7fc fa34 	bl	80005ac <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e007      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415e:	d1ef      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800

08004170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e040      	b.n	8004204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f003 fd34 	bl	8007c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	; 0x24
 800419c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f82c 	bl	800420c <UART_SetConfig>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e022      	b.n	8004204 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fac4 	bl	8004754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb4b 	bl	8004898 <UART_CheckIdleState>
 8004202:	4603      	mov	r3, r0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4bb1      	ldr	r3, [pc, #708]	; (8004500 <UART_SetConfig+0x2f4>)
 800423c:	4013      	ands	r3, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	430b      	orrs	r3, r1
 8004246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a9f      	ldr	r2, [pc, #636]	; (8004504 <UART_SetConfig+0x2f8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d121      	bne.n	80042d0 <UART_SetConfig+0xc4>
 800428c:	4b9e      	ldr	r3, [pc, #632]	; (8004508 <UART_SetConfig+0x2fc>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b03      	cmp	r3, #3
 8004298:	d816      	bhi.n	80042c8 <UART_SetConfig+0xbc>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0x94>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042bd 	.word	0x080042bd
 80042a8:	080042b7 	.word	0x080042b7
 80042ac:	080042c3 	.word	0x080042c3
 80042b0:	2301      	movs	r3, #1
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e151      	b.n	800455a <UART_SetConfig+0x34e>
 80042b6:	2302      	movs	r3, #2
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e14e      	b.n	800455a <UART_SetConfig+0x34e>
 80042bc:	2304      	movs	r3, #4
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e14b      	b.n	800455a <UART_SetConfig+0x34e>
 80042c2:	2308      	movs	r3, #8
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e148      	b.n	800455a <UART_SetConfig+0x34e>
 80042c8:	2310      	movs	r3, #16
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	bf00      	nop
 80042ce:	e144      	b.n	800455a <UART_SetConfig+0x34e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a8d      	ldr	r2, [pc, #564]	; (800450c <UART_SetConfig+0x300>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d134      	bne.n	8004344 <UART_SetConfig+0x138>
 80042da:	4b8b      	ldr	r3, [pc, #556]	; (8004508 <UART_SetConfig+0x2fc>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b0c      	cmp	r3, #12
 80042e6:	d829      	bhi.n	800433c <UART_SetConfig+0x130>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0xe4>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004325 	.word	0x08004325
 80042f4:	0800433d 	.word	0x0800433d
 80042f8:	0800433d 	.word	0x0800433d
 80042fc:	0800433d 	.word	0x0800433d
 8004300:	08004331 	.word	0x08004331
 8004304:	0800433d 	.word	0x0800433d
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800433d 	.word	0x0800433d
 8004310:	0800432b 	.word	0x0800432b
 8004314:	0800433d 	.word	0x0800433d
 8004318:	0800433d 	.word	0x0800433d
 800431c:	0800433d 	.word	0x0800433d
 8004320:	08004337 	.word	0x08004337
 8004324:	2300      	movs	r3, #0
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e117      	b.n	800455a <UART_SetConfig+0x34e>
 800432a:	2302      	movs	r3, #2
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e114      	b.n	800455a <UART_SetConfig+0x34e>
 8004330:	2304      	movs	r3, #4
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e111      	b.n	800455a <UART_SetConfig+0x34e>
 8004336:	2308      	movs	r3, #8
 8004338:	77fb      	strb	r3, [r7, #31]
 800433a:	e10e      	b.n	800455a <UART_SetConfig+0x34e>
 800433c:	2310      	movs	r3, #16
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	bf00      	nop
 8004342:	e10a      	b.n	800455a <UART_SetConfig+0x34e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a71      	ldr	r2, [pc, #452]	; (8004510 <UART_SetConfig+0x304>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d120      	bne.n	8004390 <UART_SetConfig+0x184>
 800434e:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <UART_SetConfig+0x2fc>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004358:	2b10      	cmp	r3, #16
 800435a:	d00f      	beq.n	800437c <UART_SetConfig+0x170>
 800435c:	2b10      	cmp	r3, #16
 800435e:	d802      	bhi.n	8004366 <UART_SetConfig+0x15a>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <UART_SetConfig+0x164>
 8004364:	e010      	b.n	8004388 <UART_SetConfig+0x17c>
 8004366:	2b20      	cmp	r3, #32
 8004368:	d005      	beq.n	8004376 <UART_SetConfig+0x16a>
 800436a:	2b30      	cmp	r3, #48	; 0x30
 800436c:	d009      	beq.n	8004382 <UART_SetConfig+0x176>
 800436e:	e00b      	b.n	8004388 <UART_SetConfig+0x17c>
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e0f1      	b.n	800455a <UART_SetConfig+0x34e>
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0ee      	b.n	800455a <UART_SetConfig+0x34e>
 800437c:	2304      	movs	r3, #4
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0eb      	b.n	800455a <UART_SetConfig+0x34e>
 8004382:	2308      	movs	r3, #8
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e0e8      	b.n	800455a <UART_SetConfig+0x34e>
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	bf00      	nop
 800438e:	e0e4      	b.n	800455a <UART_SetConfig+0x34e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a5f      	ldr	r2, [pc, #380]	; (8004514 <UART_SetConfig+0x308>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d120      	bne.n	80043dc <UART_SetConfig+0x1d0>
 800439a:	4b5b      	ldr	r3, [pc, #364]	; (8004508 <UART_SetConfig+0x2fc>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d00f      	beq.n	80043c8 <UART_SetConfig+0x1bc>
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d802      	bhi.n	80043b2 <UART_SetConfig+0x1a6>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <UART_SetConfig+0x1b0>
 80043b0:	e010      	b.n	80043d4 <UART_SetConfig+0x1c8>
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d005      	beq.n	80043c2 <UART_SetConfig+0x1b6>
 80043b6:	2bc0      	cmp	r3, #192	; 0xc0
 80043b8:	d009      	beq.n	80043ce <UART_SetConfig+0x1c2>
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x1c8>
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e0cb      	b.n	800455a <UART_SetConfig+0x34e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e0c8      	b.n	800455a <UART_SetConfig+0x34e>
 80043c8:	2304      	movs	r3, #4
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0c5      	b.n	800455a <UART_SetConfig+0x34e>
 80043ce:	2308      	movs	r3, #8
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e0c2      	b.n	800455a <UART_SetConfig+0x34e>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	bf00      	nop
 80043da:	e0be      	b.n	800455a <UART_SetConfig+0x34e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a4d      	ldr	r2, [pc, #308]	; (8004518 <UART_SetConfig+0x30c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d124      	bne.n	8004430 <UART_SetConfig+0x224>
 80043e6:	4b48      	ldr	r3, [pc, #288]	; (8004508 <UART_SetConfig+0x2fc>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f4:	d012      	beq.n	800441c <UART_SetConfig+0x210>
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d802      	bhi.n	8004402 <UART_SetConfig+0x1f6>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <UART_SetConfig+0x204>
 8004400:	e012      	b.n	8004428 <UART_SetConfig+0x21c>
 8004402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004406:	d006      	beq.n	8004416 <UART_SetConfig+0x20a>
 8004408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440c:	d009      	beq.n	8004422 <UART_SetConfig+0x216>
 800440e:	e00b      	b.n	8004428 <UART_SetConfig+0x21c>
 8004410:	2300      	movs	r3, #0
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e0a1      	b.n	800455a <UART_SetConfig+0x34e>
 8004416:	2302      	movs	r3, #2
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e09e      	b.n	800455a <UART_SetConfig+0x34e>
 800441c:	2304      	movs	r3, #4
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e09b      	b.n	800455a <UART_SetConfig+0x34e>
 8004422:	2308      	movs	r3, #8
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e098      	b.n	800455a <UART_SetConfig+0x34e>
 8004428:	2310      	movs	r3, #16
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	bf00      	nop
 800442e:	e094      	b.n	800455a <UART_SetConfig+0x34e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a39      	ldr	r2, [pc, #228]	; (800451c <UART_SetConfig+0x310>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d124      	bne.n	8004484 <UART_SetConfig+0x278>
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <UART_SetConfig+0x2fc>)
 800443c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d012      	beq.n	8004470 <UART_SetConfig+0x264>
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d802      	bhi.n	8004456 <UART_SetConfig+0x24a>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <UART_SetConfig+0x258>
 8004454:	e012      	b.n	800447c <UART_SetConfig+0x270>
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d006      	beq.n	800446a <UART_SetConfig+0x25e>
 800445c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004460:	d009      	beq.n	8004476 <UART_SetConfig+0x26a>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x270>
 8004464:	2301      	movs	r3, #1
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e077      	b.n	800455a <UART_SetConfig+0x34e>
 800446a:	2302      	movs	r3, #2
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e074      	b.n	800455a <UART_SetConfig+0x34e>
 8004470:	2304      	movs	r3, #4
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e071      	b.n	800455a <UART_SetConfig+0x34e>
 8004476:	2308      	movs	r3, #8
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e06e      	b.n	800455a <UART_SetConfig+0x34e>
 800447c:	2310      	movs	r3, #16
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	bf00      	nop
 8004482:	e06a      	b.n	800455a <UART_SetConfig+0x34e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a25      	ldr	r2, [pc, #148]	; (8004520 <UART_SetConfig+0x314>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d124      	bne.n	80044d8 <UART_SetConfig+0x2cc>
 800448e:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <UART_SetConfig+0x2fc>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d012      	beq.n	80044c4 <UART_SetConfig+0x2b8>
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	d802      	bhi.n	80044aa <UART_SetConfig+0x29e>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <UART_SetConfig+0x2ac>
 80044a8:	e012      	b.n	80044d0 <UART_SetConfig+0x2c4>
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	d006      	beq.n	80044be <UART_SetConfig+0x2b2>
 80044b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044b4:	d009      	beq.n	80044ca <UART_SetConfig+0x2be>
 80044b6:	e00b      	b.n	80044d0 <UART_SetConfig+0x2c4>
 80044b8:	2300      	movs	r3, #0
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e04d      	b.n	800455a <UART_SetConfig+0x34e>
 80044be:	2302      	movs	r3, #2
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e04a      	b.n	800455a <UART_SetConfig+0x34e>
 80044c4:	2304      	movs	r3, #4
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e047      	b.n	800455a <UART_SetConfig+0x34e>
 80044ca:	2308      	movs	r3, #8
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e044      	b.n	800455a <UART_SetConfig+0x34e>
 80044d0:	2310      	movs	r3, #16
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	bf00      	nop
 80044d6:	e040      	b.n	800455a <UART_SetConfig+0x34e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a11      	ldr	r2, [pc, #68]	; (8004524 <UART_SetConfig+0x318>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d139      	bne.n	8004556 <UART_SetConfig+0x34a>
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <UART_SetConfig+0x2fc>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f0:	d027      	beq.n	8004542 <UART_SetConfig+0x336>
 80044f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f6:	d817      	bhi.n	8004528 <UART_SetConfig+0x31c>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01c      	beq.n	8004536 <UART_SetConfig+0x32a>
 80044fc:	e027      	b.n	800454e <UART_SetConfig+0x342>
 80044fe:	bf00      	nop
 8004500:	efff69f3 	.word	0xefff69f3
 8004504:	40011000 	.word	0x40011000
 8004508:	40023800 	.word	0x40023800
 800450c:	40004400 	.word	0x40004400
 8004510:	40004800 	.word	0x40004800
 8004514:	40004c00 	.word	0x40004c00
 8004518:	40005000 	.word	0x40005000
 800451c:	40011400 	.word	0x40011400
 8004520:	40007800 	.word	0x40007800
 8004524:	40007c00 	.word	0x40007c00
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452c:	d006      	beq.n	800453c <UART_SetConfig+0x330>
 800452e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004532:	d009      	beq.n	8004548 <UART_SetConfig+0x33c>
 8004534:	e00b      	b.n	800454e <UART_SetConfig+0x342>
 8004536:	2300      	movs	r3, #0
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e00e      	b.n	800455a <UART_SetConfig+0x34e>
 800453c:	2302      	movs	r3, #2
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e00b      	b.n	800455a <UART_SetConfig+0x34e>
 8004542:	2304      	movs	r3, #4
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e008      	b.n	800455a <UART_SetConfig+0x34e>
 8004548:	2308      	movs	r3, #8
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e005      	b.n	800455a <UART_SetConfig+0x34e>
 800454e:	2310      	movs	r3, #16
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	bf00      	nop
 8004554:	e001      	b.n	800455a <UART_SetConfig+0x34e>
 8004556:	2310      	movs	r3, #16
 8004558:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004562:	d17c      	bne.n	800465e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004564:	7ffb      	ldrb	r3, [r7, #31]
 8004566:	2b08      	cmp	r3, #8
 8004568:	d859      	bhi.n	800461e <UART_SetConfig+0x412>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x364>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004595 	.word	0x08004595
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045d1 	.word	0x080045d1
 800457c:	0800461f 	.word	0x0800461f
 8004580:	080045e9 	.word	0x080045e9
 8004584:	0800461f 	.word	0x0800461f
 8004588:	0800461f 	.word	0x0800461f
 800458c:	0800461f 	.word	0x0800461f
 8004590:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004594:	f7ff f9d6 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 8004598:	4603      	mov	r3, r0
 800459a:	005a      	lsls	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	441a      	add	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	61bb      	str	r3, [r7, #24]
        break;
 80045b0:	e038      	b.n	8004624 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80045b2:	f7ff f9db 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 80045b6:	4603      	mov	r3, r0
 80045b8:	005a      	lsls	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	441a      	add	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	61bb      	str	r3, [r7, #24]
        break;
 80045ce:	e029      	b.n	8004624 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	085a      	lsrs	r2, r3, #1
 80045d6:	4b5d      	ldr	r3, [pc, #372]	; (800474c <UART_SetConfig+0x540>)
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6852      	ldr	r2, [r2, #4]
 80045de:	fbb3 f3f2 	udiv	r3, r3, r2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	61bb      	str	r3, [r7, #24]
        break;
 80045e6:	e01d      	b.n	8004624 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045e8:	f7ff f8c8 	bl	800377c <HAL_RCC_GetSysClockFreq>
 80045ec:	4603      	mov	r3, r0
 80045ee:	005a      	lsls	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	441a      	add	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	b29b      	uxth	r3, r3
 8004602:	61bb      	str	r3, [r7, #24]
        break;
 8004604:	e00e      	b.n	8004624 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	b29b      	uxth	r3, r3
 800461a:	61bb      	str	r3, [r7, #24]
        break;
 800461c:	e002      	b.n	8004624 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
        break;
 8004622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d916      	bls.n	8004658 <UART_SetConfig+0x44c>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d212      	bcs.n	8004658 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f023 030f 	bic.w	r3, r3, #15
 800463a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	b29a      	uxth	r2, r3
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	4313      	orrs	r3, r2
 800464c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	89fa      	ldrh	r2, [r7, #14]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e06e      	b.n	8004736 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	75fb      	strb	r3, [r7, #23]
 800465c:	e06b      	b.n	8004736 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800465e:	7ffb      	ldrb	r3, [r7, #31]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d857      	bhi.n	8004714 <UART_SetConfig+0x508>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x460>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004691 	.word	0x08004691
 8004670:	080046ad 	.word	0x080046ad
 8004674:	080046c9 	.word	0x080046c9
 8004678:	08004715 	.word	0x08004715
 800467c:	080046e1 	.word	0x080046e1
 8004680:	08004715 	.word	0x08004715
 8004684:	08004715 	.word	0x08004715
 8004688:	08004715 	.word	0x08004715
 800468c:	080046fd 	.word	0x080046fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004690:	f7ff f958 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 8004694:	4602      	mov	r2, r0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	61bb      	str	r3, [r7, #24]
        break;
 80046aa:	e036      	b.n	800471a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046ac:	f7ff f95e 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	61bb      	str	r3, [r7, #24]
        break;
 80046c6:	e028      	b.n	800471a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	085a      	lsrs	r2, r3, #1
 80046ce:	4b20      	ldr	r3, [pc, #128]	; (8004750 <UART_SetConfig+0x544>)
 80046d0:	4413      	add	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6852      	ldr	r2, [r2, #4]
 80046d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	61bb      	str	r3, [r7, #24]
        break;
 80046de:	e01c      	b.n	800471a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046e0:	f7ff f84c 	bl	800377c <HAL_RCC_GetSysClockFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	441a      	add	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	61bb      	str	r3, [r7, #24]
        break;
 80046fa:	e00e      	b.n	800471a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	b29b      	uxth	r3, r3
 8004710:	61bb      	str	r3, [r7, #24]
        break;
 8004712:	e002      	b.n	800471a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
        break;
 8004718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b0f      	cmp	r3, #15
 800471e:	d908      	bls.n	8004732 <UART_SetConfig+0x526>
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004726:	d204      	bcs.n	8004732 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	e001      	b.n	8004736 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	01e84800 	.word	0x01e84800
 8004750:	00f42400 	.word	0x00f42400

08004754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004852:	d10a      	bne.n	800486a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048a6:	f7fb fe81 	bl	80005ac <HAL_GetTick>
 80048aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d10e      	bne.n	80048d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f814 	bl	80048f6 <UART_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e00a      	b.n	80048ee <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004906:	e02a      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d026      	beq.n	800495e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004910:	f7fb fe4c 	bl	80005ac <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <UART_WaitOnFlagUntilTimeout+0x30>
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11b      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004934:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e00f      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	429a      	cmp	r2, r3
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	429a      	cmp	r2, r3
 800497a:	d0c5      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004988:	b084      	sub	sp, #16
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	f107 001c 	add.w	r0, r7, #28
 8004996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2b01      	cmp	r3, #1
 800499e:	d120      	bne.n	80049e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <USB_CoreInit+0xac>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f001 fa46 	bl	8005e68 <USB_CoreReset>
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e010      	b.n	8004a04 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 fa3a 	bl	8005e68 <USB_CoreReset>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10b      	bne.n	8004a22 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f043 0206 	orr.w	r2, r3, #6
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a2e:	b004      	add	sp, #16
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	ffbdffbf 	.word	0xffbdffbf

08004a38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d165      	bne.n	8004b18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a41      	ldr	r2, [pc, #260]	; (8004b54 <USB_SetTurnaroundTime+0x11c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d906      	bls.n	8004a62 <USB_SetTurnaroundTime+0x2a>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a40      	ldr	r2, [pc, #256]	; (8004b58 <USB_SetTurnaroundTime+0x120>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d802      	bhi.n	8004a62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a5c:	230f      	movs	r3, #15
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e062      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a3c      	ldr	r2, [pc, #240]	; (8004b58 <USB_SetTurnaroundTime+0x120>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d906      	bls.n	8004a78 <USB_SetTurnaroundTime+0x40>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a3b      	ldr	r2, [pc, #236]	; (8004b5c <USB_SetTurnaroundTime+0x124>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d802      	bhi.n	8004a78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a72:	230e      	movs	r3, #14
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e057      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <USB_SetTurnaroundTime+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d906      	bls.n	8004a8e <USB_SetTurnaroundTime+0x56>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <USB_SetTurnaroundTime+0x128>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d802      	bhi.n	8004a8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a88:	230d      	movs	r3, #13
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e04c      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a33      	ldr	r2, [pc, #204]	; (8004b60 <USB_SetTurnaroundTime+0x128>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d906      	bls.n	8004aa4 <USB_SetTurnaroundTime+0x6c>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a32      	ldr	r2, [pc, #200]	; (8004b64 <USB_SetTurnaroundTime+0x12c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d802      	bhi.n	8004aa4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e041      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <USB_SetTurnaroundTime+0x12c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d906      	bls.n	8004aba <USB_SetTurnaroundTime+0x82>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a2e      	ldr	r2, [pc, #184]	; (8004b68 <USB_SetTurnaroundTime+0x130>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d802      	bhi.n	8004aba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ab4:	230b      	movs	r3, #11
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e036      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a2a      	ldr	r2, [pc, #168]	; (8004b68 <USB_SetTurnaroundTime+0x130>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d906      	bls.n	8004ad0 <USB_SetTurnaroundTime+0x98>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a29      	ldr	r2, [pc, #164]	; (8004b6c <USB_SetTurnaroundTime+0x134>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d802      	bhi.n	8004ad0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aca:	230a      	movs	r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e02b      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a26      	ldr	r2, [pc, #152]	; (8004b6c <USB_SetTurnaroundTime+0x134>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d906      	bls.n	8004ae6 <USB_SetTurnaroundTime+0xae>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <USB_SetTurnaroundTime+0x138>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d802      	bhi.n	8004ae6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ae0:	2309      	movs	r3, #9
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e020      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <USB_SetTurnaroundTime+0x138>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d906      	bls.n	8004afc <USB_SetTurnaroundTime+0xc4>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <USB_SetTurnaroundTime+0x13c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d802      	bhi.n	8004afc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004af6:	2308      	movs	r3, #8
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e015      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <USB_SetTurnaroundTime+0x13c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d906      	bls.n	8004b12 <USB_SetTurnaroundTime+0xda>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <USB_SetTurnaroundTime+0x140>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d802      	bhi.n	8004b12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b0c:	2307      	movs	r3, #7
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e00a      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b12:	2306      	movs	r3, #6
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e007      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b1e:	2309      	movs	r3, #9
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e001      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b24:	2309      	movs	r3, #9
 8004b26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	029b      	lsls	r3, r3, #10
 8004b3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	00d8acbf 	.word	0x00d8acbf
 8004b58:	00e4e1bf 	.word	0x00e4e1bf
 8004b5c:	00f423ff 	.word	0x00f423ff
 8004b60:	0106737f 	.word	0x0106737f
 8004b64:	011a499f 	.word	0x011a499f
 8004b68:	01312cff 	.word	0x01312cff
 8004b6c:	014ca43f 	.word	0x014ca43f
 8004b70:	016e35ff 	.word	0x016e35ff
 8004b74:	01a6ab1f 	.word	0x01a6ab1f
 8004b78:	01e847ff 	.word	0x01e847ff

08004b7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e00b      	b.n	8004c04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	e001      	b.n	8004c04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e003      	b.n	8004c0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c04:	2032      	movs	r0, #50	; 0x32
 8004c06:	f7fb fcdd 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c14:	b084      	sub	sp, #16
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	e009      	b.n	8004c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3340      	adds	r3, #64	; 0x40
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3301      	adds	r3, #1
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0e      	cmp	r3, #14
 8004c4c:	d9f2      	bls.n	8004c34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d112      	bne.n	8004c7a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e005      	b.n	8004c86 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	4619      	mov	r1, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	680b      	ldr	r3, [r1, #0]
 8004ca4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10c      	bne.n	8004cc6 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f971 	bl	8004f9c <USB_SetDevSpeed>
 8004cba:	e018      	b.n	8004cee <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f96c 	bl	8004f9c <USB_SetDevSpeed>
 8004cc4:	e013      	b.n	8004cee <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d10c      	bne.n	8004ce6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f961 	bl	8004f9c <USB_SetDevSpeed>
 8004cda:	e008      	b.n	8004cee <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cdc:	2101      	movs	r1, #1
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f95c 	bl	8004f9c <USB_SetDevSpeed>
 8004ce4:	e003      	b.n	8004cee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f957 	bl	8004f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cee:	2110      	movs	r1, #16
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f90b 	bl	8004f0c <USB_FlushTxFifo>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f929 	bl	8004f58 <USB_FlushRxFifo>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	461a      	mov	r2, r3
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	461a      	mov	r2, r3
 8004d24:	2300      	movs	r3, #0
 8004d26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	e043      	b.n	8004dc2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d50:	d118      	bne.n	8004d84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e013      	b.n	8004d96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e008      	b.n	8004d96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	2300      	movs	r3, #0
 8004d94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	461a      	mov	r2, r3
 8004da4:	2300      	movs	r3, #0
 8004da6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	461a      	mov	r2, r3
 8004db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d3b7      	bcc.n	8004d3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e043      	b.n	8004e58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de6:	d118      	bne.n	8004e1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e013      	b.n	8004e2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	461a      	mov	r2, r3
 8004e12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e008      	b.n	8004e2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	461a      	mov	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3301      	adds	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d3b7      	bcc.n	8004dd0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e72:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d110      	bne.n	8004e9c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <USB_DevInit+0x2e8>)
 8004e84:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e94:	4619      	mov	r1, r3
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <USB_DevInit+0x2ec>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ea8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f043 0210 	orr.w	r2, r3, #16
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <USB_DevInit+0x2f0>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f043 0208 	orr.w	r2, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <USB_DevInit+0x2f4>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ef8:	b004      	add	sp, #16
 8004efa:	4770      	bx	lr
 8004efc:	00800100 	.word	0x00800100
 8004f00:	00010003 	.word	0x00010003
 8004f04:	803c3800 	.word	0x803c3800
 8004f08:	40000004 	.word	0x40000004

08004f0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	019b      	lsls	r3, r3, #6
 8004f1e:	f043 0220 	orr.w	r2, r3, #32
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <USB_FlushTxFifo+0x48>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e006      	b.n	8004f46 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d0f0      	beq.n	8004f26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	00030d40 	.word	0x00030d40

08004f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2210      	movs	r2, #16
 8004f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <USB_FlushRxFifo+0x40>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e006      	b.n	8004f8a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d0f0      	beq.n	8004f6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	00030d40 	.word	0x00030d40

08004f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0306 	and.w	r3, r3, #6
 8004fe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
 8004ff2:	e00a      	b.n	800500a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d002      	beq.n	8005000 <USB_GetDevSpeed+0x32>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b06      	cmp	r3, #6
 8004ffe:	d102      	bne.n	8005006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8005000:	2303      	movs	r3, #3
 8005002:	75fb      	strb	r3, [r7, #23]
 8005004:	e001      	b.n	800500a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800500a:	7dfb      	ldrb	r3, [r7, #23]
}
 800500c:	4618      	mov	r0, r3
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d139      	bne.n	80050a8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	68f9      	ldr	r1, [r7, #12]
 800504e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005052:	4313      	orrs	r3, r2
 8005054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d153      	bne.n	8005114 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005090:	431a      	orrs	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	0159      	lsls	r1, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	440b      	add	r3, r1
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	4619      	mov	r1, r3
 80050a0:	4b20      	ldr	r3, [pc, #128]	; (8005124 <USB_ActivateEndpoint+0x10c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]
 80050a6:	e035      	b.n	8005114 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2101      	movs	r1, #1
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	68f9      	ldr	r1, [r7, #12]
 80050c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d119      	bne.n	8005114 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050fc:	430b      	orrs	r3, r1
 80050fe:	431a      	orrs	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	0159      	lsls	r1, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	440b      	add	r3, r1
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	4619      	mov	r1, r3
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <USB_ActivateEndpoint+0x10c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	10008000 	.word	0x10008000

08005128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d135      	bne.n	80051b0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	b29b      	uxth	r3, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005164:	4013      	ands	r3, r2
 8005166:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	2101      	movs	r1, #1
 800517a:	fa01 f303 	lsl.w	r3, r1, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005188:	4013      	ands	r3, r2
 800518a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	0159      	lsls	r1, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	440b      	add	r3, r1
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	4619      	mov	r1, r3
 80051a8:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <USB_DeactivateEndpoint+0x100>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]
 80051ae:	e034      	b.n	800521a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	43db      	mvns	r3, r3
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d0:	4013      	ands	r3, r2
 80051d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	2101      	movs	r1, #1
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	43db      	mvns	r3, r3
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051f4:	4013      	ands	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	0159      	lsls	r1, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	440b      	add	r3, r1
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	4619      	mov	r1, r3
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <USB_DeactivateEndpoint+0x104>)
 8005216:	4013      	ands	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	ec337800 	.word	0xec337800
 800522c:	eff37800 	.word	0xeff37800

08005230 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	; 0x28
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	2b01      	cmp	r3, #1
 800524e:	f040 812d 	bne.w	80054ac <USB_EPStartXfer+0x27c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d132      	bne.n	80052c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	0159      	lsls	r1, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	440b      	add	r3, r1
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	4619      	mov	r1, r3
 8005276:	4b8a      	ldr	r3, [pc, #552]	; (80054a0 <USB_EPStartXfer+0x270>)
 8005278:	4013      	ands	r3, r2
 800527a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800529a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	0159      	lsls	r1, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	4619      	mov	r1, r3
 80052b8:	4b7a      	ldr	r3, [pc, #488]	; (80054a4 <USB_EPStartXfer+0x274>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
 80052be:	e074      	b.n	80053aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	0159      	lsls	r1, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	440b      	add	r3, r1
 80052d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052da:	4619      	mov	r1, r3
 80052dc:	4b71      	ldr	r3, [pc, #452]	; (80054a4 <USB_EPStartXfer+0x274>)
 80052de:	4013      	ands	r3, r2
 80052e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	0159      	lsls	r1, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	440b      	add	r3, r1
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	4619      	mov	r1, r3
 80052fe:	4b68      	ldr	r3, [pc, #416]	; (80054a0 <USB_EPStartXfer+0x270>)
 8005300:	4013      	ands	r3, r2
 8005302:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6959      	ldr	r1, [r3, #20]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	440b      	add	r3, r1
 800531c:	1e59      	subs	r1, r3, #1
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	fbb1 f3f3 	udiv	r3, r1, r3
 8005326:	04d9      	lsls	r1, r3, #19
 8005328:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <USB_EPStartXfer+0x278>)
 800532a:	400b      	ands	r3, r1
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	0148      	lsls	r0, r1, #5
 8005330:	69f9      	ldr	r1, [r7, #28]
 8005332:	4401      	add	r1, r0
 8005334:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005338:	4313      	orrs	r3, r2
 800533a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005352:	69b9      	ldr	r1, [r7, #24]
 8005354:	0148      	lsls	r0, r1, #5
 8005356:	69f9      	ldr	r1, [r7, #28]
 8005358:	4401      	add	r1, r0
 800535a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d11f      	bne.n	80053aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005384:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005388:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10e      	bne.n	80053ce <USB_EPStartXfer+0x19e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d022      	beq.n	80053fe <USB_EPStartXfer+0x1ce>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	461a      	mov	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	6153      	str	r3, [r2, #20]
 80053cc:	e017      	b.n	80053fe <USB_EPStartXfer+0x1ce>
      }
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	78db      	ldrb	r3, [r3, #3]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d013      	beq.n	80053fe <USB_EPStartXfer+0x1ce>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00f      	beq.n	80053fe <USB_EPStartXfer+0x1ce>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	69f9      	ldr	r1, [r7, #28]
 80053f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fa:	4313      	orrs	r3, r2
 80053fc:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d128      	bne.n	8005458 <USB_EPStartXfer+0x228>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d110      	bne.n	8005438 <USB_EPStartXfer+0x208>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e00f      	b.n	8005458 <USB_EPStartXfer+0x228>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005456:	6013      	str	r3, [r2, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005476:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	78db      	ldrb	r3, [r3, #3]
 800547c:	2b01      	cmp	r3, #1
 800547e:	f040 80e1 	bne.w	8005644 <USB_EPStartXfer+0x414>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	68d9      	ldr	r1, [r3, #12]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781a      	ldrb	r2, [r3, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	b298      	uxth	r0, r3
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	4603      	mov	r3, r0
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fa28 	bl	80058ec <USB_WritePacket>
 800549c:	e0d2      	b.n	8005644 <USB_EPStartXfer+0x414>
 800549e:	bf00      	nop
 80054a0:	e007ffff 	.word	0xe007ffff
 80054a4:	fff80000 	.word	0xfff80000
 80054a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	0159      	lsls	r1, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	440b      	add	r3, r1
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	4619      	mov	r1, r3
 80054c8:	4b61      	ldr	r3, [pc, #388]	; (8005650 <USB_EPStartXfer+0x420>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	0159      	lsls	r1, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	440b      	add	r3, r1
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	4619      	mov	r1, r3
 80054ea:	4b5a      	ldr	r3, [pc, #360]	; (8005654 <USB_EPStartXfer+0x424>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d123      	bne.n	8005540 <USB_EPStartXfer+0x310>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550e:	69b9      	ldr	r1, [r7, #24]
 8005510:	0148      	lsls	r0, r1, #5
 8005512:	69f9      	ldr	r1, [r7, #28]
 8005514:	4401      	add	r1, r0
 8005516:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800553c:	6113      	str	r3, [r2, #16]
 800553e:	e033      	b.n	80055a8 <USB_EPStartXfer+0x378>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4413      	add	r3, r2
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	8afb      	ldrh	r3, [r7, #22]
 8005566:	04d9      	lsls	r1, r3, #19
 8005568:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <USB_EPStartXfer+0x428>)
 800556a:	400b      	ands	r3, r1
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	0148      	lsls	r0, r1, #5
 8005570:	69f9      	ldr	r1, [r7, #28]
 8005572:	4401      	add	r1, r0
 8005574:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005578:	4313      	orrs	r3, r2
 800557a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	8af9      	ldrh	r1, [r7, #22]
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	0148      	lsls	r0, r1, #5
 800559c:	69f9      	ldr	r1, [r7, #28]
 800559e:	4401      	add	r1, r0
 80055a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055a4:	4313      	orrs	r3, r2
 80055a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d10d      	bne.n	80055ca <USB_EPStartXfer+0x39a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <USB_EPStartXfer+0x39a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	68d9      	ldr	r1, [r3, #12]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	460a      	mov	r2, r1
 80055c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	78db      	ldrb	r3, [r3, #3]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d128      	bne.n	8005624 <USB_EPStartXfer+0x3f4>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d110      	bne.n	8005604 <USB_EPStartXfer+0x3d4>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e00f      	b.n	8005624 <USB_EPStartXfer+0x3f4>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	440a      	add	r2, r1
 800561a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	fff80000 	.word	0xfff80000
 8005654:	e007ffff 	.word	0xe007ffff
 8005658:	1ff80000 	.word	0x1ff80000

0800565c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 80bd 	bne.w	80057f8 <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d132      	bne.n	80056ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	0159      	lsls	r1, r3, #5
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	440b      	add	r3, r1
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	4619      	mov	r1, r3
 80056a2:	4b90      	ldr	r3, [pc, #576]	; (80058e4 <USB_EP0StartXfer+0x288>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	0159      	lsls	r1, r3, #5
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	440b      	add	r3, r1
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	4619      	mov	r1, r3
 80056e4:	4b80      	ldr	r3, [pc, #512]	; (80058e8 <USB_EP0StartXfer+0x28c>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
 80056ea:	e04e      	b.n	800578a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	0159      	lsls	r1, r3, #5
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	440b      	add	r3, r1
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	4619      	mov	r1, r3
 8005708:	4b77      	ldr	r3, [pc, #476]	; (80058e8 <USB_EP0StartXfer+0x28c>)
 800570a:	4013      	ands	r3, r2
 800570c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	0159      	lsls	r1, r3, #5
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	440b      	add	r3, r1
 8005724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005728:	4619      	mov	r1, r3
 800572a:	4b6e      	ldr	r3, [pc, #440]	; (80058e4 <USB_EP0StartXfer+0x288>)
 800572c:	4013      	ands	r3, r2
 800572e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d903      	bls.n	8005744 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577a:	6939      	ldr	r1, [r7, #16]
 800577c:	0148      	lsls	r0, r1, #5
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	4401      	add	r1, r0
 8005782:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005786:	4313      	orrs	r3, r2
 8005788:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10e      	bne.n	80057ae <USB_EP0StartXfer+0x152>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01e      	beq.n	80057d6 <USB_EP0StartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	6153      	str	r3, [r2, #20]
 80057ac:	e013      	b.n	80057d6 <USB_EP0StartXfer+0x17a>
      }
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00f      	beq.n	80057d6 <USB_EP0StartXfer+0x17a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	6979      	ldr	r1, [r7, #20]
 80057ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d2:	4313      	orrs	r3, r2
 80057d4:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e06d      	b.n	80058d4 <USB_EP0StartXfer+0x278>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	0159      	lsls	r1, r3, #5
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	440b      	add	r3, r1
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	4619      	mov	r1, r3
 8005814:	4b34      	ldr	r3, [pc, #208]	; (80058e8 <USB_EP0StartXfer+0x28c>)
 8005816:	4013      	ands	r3, r2
 8005818:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	0159      	lsls	r1, r3, #5
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	440b      	add	r3, r1
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	4619      	mov	r1, r3
 8005836:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <USB_EP0StartXfer+0x288>)
 8005838:	4013      	ands	r3, r2
 800583a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <USB_EP0StartXfer+0x1f0>
    {
      ep->xfer_len = ep->maxpacket;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005882:	6939      	ldr	r1, [r7, #16]
 8005884:	0148      	lsls	r0, r1, #5
 8005886:	6979      	ldr	r1, [r7, #20]
 8005888:	4401      	add	r1, r0
 800588a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d10d      	bne.n	80058b4 <USB_EP0StartXfer+0x258>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <USB_EP0StartXfer+0x258>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	68d9      	ldr	r1, [r3, #12]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b0:	460a      	mov	r2, r1
 80058b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	e007ffff 	.word	0xe007ffff
 80058e8:	fff80000 	.word	0xfff80000

080058ec <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b089      	sub	sp, #36	; 0x24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	460b      	mov	r3, r1
 80058fc:	71fb      	strb	r3, [r7, #7]
 80058fe:	4613      	mov	r3, r2
 8005900:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800590a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11a      	bne.n	8005948 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005912:	88bb      	ldrh	r3, [r7, #4]
 8005914:	3303      	adds	r3, #3
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800591a:	2300      	movs	r3, #0
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e00f      	b.n	8005940 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	031a      	lsls	r2, r3, #12
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4413      	add	r3, r2
 8005928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592c:	461a      	mov	r2, r3
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3304      	adds	r3, #4
 8005938:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	3301      	adds	r3, #1
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	429a      	cmp	r2, r3
 8005946:	d3eb      	bcc.n	8005920 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3724      	adds	r7, #36	; 0x24
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005956:	b480      	push	{r7}
 8005958:	b089      	sub	sp, #36	; 0x24
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	4613      	mov	r3, r2
 8005962:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	3303      	adds	r3, #3
 8005970:	089b      	lsrs	r3, r3, #2
 8005972:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e00b      	b.n	8005992 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	601a      	str	r2, [r3, #0]
    pDest++;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3304      	adds	r3, #4
 800598a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	3301      	adds	r3, #1
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d3ef      	bcc.n	800597a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800599a:	69fb      	ldr	r3, [r7, #28]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3724      	adds	r7, #36	; 0x24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d12c      	bne.n	8005a1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	db12      	blt.n	80059fc <USB_EPSetStall+0x54>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	e02b      	b.n	8005a76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	db12      	blt.n	8005a56 <USB_EPSetStall+0xae>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00f      	beq.n	8005a56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d128      	bne.n	8005af2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005abe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d003      	beq.n	8005ad0 <USB_EPClearStall+0x4c>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	78db      	ldrb	r3, [r3, #3]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d138      	bne.n	8005b42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	e027      	b.n	8005b42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d003      	beq.n	8005b22 <USB_EPClearStall+0x9e>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	78db      	ldrb	r3, [r3, #3]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d10f      	bne.n	8005b42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb6:	f023 0302 	bic.w	r3, r3, #2
 8005bba:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005bbc:	2003      	movs	r0, #3
 8005bbe:	f7fa fd01 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be6:	f043 0302 	orr.w	r3, r3, #2
 8005bea:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005bec:	2003      	movs	r0, #3
 8005bee:	f7fa fce9 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	0c1b      	lsrs	r3, r3, #16
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	b29b      	uxth	r3, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b087      	sub	sp, #28
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf6:	01db      	lsls	r3, r3, #7
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4013      	ands	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d14:	68bb      	ldr	r3, [r7, #8]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <USB_ActivateSetup+0x68>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0306 	and.w	r3, r3, #6
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d109      	bne.n	8005d86 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f043 0303 	orr.w	r3, r3, #3
 8005d84:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	fffff800 	.word	0xfffff800

08005dac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	460b      	mov	r3, r1
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	333c      	adds	r3, #60	; 0x3c
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4a26      	ldr	r2, [pc, #152]	; (8005e64 <USB_EP0_OutStart+0xb8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d90a      	bls.n	8005de6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de0:	d101      	bne.n	8005de6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e037      	b.n	8005e56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	461a      	mov	r2, r3
 8005dee:	2300      	movs	r3, #0
 8005df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e14:	f043 0318 	orr.w	r3, r3, #24
 8005e18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e2e:	7afb      	ldrb	r3, [r7, #11]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10f      	bne.n	8005e54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	4f54300a 	.word	0x4f54300a

08005e68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <USB_CoreReset+0x64>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e01b      	b.n	8005ebe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	daf2      	bge.n	8005e74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <USB_CoreReset+0x64>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d901      	bls.n	8005eb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e006      	b.n	8005ebe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d0f0      	beq.n	8005e9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	00030d40 	.word	0x00030d40

08005ed0 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8005edc:	23c0      	movs	r3, #192	; 0xc0
 8005ede:	2201      	movs	r2, #1
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f002 f9b9 	bl	800825a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 8005ef0:	f643 4050 	movw	r0, #15440	; 0x3c50
 8005ef4:	f002 fcba 	bl	800886c <malloc>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <USBD_AUDIO_Init+0x40>
  {
    return USBD_FAIL;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e034      	b.n	8005f7a <USBD_AUDIO_Init+0xaa>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f16:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f643 4304 	movw	r3, #15364	; 0x3c04
 8005f24:	4413      	add	r3, r2
 8005f26:	2203      	movs	r2, #3
 8005f28:	701a      	strb	r2, [r3, #0]
    haudio->wr_ptr = 0U;
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	f643 4308 	movw	r3, #15368	; 0x3c08
 8005f30:	4413      	add	r3, r2
 8005f32:	2200      	movs	r2, #0
 8005f34:	801a      	strh	r2, [r3, #0]
    haudio->rd_ptr = 0U;
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f643 4306 	movw	r3, #15366	; 0x3c06
 8005f3c:	4413      	add	r3, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	801a      	strh	r2, [r3, #0]
    haudio->rd_enable = 0U;
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	f643 4305 	movw	r3, #15365	; 0x3c05
 8005f48:	4413      	add	r3, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2146      	movs	r1, #70	; 0x46
 8005f5a:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8005f5e:	4798      	blx	r3
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <USBD_AUDIO_Init+0x9a>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 8005f66:	2302      	movs	r3, #2
 8005f68:	e007      	b.n	8005f7a <USBD_AUDIO_Init+0xaa>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1d1a      	adds	r2, r3, #4
 8005f6e:	23c0      	movs	r3, #192	; 0xc0
 8005f70:	2101      	movs	r1, #1
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 fa62 	bl	800843c <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }
  return USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]

  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8005f8e:	2101      	movs	r1, #1
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f002 f988 	bl	80082a6 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <USBD_AUDIO_DeInit+0x46>
  {
   ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f002 fc5e 	bl	800887c <free>
    pdev->pClassData = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return USBD_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fec:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01a      	beq.n	8006030 <USBD_AUDIO_Setup+0x5c>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	f040 809c 	bne.w	8006138 <USBD_AUDIO_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d006      	beq.n	8006016 <USBD_AUDIO_Setup+0x42>
 8006008:	2b81      	cmp	r3, #129	; 0x81
 800600a:	d109      	bne.n	8006020 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f986 	bl	8006320 <AUDIO_REQ_GetCurrent>
      break;
 8006014:	e00b      	b.n	800602e <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f9a1 	bl	8006360 <AUDIO_REQ_SetCurrent>
      break;
 800601e:	e006      	b.n	800602e <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError (pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 f97d 	bl	8007322 <USBD_CtlError>
      ret = USBD_FAIL;
 8006028:	2302      	movs	r3, #2
 800602a:	75fb      	strb	r3, [r7, #23]
      break;
 800602c:	bf00      	nop
    }
    break;
 800602e:	e08a      	b.n	8006146 <USBD_AUDIO_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b0b      	cmp	r3, #11
 8006036:	d876      	bhi.n	8006126 <USBD_AUDIO_Setup+0x152>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <USBD_AUDIO_Setup+0x6c>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	08006071 	.word	0x08006071
 8006044:	08006127 	.word	0x08006127
 8006048:	08006127 	.word	0x08006127
 800604c:	08006127 	.word	0x08006127
 8006050:	08006127 	.word	0x08006127
 8006054:	08006127 	.word	0x08006127
 8006058:	08006099 	.word	0x08006099
 800605c:	08006127 	.word	0x08006127
 8006060:	08006127 	.word	0x08006127
 8006064:	08006127 	.word	0x08006127
 8006068:	080060c3 	.word	0x080060c3
 800606c:	080060e9 	.word	0x080060e9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006076:	2b03      	cmp	r3, #3
 8006078:	d107      	bne.n	800608a <USBD_AUDIO_Setup+0xb6>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800607a:	f107 0308 	add.w	r3, r7, #8
 800607e:	2202      	movs	r2, #2
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 f9b8 	bl	80073f8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
                         ret = USBD_FAIL;
      }
      break;
 8006088:	e055      	b.n	8006136 <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 f948 	bl	8007322 <USBD_CtlError>
                         ret = USBD_FAIL;
 8006092:	2302      	movs	r3, #2
 8006094:	75fb      	strb	r3, [r7, #23]
      break;
 8006096:	e04e      	b.n	8006136 <USBD_AUDIO_Setup+0x162>

    case USB_REQ_GET_DESCRIPTOR:
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	885b      	ldrh	r3, [r3, #2]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b21      	cmp	r3, #33	; 0x21
 80060a2:	d147      	bne.n	8006134 <USBD_AUDIO_Setup+0x160>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 80060a4:	4b2a      	ldr	r3, [pc, #168]	; (8006150 <USBD_AUDIO_Setup+0x17c>)
 80060a6:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	2b09      	cmp	r3, #9
 80060ae:	bf28      	it	cs
 80060b0:	2309      	movcs	r3, #9
 80060b2:	817b      	strh	r3, [r7, #10]

        USBD_CtlSendData (pdev, pbuf, len);
 80060b4:	897b      	ldrh	r3, [r7, #10]
 80060b6:	461a      	mov	r2, r3
 80060b8:	68f9      	ldr	r1, [r7, #12]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 f99c 	bl	80073f8 <USBD_CtlSendData>
      }
      break;
 80060c0:	e038      	b.n	8006134 <USBD_AUDIO_Setup+0x160>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d106      	bne.n	80060da <USBD_AUDIO_Setup+0x106>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2201      	movs	r2, #1
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 f990 	bl	80073f8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80060d8:	e02d      	b.n	8006136 <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 f920 	bl	8007322 <USBD_CtlError>
        ret = USBD_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	75fb      	strb	r3, [r7, #23]
      break;
 80060e6:	e026      	b.n	8006136 <USBD_AUDIO_Setup+0x162>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d112      	bne.n	8006118 <USBD_AUDIO_Setup+0x144>
      {
         if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	885b      	ldrh	r3, [r3, #2]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d806      	bhi.n	800610a <USBD_AUDIO_Setup+0x136>
         {
           haudio->alt_setting = (uint8_t)(req->wValue);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	885b      	ldrh	r3, [r3, #2]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006108:	e015      	b.n	8006136 <USBD_AUDIO_Setup+0x162>
           USBD_CtlError (pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 f908 	bl	8007322 <USBD_CtlError>
           ret = USBD_FAIL;
 8006112:	2302      	movs	r3, #2
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	e00e      	b.n	8006136 <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 f901 	bl	8007322 <USBD_CtlError>
        ret = USBD_FAIL;
 8006120:	2302      	movs	r3, #2
 8006122:	75fb      	strb	r3, [r7, #23]
      break;
 8006124:	e007      	b.n	8006136 <USBD_AUDIO_Setup+0x162>

    default:
      USBD_CtlError (pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f8fa 	bl	8007322 <USBD_CtlError>
      ret = USBD_FAIL;
 800612e:	2302      	movs	r3, #2
 8006130:	75fb      	strb	r3, [r7, #23]
      break;
 8006132:	e000      	b.n	8006136 <USBD_AUDIO_Setup+0x162>
      break;
 8006134:	bf00      	nop
    }
    break;
 8006136:	e006      	b.n	8006146 <USBD_AUDIO_Setup+0x172>
  default:
    USBD_CtlError (pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 f8f1 	bl	8007322 <USBD_CtlError>
    ret = USBD_FAIL;
 8006140:	2302      	movs	r3, #2
 8006142:	75fb      	strb	r3, [r7, #23]
    break;
 8006144:	bf00      	nop
  }

  return ret;
 8006146:	7dfb      	ldrb	r3, [r7, #23]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000052 	.word	0x20000052

08006154 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	226d      	movs	r2, #109	; 0x6d
 8006160:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 8006162:	4b03      	ldr	r3, [pc, #12]	; (8006170 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20000040 	.word	0x20000040

08006174 <USBD_AUDIO_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	70fb      	strb	r3, [r7, #3]

  /* Only OUT data are processed */
  return USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800619c:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	f643 430a 	movw	r3, #15370	; 0x3c0a
 80061a4:	4413      	add	r3, r2
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d11d      	bne.n	80061e8 <USBD_AUDIO_EP0_RxReady+0x5a>
  {/* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f643 434c 	movw	r3, #15436	; 0x3c4c
 80061b2:	4413      	add	r3, r2
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d116      	bne.n	80061e8 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
     ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	68f9      	ldr	r1, [r7, #12]
 80061c4:	f643 430b 	movw	r3, #15371	; 0x3c0b
 80061c8:	440b      	add	r3, r1
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	4790      	blx	r2
      haudio->control.cmd = 0U;
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	f643 430a 	movw	r3, #15370	; 0x3c0a
 80061d6:	4413      	add	r3, r2
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	f643 434b 	movw	r3, #15435	; 0x3c4b
 80061e2:	4413      	add	r3, r2
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
    }
  }

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <USBD_AUDIO_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006264:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d154      	bne.n	8006316 <USBD_AUDIO_DataOut+0xc4>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	f643 4308 	movw	r3, #15368	; 0x3c08
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	33c0      	adds	r3, #192	; 0xc0
 8006278:	b299      	uxth	r1, r3
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	f643 4308 	movw	r3, #15368	; 0x3c08
 8006280:	4413      	add	r3, r2
 8006282:	460a      	mov	r2, r1
 8006284:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f643 4308 	movw	r3, #15368	; 0x3c08
 800628c:	4413      	add	r3, r2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8006294:	d11c      	bne.n	80062d0 <USBD_AUDIO_DataOut+0x7e>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f643 4308 	movw	r3, #15368	; 0x3c08
 800629c:	4413      	add	r3, r2
 800629e:	2200      	movs	r2, #0
 80062a0:	801a      	strh	r2, [r3, #0]

      if(haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f643 4304 	movw	r3, #15364	; 0x3c04
 80062a8:	4413      	add	r3, r2
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d10f      	bne.n	80062d0 <USBD_AUDIO_DataOut+0x7e>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	1d10      	adds	r0, r2, #4
 80062bc:	2201      	movs	r2, #1
 80062be:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80062c2:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
          haudio->offset = AUDIO_OFFSET_NONE;
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	f643 4304 	movw	r3, #15364	; 0x3c04
 80062ca:	4413      	add	r3, r2
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]
      }
    }

    if(haudio->rd_enable == 0U)
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	f643 4305 	movw	r3, #15365	; 0x3c05
 80062d6:	4413      	add	r3, r2
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <USBD_AUDIO_DataOut+0xa8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	f643 4308 	movw	r3, #15368	; 0x3c08
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80062ec:	d105      	bne.n	80062fa <USBD_AUDIO_DataOut+0xa8>
      {
        haudio->rd_enable = 1U;
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	f643 4305 	movw	r3, #15365	; 0x3c05
 80062f4:	4413      	add	r3, r2
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	f643 4308 	movw	r3, #15368	; 0x3c08
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	1d1a      	adds	r2, r3, #4
 800630c:	23c0      	movs	r3, #192	; 0xc0
 800630e:	2101      	movs	r1, #1
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f002 f893 	bl	800843c <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006330:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8006338:	4413      	add	r3, r2
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f002 faa4 	bl	800888c <memset>

  /* Send the current mute state */
  USBD_CtlSendData (pdev, haudio->control.data, req->wLength);
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	f643 430b 	movw	r3, #15371	; 0x3c0b
 800634a:	4413      	add	r3, r2
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	88d2      	ldrh	r2, [r2, #6]
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 f850 	bl	80073f8 <USBD_CtlSendData>
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006370:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	88db      	ldrh	r3, [r3, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d023      	beq.n	80063c2 <AUDIO_REQ_SetCurrent+0x62>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       haudio->control.data,
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8006380:	4413      	add	r3, r2
    USBD_CtlPrepareRx (pdev,
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	88d2      	ldrh	r2, [r2, #6]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 f863 	bl	8007454 <USBD_CtlPrepareRx>
                       req->wLength);

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	f643 430a 	movw	r3, #15370	; 0x3c0a
 8006394:	4413      	add	r3, r2
 8006396:	2201      	movs	r2, #1
 8006398:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	88db      	ldrh	r3, [r3, #6]
 800639e:	b2d9      	uxtb	r1, r3
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f643 434b 	movw	r3, #15435	; 0x3c4b
 80063a6:	4413      	add	r3, r2
 80063a8:	460a      	mov	r2, r1
 80063aa:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	889b      	ldrh	r3, [r3, #4]
 80063b0:	0a1b      	lsrs	r3, r3, #8
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	b2d9      	uxtb	r1, r3
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	f643 434c 	movw	r3, #15436	; 0x3c4c
 80063bc:	4413      	add	r3, r2
 80063be:	460a      	mov	r2, r1
 80063c0:	701a      	strb	r2, [r3, #0]
  }
}
 80063c2:	bf00      	nop
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	220a      	movs	r2, #10
 80063d8:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 80063da:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	200000b0 	.word	0x200000b0

080063ec <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	4613      	mov	r3, r2
 800641e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006426:	2302      	movs	r3, #2
 8006428:	e01a      	b.n	8006460 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	79fa      	ldrb	r2, [r7, #7]
 8006456:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f001 fe97 	bl	800818c <USBD_LL_Init>

  return USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	e001      	b.n	800648e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800648a:	2302      	movs	r3, #2
 800648c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 febd 	bl	8008224 <USBD_LL_Start>

  return USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80064d6:	2302      	movs	r3, #2
 80064d8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	4611      	mov	r1, r2
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	4611      	mov	r1, r2
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
  return USBD_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 feb1 	bl	80072a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006554:	461a      	mov	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2b01      	cmp	r3, #1
 8006568:	d00c      	beq.n	8006584 <USBD_LL_SetupStage+0x56>
 800656a:	2b01      	cmp	r3, #1
 800656c:	d302      	bcc.n	8006574 <USBD_LL_SetupStage+0x46>
 800656e:	2b02      	cmp	r3, #2
 8006570:	d010      	beq.n	8006594 <USBD_LL_SetupStage+0x66>
 8006572:	e017      	b.n	80065a4 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa05 	bl	800698c <USBD_StdDevReq>
    break;
 8006582:	e01a      	b.n	80065ba <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa67 	bl	8006a60 <USBD_StdItfReq>
    break;
 8006592:	e012      	b.n	80065ba <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 faa5 	bl	8006aec <USBD_StdEPReq>
    break;
 80065a2:	e00a      	b.n	80065ba <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80065aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fe96 	bl	80082e4 <USBD_LL_StallEP>
    break;
 80065b8:	bf00      	nop
  }

  return USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	460b      	mov	r3, r1
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d14b      	bne.n	8006670 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80065de:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d134      	bne.n	8006654 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d919      	bls.n	800662a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800660c:	429a      	cmp	r2, r3
 800660e:	d203      	bcs.n	8006618 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006614:	b29b      	uxth	r3, r3
 8006616:	e002      	b.n	800661e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800661c:	b29b      	uxth	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 ff34 	bl	8007490 <USBD_CtlContinueRx>
 8006628:	e038      	b.n	800669c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800663c:	2b03      	cmp	r3, #3
 800663e:	d105      	bne.n	800664c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 ff31 	bl	80074b4 <USBD_CtlSendStatus>
 8006652:	e023      	b.n	800669c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800665a:	2b05      	cmp	r3, #5
 800665c:	d11e      	bne.n	800669c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006666:	2100      	movs	r1, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f001 fe3b 	bl	80082e4 <USBD_LL_StallEP>
 800666e:	e015      	b.n	800669c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006682:	2b03      	cmp	r3, #3
 8006684:	d108      	bne.n	8006698 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	7afa      	ldrb	r2, [r7, #11]
 8006690:	4611      	mov	r1, r2
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	4798      	blx	r3
 8006696:	e001      	b.n	800669c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006698:	2302      	movs	r3, #2
 800669a:	e000      	b.n	800669e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	460b      	mov	r3, r1
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d17f      	bne.n	80067ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3314      	adds	r3, #20
 80066be:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d15c      	bne.n	8006784 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d915      	bls.n	8006702 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fe9e 	bl	8007430 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80066f4:	2300      	movs	r3, #0
 80066f6:	2200      	movs	r2, #0
 80066f8:	2100      	movs	r1, #0
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f001 fe9e 	bl	800843c <USBD_LL_PrepareReceive>
 8006700:	e04e      	b.n	80067a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	6912      	ldr	r2, [r2, #16]
 800670a:	fbb3 f1f2 	udiv	r1, r3, r2
 800670e:	fb02 f201 	mul.w	r2, r2, r1
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11c      	bne.n	8006752 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006720:	429a      	cmp	r2, r3
 8006722:	d316      	bcc.n	8006752 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800672e:	429a      	cmp	r2, r3
 8006730:	d20f      	bcs.n	8006752 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006732:	2200      	movs	r2, #0
 8006734:	2100      	movs	r1, #0
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fe7a 	bl	8007430 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006744:	2300      	movs	r3, #0
 8006746:	2200      	movs	r2, #0
 8006748:	2100      	movs	r1, #0
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f001 fe76 	bl	800843c <USBD_LL_PrepareReceive>
 8006750:	e026      	b.n	80067a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006764:	2b03      	cmp	r3, #3
 8006766:	d105      	bne.n	8006774 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006774:	2180      	movs	r1, #128	; 0x80
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f001 fdb4 	bl	80082e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 feac 	bl	80074da <USBD_CtlReceiveStatus>
 8006782:	e00d      	b.n	80067a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800678a:	2b04      	cmp	r3, #4
 800678c:	d004      	beq.n	8006798 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f001 fda2 	bl	80082e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d11d      	bne.n	80067e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff fe82 	bl	80064b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80067b8:	e015      	b.n	80067e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00d      	beq.n	80067e2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d108      	bne.n	80067e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	7afa      	ldrb	r2, [r7, #11]
 80067da:	4611      	mov	r1, r2
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	4798      	blx	r3
 80067e0:	e001      	b.n	80067e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067e2:	2302      	movs	r3, #2
 80067e4:	e000      	b.n	80067e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067f8:	2340      	movs	r3, #64	; 0x40
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fd2b 	bl	800825a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2240      	movs	r2, #64	; 0x40
 8006810:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	2200      	movs	r2, #0
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fd1d 	bl	800825a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2240      	movs	r2, #64	; 0x40
 800682a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6852      	ldr	r2, [r2, #4]
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	4611      	mov	r1, r2
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
  }

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2204      	movs	r2, #4
 80068aa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d10b      	bne.n	8006908 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6852      	ldr	r2, [r2, #4]
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	4611      	mov	r1, r2
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3

  return USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d004      	beq.n	80069b0 <USBD_StdDevReq+0x24>
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d002      	beq.n	80069b0 <USBD_StdDevReq+0x24>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <USBD_StdDevReq+0x34>
 80069ae:	e04c      	b.n	8006a4a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
    break;
 80069be:	e049      	b.n	8006a54 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	d83a      	bhi.n	8006a3e <USBD_StdDevReq+0xb2>
 80069c8:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <USBD_StdDevReq+0x44>)
 80069ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ce:	bf00      	nop
 80069d0:	08006a21 	.word	0x08006a21
 80069d4:	08006a35 	.word	0x08006a35
 80069d8:	08006a3f 	.word	0x08006a3f
 80069dc:	08006a2b 	.word	0x08006a2b
 80069e0:	08006a3f 	.word	0x08006a3f
 80069e4:	08006a03 	.word	0x08006a03
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	08006a3f 	.word	0x08006a3f
 80069f0:	08006a17 	.word	0x08006a17
 80069f4:	08006a0d 	.word	0x08006a0d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9d2 	bl	8006da4 <USBD_GetDescriptor>
      break;
 8006a00:	e022      	b.n	8006a48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fae3 	bl	8006fd0 <USBD_SetAddress>
      break;
 8006a0a:	e01d      	b.n	8006a48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fb20 	bl	8007054 <USBD_SetConfig>
      break;
 8006a14:	e018      	b.n	8006a48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fba9 	bl	8007170 <USBD_GetConfig>
      break;
 8006a1e:	e013      	b.n	8006a48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fbd8 	bl	80071d8 <USBD_GetStatus>
      break;
 8006a28:	e00e      	b.n	8006a48 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc06 	bl	800723e <USBD_SetFeature>
      break;
 8006a32:	e009      	b.n	8006a48 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fc15 	bl	8007266 <USBD_ClrFeature>
      break;
 8006a3c:	e004      	b.n	8006a48 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fc6e 	bl	8007322 <USBD_CtlError>
      break;
 8006a46:	bf00      	nop
    }
    break;
 8006a48:	e004      	b.n	8006a54 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc68 	bl	8007322 <USBD_CtlError>
    break;
 8006a52:	bf00      	nop
  }

  return ret;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop

08006a60 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d003      	beq.n	8006a82 <USBD_StdItfReq+0x22>
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	d001      	beq.n	8006a82 <USBD_StdItfReq+0x22>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d12a      	bne.n	8006ad8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d81d      	bhi.n	8006aca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	889b      	ldrh	r3, [r3, #4]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d813      	bhi.n	8006ac0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	88db      	ldrh	r3, [r3, #6]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d110      	bne.n	8006ad4 <USBD_StdItfReq+0x74>
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10d      	bne.n	8006ad4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fcfb 	bl	80074b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006abe:	e009      	b.n	8006ad4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fc2d 	bl	8007322 <USBD_CtlError>
      break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc28 	bl	8007322 <USBD_CtlError>
      break;
 8006ad2:	e000      	b.n	8006ad6 <USBD_StdItfReq+0x76>
      break;
 8006ad4:	bf00      	nop
    }
    break;
 8006ad6:	e004      	b.n	8006ae2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fc21 	bl	8007322 <USBD_CtlError>
    break;
 8006ae0:	bf00      	nop
  }

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	889b      	ldrh	r3, [r3, #4]
 8006afe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d004      	beq.n	8006b16 <USBD_StdEPReq+0x2a>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d002      	beq.n	8006b16 <USBD_StdEPReq+0x2a>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <USBD_StdEPReq+0x3a>
 8006b14:	e13b      	b.n	8006d8e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
    break;
 8006b24:	e138      	b.n	8006d98 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d10a      	bne.n	8006b48 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	e128      	b.n	8006d9a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d03e      	beq.n	8006bce <USBD_StdEPReq+0xe2>
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d002      	beq.n	8006b5a <USBD_StdEPReq+0x6e>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d070      	beq.n	8006c3a <USBD_StdEPReq+0x14e>
 8006b58:	e113      	b.n	8006d82 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d002      	beq.n	8006b6a <USBD_StdEPReq+0x7e>
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d015      	beq.n	8006b94 <USBD_StdEPReq+0xa8>
 8006b68:	e02b      	b.n	8006bc2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <USBD_StdEPReq+0x9e>
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d009      	beq.n	8006b8a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fbb2 	bl	80082e4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fbae 	bl	80082e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b88:	e020      	b.n	8006bcc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fbc8 	bl	8007322 <USBD_CtlError>
        break;
 8006b92:	e01b      	b.n	8006bcc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	885b      	ldrh	r3, [r3, #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10e      	bne.n	8006bba <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <USBD_StdEPReq+0xce>
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d008      	beq.n	8006bba <USBD_StdEPReq+0xce>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fb95 	bl	80082e4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fc7a 	bl	80074b4 <USBD_CtlSendStatus>

        break;
 8006bc0:	e004      	b.n	8006bcc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fbac 	bl	8007322 <USBD_CtlError>
        break;
 8006bca:	bf00      	nop
      }
      break;
 8006bcc:	e0de      	b.n	8006d8c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d002      	beq.n	8006bde <USBD_StdEPReq+0xf2>
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d015      	beq.n	8006c08 <USBD_StdEPReq+0x11c>
 8006bdc:	e026      	b.n	8006c2c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <USBD_StdEPReq+0x112>
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d009      	beq.n	8006bfe <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fb78 	bl	80082e4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fb74 	bl	80082e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bfc:	e01c      	b.n	8006c38 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fb8e 	bl	8007322 <USBD_CtlError>
        break;
 8006c06:	e017      	b.n	8006c38 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	885b      	ldrh	r3, [r3, #2]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d112      	bne.n	8006c36 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 fb7f 	bl	8008322 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fc45 	bl	80074b4 <USBD_CtlSendStatus>
        }
        break;
 8006c2a:	e004      	b.n	8006c36 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fb77 	bl	8007322 <USBD_CtlError>
        break;
 8006c34:	e000      	b.n	8006c38 <USBD_StdEPReq+0x14c>
        break;
 8006c36:	bf00      	nop
      }
      break;
 8006c38:	e0a8      	b.n	8006d8c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d002      	beq.n	8006c4a <USBD_StdEPReq+0x15e>
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d031      	beq.n	8006cac <USBD_StdEPReq+0x1c0>
 8006c48:	e095      	b.n	8006d76 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <USBD_StdEPReq+0x174>
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d004      	beq.n	8006c60 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fb62 	bl	8007322 <USBD_CtlError>
          break;
 8006c5e:	e08f      	b.n	8006d80 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	da0b      	bge.n	8006c80 <USBD_StdEPReq+0x194>
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	3310      	adds	r3, #16
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	e00a      	b.n	8006c96 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fba7 	bl	80073f8 <USBD_CtlSendData>
          break;
 8006caa:	e069      	b.n	8006d80 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	da11      	bge.n	8006cd8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	f003 020f 	and.w	r2, r3, #15
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3318      	adds	r3, #24
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d117      	bne.n	8006cfe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fb26 	bl	8007322 <USBD_CtlError>
            break;
 8006cd6:	e053      	b.n	8006d80 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	f003 020f 	and.w	r2, r3, #15
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb13 	bl	8007322 <USBD_CtlError>
            break;
 8006cfc:	e040      	b.n	8006d80 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da0b      	bge.n	8006d1e <USBD_StdEPReq+0x232>
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	3310      	adds	r3, #16
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4413      	add	r3, r2
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	e00a      	b.n	8006d34 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <USBD_StdEPReq+0x256>
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d103      	bne.n	8006d4a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	e00e      	b.n	8006d68 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fb06 	bl	8008360 <USBD_LL_IsStallEP>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e002      	b.n	8006d68 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fb42 	bl	80073f8 <USBD_CtlSendData>
          break;
 8006d74:	e004      	b.n	8006d80 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fad2 	bl	8007322 <USBD_CtlError>
        break;
 8006d7e:	bf00      	nop
      }
      break;
 8006d80:	e004      	b.n	8006d8c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 facc 	bl	8007322 <USBD_CtlError>
      break;
 8006d8a:	bf00      	nop
    }
    break;
 8006d8c:	e004      	b.n	8006d98 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fac6 	bl	8007322 <USBD_CtlError>
    break;
 8006d96:	bf00      	nop
  }

  return ret;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	2b0e      	cmp	r3, #14
 8006dba:	f200 80e5 	bhi.w	8006f88 <USBD_GetDescriptor+0x1e4>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <USBD_GetDescriptor+0x20>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006e19 	.word	0x08006e19
 8006dc8:	08006e31 	.word	0x08006e31
 8006dcc:	08006e71 	.word	0x08006e71
 8006dd0:	08006f89 	.word	0x08006f89
 8006dd4:	08006f89 	.word	0x08006f89
 8006dd8:	08006f35 	.word	0x08006f35
 8006ddc:	08006f5b 	.word	0x08006f5b
 8006de0:	08006f89 	.word	0x08006f89
 8006de4:	08006f89 	.word	0x08006f89
 8006de8:	08006f89 	.word	0x08006f89
 8006dec:	08006f89 	.word	0x08006f89
 8006df0:	08006f89 	.word	0x08006f89
 8006df4:	08006f89 	.word	0x08006f89
 8006df8:	08006f89 	.word	0x08006f89
 8006dfc:	08006e01 	.word	0x08006e01
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	7c12      	ldrb	r2, [r2, #16]
 8006e0c:	f107 010a 	add.w	r1, r7, #10
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	60f8      	str	r0, [r7, #12]
    break;
 8006e16:	e0bc      	b.n	8006f92 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7c12      	ldrb	r2, [r2, #16]
 8006e24:	f107 010a 	add.w	r1, r7, #10
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
    break;
 8006e2e:	e0b0      	b.n	8006f92 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7c1b      	ldrb	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10d      	bne.n	8006e54 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	f107 020a 	add.w	r2, r7, #10
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	2202      	movs	r2, #2
 8006e50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e52:	e09e      	b.n	8006f92 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	f107 020a 	add.w	r2, r7, #10
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	701a      	strb	r2, [r3, #0]
    break;
 8006e6e:	e090      	b.n	8006f92 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	885b      	ldrh	r3, [r3, #2]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d856      	bhi.n	8006f28 <USBD_GetDescriptor+0x184>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <USBD_GetDescriptor+0xdc>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006ec9 	.word	0x08006ec9
 8006e8c:	08006ee1 	.word	0x08006ee1
 8006e90:	08006ef9 	.word	0x08006ef9
 8006e94:	08006f11 	.word	0x08006f11
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7c12      	ldrb	r2, [r2, #16]
 8006ea4:	f107 010a 	add.w	r1, r7, #10
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4798      	blx	r3
 8006eac:	60f8      	str	r0, [r7, #12]
      break;
 8006eae:	e040      	b.n	8006f32 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 010a 	add.w	r1, r7, #10
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
      break;
 8006ec6:	e034      	b.n	8006f32 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 010a 	add.w	r1, r7, #10
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
      break;
 8006ede:	e028      	b.n	8006f32 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 010a 	add.w	r1, r7, #10
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
      break;
 8006ef6:	e01c      	b.n	8006f32 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 010a 	add.w	r1, r7, #10
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
      break;
 8006f0e:	e010      	b.n	8006f32 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	7c12      	ldrb	r2, [r2, #16]
 8006f1c:	f107 010a 	add.w	r1, r7, #10
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
 8006f24:	60f8      	str	r0, [r7, #12]
      break;
 8006f26:	e004      	b.n	8006f32 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f9f9 	bl	8007322 <USBD_CtlError>
      return;
 8006f30:	e04b      	b.n	8006fca <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8006f32:	e02e      	b.n	8006f92 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7c1b      	ldrb	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f44:	f107 020a 	add.w	r2, r7, #10
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
 8006f4c:	60f8      	str	r0, [r7, #12]
      break;
 8006f4e:	e020      	b.n	8006f92 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9e5 	bl	8007322 <USBD_CtlError>
      return;
 8006f58:	e037      	b.n	8006fca <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	7c1b      	ldrb	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	f107 020a 	add.w	r2, r7, #10
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4798      	blx	r3
 8006f72:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	2207      	movs	r2, #7
 8006f7a:	701a      	strb	r2, [r3, #0]
      break;
 8006f7c:	e009      	b.n	8006f92 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9ce 	bl	8007322 <USBD_CtlError>
      return;
 8006f86:	e020      	b.n	8006fca <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f9c9 	bl	8007322 <USBD_CtlError>
    return;
 8006f90:	e01b      	b.n	8006fca <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006f92:	897b      	ldrh	r3, [r7, #10]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d011      	beq.n	8006fbc <USBD_GetDescriptor+0x218>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	88db      	ldrh	r3, [r3, #6]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00d      	beq.n	8006fbc <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	88da      	ldrh	r2, [r3, #6]
 8006fa4:	897b      	ldrh	r3, [r7, #10]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bf28      	it	cs
 8006faa:	4613      	movcs	r3, r2
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006fb0:	897b      	ldrh	r3, [r7, #10]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa1e 	bl	80073f8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	88db      	ldrh	r3, [r3, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fa75 	bl	80074b4 <USBD_CtlSendStatus>
  }
}
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	889b      	ldrh	r3, [r3, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d130      	bne.n	8007044 <USBD_SetAddress+0x74>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	88db      	ldrh	r3, [r3, #6]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d12c      	bne.n	8007044 <USBD_SetAddress+0x74>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff0:	d828      	bhi.n	8007044 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007004:	2b03      	cmp	r3, #3
 8007006:	d104      	bne.n	8007012 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f989 	bl	8007322 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007010:	e01c      	b.n	800704c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7bfa      	ldrb	r2, [r7, #15]
 8007016:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f9ca 	bl	80083b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fa45 	bl	80074b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007038:	e008      	b.n	800704c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007042:	e003      	b.n	800704c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f96b 	bl	8007322 <USBD_CtlError>
  }
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	4b41      	ldr	r3, [pc, #260]	; (800716c <USBD_SetConfig+0x118>)
 8007066:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007068:	4b40      	ldr	r3, [pc, #256]	; (800716c <USBD_SetConfig+0x118>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d904      	bls.n	800707a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f955 	bl	8007322 <USBD_CtlError>
 8007078:	e075      	b.n	8007166 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007080:	2b02      	cmp	r3, #2
 8007082:	d002      	beq.n	800708a <USBD_SetConfig+0x36>
 8007084:	2b03      	cmp	r3, #3
 8007086:	d023      	beq.n	80070d0 <USBD_SetConfig+0x7c>
 8007088:	e062      	b.n	8007150 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800708a:	4b38      	ldr	r3, [pc, #224]	; (800716c <USBD_SetConfig+0x118>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d01a      	beq.n	80070c8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007092:	4b36      	ldr	r3, [pc, #216]	; (800716c <USBD_SetConfig+0x118>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2203      	movs	r2, #3
 80070a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070a4:	4b31      	ldr	r3, [pc, #196]	; (800716c <USBD_SetConfig+0x118>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff fa0d 	bl	80064ca <USBD_SetClassConfig>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d104      	bne.n	80070c0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f932 	bl	8007322 <USBD_CtlError>
          return;
 80070be:	e052      	b.n	8007166 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f9f7 	bl	80074b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80070c6:	e04e      	b.n	8007166 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f9f3 	bl	80074b4 <USBD_CtlSendStatus>
      break;
 80070ce:	e04a      	b.n	8007166 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070d0:	4b26      	ldr	r3, [pc, #152]	; (800716c <USBD_SetConfig+0x118>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d112      	bne.n	80070fe <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80070e0:	4b22      	ldr	r3, [pc, #136]	; (800716c <USBD_SetConfig+0x118>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80070ea:	4b20      	ldr	r3, [pc, #128]	; (800716c <USBD_SetConfig+0x118>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff fa09 	bl	8006508 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9dc 	bl	80074b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80070fc:	e033      	b.n	8007166 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80070fe:	4b1b      	ldr	r3, [pc, #108]	; (800716c <USBD_SetConfig+0x118>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	429a      	cmp	r2, r3
 800710a:	d01d      	beq.n	8007148 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff f9f7 	bl	8006508 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800711a:	4b14      	ldr	r3, [pc, #80]	; (800716c <USBD_SetConfig+0x118>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <USBD_SetConfig+0x118>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff f9cd 	bl	80064ca <USBD_SetClassConfig>
 8007130:	4603      	mov	r3, r0
 8007132:	2b02      	cmp	r3, #2
 8007134:	d104      	bne.n	8007140 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f8f2 	bl	8007322 <USBD_CtlError>
          return;
 800713e:	e012      	b.n	8007166 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f9b7 	bl	80074b4 <USBD_CtlSendStatus>
      break;
 8007146:	e00e      	b.n	8007166 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9b3 	bl	80074b4 <USBD_CtlSendStatus>
      break;
 800714e:	e00a      	b.n	8007166 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f8e5 	bl	8007322 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007158:	4b04      	ldr	r3, [pc, #16]	; (800716c <USBD_SetConfig+0x118>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff f9d2 	bl	8006508 <USBD_ClrClassConfig>
      break;
 8007164:	bf00      	nop
    }
  }
}
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	200001bc 	.word	0x200001bc

08007170 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	88db      	ldrh	r3, [r3, #6]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d004      	beq.n	800718c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f8cc 	bl	8007322 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800718a:	e021      	b.n	80071d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007192:	2b01      	cmp	r3, #1
 8007194:	db17      	blt.n	80071c6 <USBD_GetConfig+0x56>
 8007196:	2b02      	cmp	r3, #2
 8007198:	dd02      	ble.n	80071a0 <USBD_GetConfig+0x30>
 800719a:	2b03      	cmp	r3, #3
 800719c:	d00b      	beq.n	80071b6 <USBD_GetConfig+0x46>
 800719e:	e012      	b.n	80071c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3308      	adds	r3, #8
 80071aa:	2201      	movs	r2, #1
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f922 	bl	80073f8 <USBD_CtlSendData>
      break;
 80071b4:	e00c      	b.n	80071d0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	2201      	movs	r2, #1
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f91a 	bl	80073f8 <USBD_CtlSendData>
      break;
 80071c4:	e004      	b.n	80071d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f8aa 	bl	8007322 <USBD_CtlError>
      break;
 80071ce:	bf00      	nop
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071e8:	3b01      	subs	r3, #1
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d81e      	bhi.n	800722c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	88db      	ldrh	r3, [r3, #6]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d004      	beq.n	8007200 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f892 	bl	8007322 <USBD_CtlError>
      break;
 80071fe:	e01a      	b.n	8007236 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f043 0202 	orr.w	r2, r3, #2
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	330c      	adds	r3, #12
 8007220:	2202      	movs	r2, #2
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f8e7 	bl	80073f8 <USBD_CtlSendData>
    break;
 800722a:	e004      	b.n	8007236 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f877 	bl	8007322 <USBD_CtlError>
    break;
 8007234:	bf00      	nop
  }
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d106      	bne.n	800725e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f92b 	bl	80074b4 <USBD_CtlSendStatus>
  }

}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007276:	3b01      	subs	r3, #1
 8007278:	2b02      	cmp	r3, #2
 800727a:	d80b      	bhi.n	8007294 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	885b      	ldrh	r3, [r3, #2]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10c      	bne.n	800729e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f911 	bl	80074b4 <USBD_CtlSendStatus>
    }
    break;
 8007292:	e004      	b.n	800729e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f843 	bl	8007322 <USBD_CtlError>
    break;
 800729c:	e000      	b.n	80072a0 <USBD_ClrFeature+0x3a>
    break;
 800729e:	bf00      	nop
  }
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	785a      	ldrb	r2, [r3, #1]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	3302      	adds	r3, #2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	3303      	adds	r3, #3
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	3304      	adds	r3, #4
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	3305      	adds	r3, #5
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	4413      	add	r3, r2
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	3306      	adds	r3, #6
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	b29a      	uxth	r2, r3
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	3307      	adds	r3, #7
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	b29b      	uxth	r3, r3
 800730e:	4413      	add	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	80da      	strh	r2, [r3, #6]

}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800732c:	2180      	movs	r1, #128	; 0x80
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 ffd8 	bl	80082e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ffd4 	bl	80082e4 <USBD_LL_StallEP>
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d032      	beq.n	80073c0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f834 	bl	80073c8 <USBD_GetLen>
 8007360:	4603      	mov	r3, r0
 8007362:	3301      	adds	r3, #1
 8007364:	b29b      	uxth	r3, r3
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	75fa      	strb	r2, [r7, #23]
 8007374:	461a      	mov	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4413      	add	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	75fa      	strb	r2, [r7, #23]
 8007386:	461a      	mov	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4413      	add	r3, r2
 800738c:	2203      	movs	r2, #3
 800738e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007390:	e012      	b.n	80073b8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	60fa      	str	r2, [r7, #12]
 8007398:	7dfa      	ldrb	r2, [r7, #23]
 800739a:	1c51      	adds	r1, r2, #1
 800739c:	75f9      	strb	r1, [r7, #23]
 800739e:	4611      	mov	r1, r2
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	440a      	add	r2, r1
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	75fa      	strb	r2, [r7, #23]
 80073ae:	461a      	mov	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4413      	add	r3, r2
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e8      	bne.n	8007392 <USBD_GetString+0x4e>
    }
  }
}
 80073c0:	bf00      	nop
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80073d4:	e005      	b.n	80073e2 <USBD_GetLen+0x1a>
    {
        len++;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	3301      	adds	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
        buf++;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3301      	adds	r3, #1
 80073e0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f5      	bne.n	80073d6 <USBD_GetLen+0xe>
    }

    return len;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2202      	movs	r2, #2
 800740a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	2100      	movs	r1, #0
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 ffe8 	bl	80083f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	2100      	movs	r1, #0
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 ffd6 	bl	80083f6 <USBD_LL_Transmit>

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2203      	movs	r2, #3
 8007466:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800746a:	88fa      	ldrh	r2, [r7, #6]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	2100      	movs	r1, #0
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 ffdb 	bl	800843c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	2100      	movs	r1, #0
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 ffc9 	bl	800843c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074c4:	2300      	movs	r3, #0
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 ff93 	bl	80083f6 <USBD_LL_Transmit>

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2205      	movs	r2, #5
 80074e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80074ea:	2300      	movs	r3, #0
 80074ec:	2200      	movs	r2, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 ffa3 	bl	800843c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007504:	f7f9 f800 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007508:	f000 f80e 	bl	8007528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800750c:	f000 f95c 	bl	80077c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8007510:	f000 f93c 	bl	800778c <MX_DMA_Init>
  MX_ETH_Init();
 8007514:	f000 f8aa 	bl	800766c <MX_ETH_Init>
  MX_I2S1_Init();
 8007518:	f000 f8de 	bl	80076d8 <MX_I2S1_Init>
  MX_USART3_UART_Init();
 800751c:	f000 f906 	bl	800772c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8007520:	f000 fc56 	bl	8007dd0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007524:	e7fe      	b.n	8007524 <main+0x24>
	...

08007528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b0b4      	sub	sp, #208	; 0xd0
 800752c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800752e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007532:	2230      	movs	r2, #48	; 0x30
 8007534:	2100      	movs	r1, #0
 8007536:	4618      	mov	r0, r3
 8007538:	f001 f9a8 	bl	800888c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800753c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	609a      	str	r2, [r3, #8]
 8007548:	60da      	str	r2, [r3, #12]
 800754a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800754c:	f107 0308 	add.w	r3, r7, #8
 8007550:	2284      	movs	r2, #132	; 0x84
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f001 f999 	bl	800888c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800755a:	f7fb fd57 	bl	800300c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800755e:	4b40      	ldr	r3, [pc, #256]	; (8007660 <SystemClock_Config+0x138>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	4a3f      	ldr	r2, [pc, #252]	; (8007660 <SystemClock_Config+0x138>)
 8007564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007568:	6413      	str	r3, [r2, #64]	; 0x40
 800756a:	4b3d      	ldr	r3, [pc, #244]	; (8007660 <SystemClock_Config+0x138>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007576:	4b3b      	ldr	r3, [pc, #236]	; (8007664 <SystemClock_Config+0x13c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a3a      	ldr	r2, [pc, #232]	; (8007664 <SystemClock_Config+0x13c>)
 800757c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	4b38      	ldr	r3, [pc, #224]	; (8007664 <SystemClock_Config+0x13c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800758e:	2301      	movs	r3, #1
 8007590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007594:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007598:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800759c:	2302      	movs	r3, #2
 800759e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80075a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80075aa:	2304      	movs	r3, #4
 80075ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80075b0:	23d8      	movs	r3, #216	; 0xd8
 80075b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80075b6:	2302      	movs	r3, #2
 80075b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80075bc:	2309      	movs	r3, #9
 80075be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fb fd80 	bl	80030cc <HAL_RCC_OscConfig>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80075d2:	f000 f99b 	bl	800790c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80075d6:	f7fb fd29 	bl	800302c <HAL_PWREx_EnableOverDrive>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80075e0:	f000 f994 	bl	800790c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075e4:	230f      	movs	r3, #15
 80075e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075ea:	2302      	movs	r3, #2
 80075ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075f0:	2300      	movs	r3, #0
 80075f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80075f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80075fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80075fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007606:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800760a:	2107      	movs	r1, #7
 800760c:	4618      	mov	r0, r3
 800760e:	f7fb ffcd 	bl	80035ac <HAL_RCC_ClockConfig>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8007618:	f000 f978 	bl	800790c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2S
 800761c:	4b12      	ldr	r3, [pc, #72]	; (8007668 <SystemClock_Config+0x140>)
 800761e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8007620:	2360      	movs	r3, #96	; 0x60
 8007622:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8007624:	2302      	movs	r3, #2
 8007626:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007628:	2302      	movs	r3, #2
 800762a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800762c:	2302      	movs	r3, #2
 800762e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8007630:	2301      	movs	r3, #1
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8007634:	2300      	movs	r3, #0
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007638:	2300      	movs	r3, #0
 800763a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800763c:	2300      	movs	r3, #0
 800763e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	4618      	mov	r0, r3
 8007648:	f7fc f9a4 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8007652:	f000 f95b 	bl	800790c <Error_Handler>
  }
}
 8007656:	bf00      	nop
 8007658:	37d0      	adds	r7, #208	; 0xd0
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40023800 	.word	0x40023800
 8007664:	40007000 	.word	0x40007000
 8007668:	00200101 	.word	0x00200101

0800766c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8007672:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <MX_ETH_Init+0x64>)
 8007674:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <MX_ETH_Init+0x68>)
 8007676:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <MX_ETH_Init+0x64>)
 800767a:	2201      	movs	r2, #1
 800767c:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800767e:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <MX_ETH_Init+0x64>)
 8007680:	2200      	movs	r2, #0
 8007682:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007684:	2300      	movs	r3, #0
 8007686:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8007688:	2380      	movs	r3, #128	; 0x80
 800768a:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 800768c:	23e1      	movs	r3, #225	; 0xe1
 800768e:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8007690:	2300      	movs	r3, #0
 8007692:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8007694:	2300      	movs	r3, #0
 8007696:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8007698:	2300      	movs	r3, #0
 800769a:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800769c:	4a0c      	ldr	r2, [pc, #48]	; (80076d0 <MX_ETH_Init+0x64>)
 800769e:	463b      	mov	r3, r7
 80076a0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <MX_ETH_Init+0x64>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <MX_ETH_Init+0x64>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <MX_ETH_Init+0x64>)
 80076b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80076b4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80076b6:	4806      	ldr	r0, [pc, #24]	; (80076d0 <MX_ETH_Init+0x64>)
 80076b8:	f7f9 fba0 	bl	8000dfc <HAL_ETH_Init>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 80076c2:	f000 f923 	bl	800790c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000290 	.word	0x20000290
 80076d4:	40028000 	.word	0x40028000

080076d8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <MX_I2S1_Init+0x4c>)
 80076de:	4a12      	ldr	r2, [pc, #72]	; (8007728 <MX_I2S1_Init+0x50>)
 80076e0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <MX_I2S1_Init+0x4c>)
 80076e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <MX_I2S1_Init+0x4c>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80076f0:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <MX_I2S1_Init+0x4c>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <MX_I2S1_Init+0x4c>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80076fc:	4b09      	ldr	r3, [pc, #36]	; (8007724 <MX_I2S1_Init+0x4c>)
 80076fe:	f64a 4244 	movw	r2, #44100	; 0xac44
 8007702:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8007704:	4b07      	ldr	r3, [pc, #28]	; (8007724 <MX_I2S1_Init+0x4c>)
 8007706:	2200      	movs	r2, #0
 8007708:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <MX_I2S1_Init+0x4c>)
 800770c:	2202      	movs	r2, #2
 800770e:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8007710:	4804      	ldr	r0, [pc, #16]	; (8007724 <MX_I2S1_Init+0x4c>)
 8007712:	f7fa f9a3 	bl	8001a5c <HAL_I2S_Init>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 800771c:	f000 f8f6 	bl	800790c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8007720:	bf00      	nop
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000250 	.word	0x20000250
 8007728:	40013000 	.word	0x40013000

0800772c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007730:	4b14      	ldr	r3, [pc, #80]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <MX_USART3_UART_Init+0x5c>)
 8007734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800773c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007740:	2200      	movs	r2, #0
 8007742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007746:	2200      	movs	r2, #0
 8007748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <MX_USART3_UART_Init+0x58>)
 800774c:	2200      	movs	r2, #0
 800774e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007752:	220c      	movs	r2, #12
 8007754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007756:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007758:	2200      	movs	r2, #0
 800775a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <MX_USART3_UART_Init+0x58>)
 800775e:	2200      	movs	r2, #0
 8007760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007762:	4b08      	ldr	r3, [pc, #32]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007764:	2200      	movs	r2, #0
 8007766:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <MX_USART3_UART_Init+0x58>)
 800776a:	2200      	movs	r2, #0
 800776c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800776e:	4805      	ldr	r0, [pc, #20]	; (8007784 <MX_USART3_UART_Init+0x58>)
 8007770:	f7fc fcfe 	bl	8004170 <HAL_UART_Init>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800777a:	f000 f8c7 	bl	800790c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200001d0 	.word	0x200001d0
 8007788:	40004800 	.word	0x40004800

0800778c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007792:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <MX_DMA_Init+0x38>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	4a0b      	ldr	r2, [pc, #44]	; (80077c4 <MX_DMA_Init+0x38>)
 8007798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800779c:	6313      	str	r3, [r2, #48]	; 0x30
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <MX_DMA_Init+0x38>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2100      	movs	r1, #0
 80077ae:	203b      	movs	r0, #59	; 0x3b
 80077b0:	f7f9 f805 	bl	80007be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80077b4:	203b      	movs	r0, #59	; 0x3b
 80077b6:	f7f9 f81e 	bl	80007f6 <HAL_NVIC_EnableIRQ>

}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40023800 	.word	0x40023800

080077c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08c      	sub	sp, #48	; 0x30
 80077cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ce:	f107 031c 	add.w	r3, r7, #28
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	605a      	str	r2, [r3, #4]
 80077d8:	609a      	str	r2, [r3, #8]
 80077da:	60da      	str	r2, [r3, #12]
 80077dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077de:	4b46      	ldr	r3, [pc, #280]	; (80078f8 <MX_GPIO_Init+0x130>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	4a45      	ldr	r2, [pc, #276]	; (80078f8 <MX_GPIO_Init+0x130>)
 80077e4:	f043 0304 	orr.w	r3, r3, #4
 80077e8:	6313      	str	r3, [r2, #48]	; 0x30
 80077ea:	4b43      	ldr	r3, [pc, #268]	; (80078f8 <MX_GPIO_Init+0x130>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80077f6:	4b40      	ldr	r3, [pc, #256]	; (80078f8 <MX_GPIO_Init+0x130>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	4a3f      	ldr	r2, [pc, #252]	; (80078f8 <MX_GPIO_Init+0x130>)
 80077fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007800:	6313      	str	r3, [r2, #48]	; 0x30
 8007802:	4b3d      	ldr	r3, [pc, #244]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800780e:	4b3a      	ldr	r3, [pc, #232]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	4a39      	ldr	r2, [pc, #228]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007814:	f043 0301 	orr.w	r3, r3, #1
 8007818:	6313      	str	r3, [r2, #48]	; 0x30
 800781a:	4b37      	ldr	r3, [pc, #220]	; (80078f8 <MX_GPIO_Init+0x130>)
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007826:	4b34      	ldr	r3, [pc, #208]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	4a33      	ldr	r2, [pc, #204]	; (80078f8 <MX_GPIO_Init+0x130>)
 800782c:	f043 0302 	orr.w	r3, r3, #2
 8007830:	6313      	str	r3, [r2, #48]	; 0x30
 8007832:	4b31      	ldr	r3, [pc, #196]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800783e:	4b2e      	ldr	r3, [pc, #184]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007844:	f043 0308 	orr.w	r3, r3, #8
 8007848:	6313      	str	r3, [r2, #48]	; 0x30
 800784a:	4b2b      	ldr	r3, [pc, #172]	; (80078f8 <MX_GPIO_Init+0x130>)
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	60bb      	str	r3, [r7, #8]
 8007854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007856:	4b28      	ldr	r3, [pc, #160]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	4a27      	ldr	r2, [pc, #156]	; (80078f8 <MX_GPIO_Init+0x130>)
 800785c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007860:	6313      	str	r3, [r2, #48]	; 0x30
 8007862:	4b25      	ldr	r3, [pc, #148]	; (80078f8 <MX_GPIO_Init+0x130>)
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	607b      	str	r3, [r7, #4]
 800786c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800786e:	2200      	movs	r2, #0
 8007870:	f244 0181 	movw	r1, #16513	; 0x4081
 8007874:	4821      	ldr	r0, [pc, #132]	; (80078fc <MX_GPIO_Init+0x134>)
 8007876:	f7fa f8d7 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800787a:	2200      	movs	r2, #0
 800787c:	2140      	movs	r1, #64	; 0x40
 800787e:	4820      	ldr	r0, [pc, #128]	; (8007900 <MX_GPIO_Init+0x138>)
 8007880:	f7fa f8d2 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8007884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800788a:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <MX_GPIO_Init+0x13c>)
 800788c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800788e:	2300      	movs	r3, #0
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8007892:	f107 031c 	add.w	r3, r7, #28
 8007896:	4619      	mov	r1, r3
 8007898:	481b      	ldr	r0, [pc, #108]	; (8007908 <MX_GPIO_Init+0x140>)
 800789a:	f7f9 ff1b 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800789e:	f244 0381 	movw	r3, #16513	; 0x4081
 80078a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078a4:	2301      	movs	r3, #1
 80078a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ac:	2300      	movs	r3, #0
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b0:	f107 031c 	add.w	r3, r7, #28
 80078b4:	4619      	mov	r1, r3
 80078b6:	4811      	ldr	r0, [pc, #68]	; (80078fc <MX_GPIO_Init+0x134>)
 80078b8:	f7f9 ff0c 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80078bc:	2340      	movs	r3, #64	; 0x40
 80078be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078c0:	2301      	movs	r3, #1
 80078c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078c8:	2300      	movs	r3, #0
 80078ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80078cc:	f107 031c 	add.w	r3, r7, #28
 80078d0:	4619      	mov	r1, r3
 80078d2:	480b      	ldr	r0, [pc, #44]	; (8007900 <MX_GPIO_Init+0x138>)
 80078d4:	f7f9 fefe 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80078d8:	2380      	movs	r3, #128	; 0x80
 80078da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078dc:	2300      	movs	r3, #0
 80078de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80078e4:	f107 031c 	add.w	r3, r7, #28
 80078e8:	4619      	mov	r1, r3
 80078ea:	4805      	ldr	r0, [pc, #20]	; (8007900 <MX_GPIO_Init+0x138>)
 80078ec:	f7f9 fef2 	bl	80016d4 <HAL_GPIO_Init>

}
 80078f0:	bf00      	nop
 80078f2:	3730      	adds	r7, #48	; 0x30
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40023800 	.word	0x40023800
 80078fc:	40020400 	.word	0x40020400
 8007900:	40021800 	.word	0x40021800
 8007904:	10110000 	.word	0x10110000
 8007908:	40020800 	.word	0x40020800

0800790c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007910:	bf00      	nop
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007922:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <HAL_MspInit+0x44>)
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <HAL_MspInit+0x44>)
 8007928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800792c:	6413      	str	r3, [r2, #64]	; 0x40
 800792e:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <HAL_MspInit+0x44>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007936:	607b      	str	r3, [r7, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <HAL_MspInit+0x44>)
 800793c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793e:	4a08      	ldr	r2, [pc, #32]	; (8007960 <HAL_MspInit+0x44>)
 8007940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007944:	6453      	str	r3, [r2, #68]	; 0x44
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <HAL_MspInit+0x44>)
 8007948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40023800 	.word	0x40023800

08007964 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08e      	sub	sp, #56	; 0x38
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800796c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	605a      	str	r2, [r3, #4]
 8007976:	609a      	str	r2, [r3, #8]
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a4e      	ldr	r2, [pc, #312]	; (8007abc <HAL_ETH_MspInit+0x158>)
 8007982:	4293      	cmp	r3, r2
 8007984:	f040 8096 	bne.w	8007ab4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007988:	4b4d      	ldr	r3, [pc, #308]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	4a4c      	ldr	r2, [pc, #304]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 800798e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007992:	6313      	str	r3, [r2, #48]	; 0x30
 8007994:	4b4a      	ldr	r3, [pc, #296]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799c:	623b      	str	r3, [r7, #32]
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	4b47      	ldr	r3, [pc, #284]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	4a46      	ldr	r2, [pc, #280]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079aa:	6313      	str	r3, [r2, #48]	; 0x30
 80079ac:	4b44      	ldr	r3, [pc, #272]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079b4:	61fb      	str	r3, [r7, #28]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4b41      	ldr	r3, [pc, #260]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	4a40      	ldr	r2, [pc, #256]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079c2:	6313      	str	r3, [r2, #48]	; 0x30
 80079c4:	4b3e      	ldr	r3, [pc, #248]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079d0:	4b3b      	ldr	r3, [pc, #236]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	4a3a      	ldr	r2, [pc, #232]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079d6:	f043 0304 	orr.w	r3, r3, #4
 80079da:	6313      	str	r3, [r2, #48]	; 0x30
 80079dc:	4b38      	ldr	r3, [pc, #224]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079e8:	4b35      	ldr	r3, [pc, #212]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	4a34      	ldr	r2, [pc, #208]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	6313      	str	r3, [r2, #48]	; 0x30
 80079f4:	4b32      	ldr	r3, [pc, #200]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a00:	4b2f      	ldr	r3, [pc, #188]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	4a2e      	ldr	r2, [pc, #184]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 8007a06:	f043 0302 	orr.w	r3, r3, #2
 8007a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8007a0c:	4b2c      	ldr	r3, [pc, #176]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007a18:	4b29      	ldr	r3, [pc, #164]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	4a28      	ldr	r2, [pc, #160]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 8007a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a22:	6313      	str	r3, [r2, #48]	; 0x30
 8007a24:	4b26      	ldr	r3, [pc, #152]	; (8007ac0 <HAL_ETH_MspInit+0x15c>)
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007a30:	2332      	movs	r3, #50	; 0x32
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a34:	2302      	movs	r3, #2
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a40:	230b      	movs	r3, #11
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a48:	4619      	mov	r1, r3
 8007a4a:	481e      	ldr	r0, [pc, #120]	; (8007ac4 <HAL_ETH_MspInit+0x160>)
 8007a4c:	f7f9 fe42 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007a50:	2386      	movs	r3, #134	; 0x86
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a54:	2302      	movs	r3, #2
 8007a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a60:	230b      	movs	r3, #11
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4817      	ldr	r0, [pc, #92]	; (8007ac8 <HAL_ETH_MspInit+0x164>)
 8007a6c:	f7f9 fe32 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a76:	2302      	movs	r3, #2
 8007a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a82:	230b      	movs	r3, #11
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	480f      	ldr	r0, [pc, #60]	; (8007acc <HAL_ETH_MspInit+0x168>)
 8007a8e:	f7f9 fe21 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007a92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a98:	2302      	movs	r3, #2
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007aa4:	230b      	movs	r3, #11
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aac:	4619      	mov	r1, r3
 8007aae:	4808      	ldr	r0, [pc, #32]	; (8007ad0 <HAL_ETH_MspInit+0x16c>)
 8007ab0:	f7f9 fe10 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8007ab4:	bf00      	nop
 8007ab6:	3738      	adds	r7, #56	; 0x38
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40028000 	.word	0x40028000
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40020800 	.word	0x40020800
 8007ac8:	40020000 	.word	0x40020000
 8007acc:	40020400 	.word	0x40020400
 8007ad0:	40021800 	.word	0x40021800

08007ad4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	; 0x28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007adc:	f107 0314 	add.w	r3, r7, #20
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	605a      	str	r2, [r3, #4]
 8007ae6:	609a      	str	r2, [r3, #8]
 8007ae8:	60da      	str	r2, [r3, #12]
 8007aea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a3d      	ldr	r2, [pc, #244]	; (8007be8 <HAL_I2S_MspInit+0x114>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d174      	bne.n	8007be0 <HAL_I2S_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007af6:	4b3d      	ldr	r3, [pc, #244]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	4a3c      	ldr	r2, [pc, #240]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b00:	6453      	str	r3, [r2, #68]	; 0x44
 8007b02:	4b3a      	ldr	r3, [pc, #232]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b0a:	613b      	str	r3, [r7, #16]
 8007b0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b0e:	4b37      	ldr	r3, [pc, #220]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	4a36      	ldr	r2, [pc, #216]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007b14:	f043 0301 	orr.w	r3, r3, #1
 8007b18:	6313      	str	r3, [r2, #48]	; 0x30
 8007b1a:	4b34      	ldr	r3, [pc, #208]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b26:	4b31      	ldr	r3, [pc, #196]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	4a30      	ldr	r2, [pc, #192]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007b2c:	f043 0302 	orr.w	r3, r3, #2
 8007b30:	6313      	str	r3, [r2, #48]	; 0x30
 8007b32:	4b2e      	ldr	r3, [pc, #184]	; (8007bec <HAL_I2S_MspInit+0x118>)
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	60bb      	str	r3, [r7, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration    
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PB5     ------> I2S1_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007b3e:	2330      	movs	r3, #48	; 0x30
 8007b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b42:	2302      	movs	r3, #2
 8007b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b4e:	2305      	movs	r3, #5
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b52:	f107 0314 	add.w	r3, r7, #20
 8007b56:	4619      	mov	r1, r3
 8007b58:	4825      	ldr	r0, [pc, #148]	; (8007bf0 <HAL_I2S_MspInit+0x11c>)
 8007b5a:	f7f9 fdbb 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007b5e:	2320      	movs	r3, #32
 8007b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b62:	2302      	movs	r3, #2
 8007b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b6e:	2305      	movs	r3, #5
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b72:	f107 0314 	add.w	r3, r7, #20
 8007b76:	4619      	mov	r1, r3
 8007b78:	481e      	ldr	r0, [pc, #120]	; (8007bf4 <HAL_I2S_MspInit+0x120>)
 8007b7a:	f7f9 fdab 	bl	80016d4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8007b7e:	4b1e      	ldr	r3, [pc, #120]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007b80:	4a1e      	ldr	r2, [pc, #120]	; (8007bfc <HAL_I2S_MspInit+0x128>)
 8007b82:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8007b84:	4b1c      	ldr	r3, [pc, #112]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007b86:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007b8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b8c:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007b8e:	2240      	movs	r2, #64	; 0x40
 8007b90:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b92:	4b19      	ldr	r3, [pc, #100]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b98:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b9e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ba0:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ba6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007ba8:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bae:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007bb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bbc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bbe:	4b0e      	ldr	r3, [pc, #56]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007bc4:	480c      	ldr	r0, [pc, #48]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007bc6:	f7f8 fe31 	bl	800082c <HAL_DMA_Init>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <HAL_I2S_MspInit+0x100>
    {
      Error_Handler();
 8007bd0:	f7ff fe9c 	bl	800790c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8007bda:	4a07      	ldr	r2, [pc, #28]	; (8007bf8 <HAL_I2S_MspInit+0x124>)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007be0:	bf00      	nop
 8007be2:	3728      	adds	r7, #40	; 0x28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	40013000 	.word	0x40013000
 8007bec:	40023800 	.word	0x40023800
 8007bf0:	40020000 	.word	0x40020000
 8007bf4:	40020400 	.word	0x40020400
 8007bf8:	200002d8 	.word	0x200002d8
 8007bfc:	40026458 	.word	0x40026458

08007c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c08:	f107 0314 	add.w	r3, r7, #20
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	60da      	str	r2, [r3, #12]
 8007c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a17      	ldr	r2, [pc, #92]	; (8007c7c <HAL_UART_MspInit+0x7c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d128      	bne.n	8007c74 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007c22:	4b17      	ldr	r3, [pc, #92]	; (8007c80 <HAL_UART_MspInit+0x80>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	4a16      	ldr	r2, [pc, #88]	; (8007c80 <HAL_UART_MspInit+0x80>)
 8007c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c2e:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <HAL_UART_MspInit+0x80>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <HAL_UART_MspInit+0x80>)
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	4a10      	ldr	r2, [pc, #64]	; (8007c80 <HAL_UART_MspInit+0x80>)
 8007c40:	f043 0308 	orr.w	r3, r3, #8
 8007c44:	6313      	str	r3, [r2, #48]	; 0x30
 8007c46:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <HAL_UART_MspInit+0x80>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c60:	2303      	movs	r3, #3
 8007c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007c64:	2307      	movs	r3, #7
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c68:	f107 0314 	add.w	r3, r7, #20
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4805      	ldr	r0, [pc, #20]	; (8007c84 <HAL_UART_MspInit+0x84>)
 8007c70:	f7f9 fd30 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007c74:	bf00      	nop
 8007c76:	3728      	adds	r7, #40	; 0x28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40004800 	.word	0x40004800
 8007c80:	40023800 	.word	0x40023800
 8007c84:	40020c00 	.word	0x40020c00

08007c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c8c:	bf00      	nop
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c9a:	e7fe      	b.n	8007c9a <HardFault_Handler+0x4>

08007c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ca0:	e7fe      	b.n	8007ca0 <MemManage_Handler+0x4>

08007ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ca6:	e7fe      	b.n	8007ca6 <BusFault_Handler+0x4>

08007ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007cac:	e7fe      	b.n	8007cac <UsageFault_Handler+0x4>

08007cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007cb2:	bf00      	nop
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007cce:	bf00      	nop
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cdc:	f7f8 fc52 	bl	8000584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ce0:	bf00      	nop
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007ce8:	4802      	ldr	r0, [pc, #8]	; (8007cf4 <DMA2_Stream3_IRQHandler+0x10>)
 8007cea:	f7f8 fe4d 	bl	8000988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007cee:	bf00      	nop
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	200002d8 	.word	0x200002d8

08007cf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007cfc:	4802      	ldr	r0, [pc, #8]	; (8007d08 <OTG_FS_IRQHandler+0x10>)
 8007cfe:	f7fa f919 	bl	8001f34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200005d4 	.word	0x200005d4

08007d0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d14:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <_sbrk+0x50>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <_sbrk+0x16>
		heap_end = &end;
 8007d1c:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <_sbrk+0x50>)
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <_sbrk+0x54>)
 8007d20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007d22:	4b0e      	ldr	r3, [pc, #56]	; (8007d5c <_sbrk+0x50>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <_sbrk+0x50>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	466a      	mov	r2, sp
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d907      	bls.n	8007d46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d36:	f000 fd6f 	bl	8008818 <__errno>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	230c      	movs	r3, #12
 8007d3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	e006      	b.n	8007d54 <_sbrk+0x48>
	}

	heap_end += incr;
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <_sbrk+0x50>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	4a03      	ldr	r2, [pc, #12]	; (8007d5c <_sbrk+0x50>)
 8007d50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007d52:	68fb      	ldr	r3, [r7, #12]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	200001c0 	.word	0x200001c0
 8007d60:	20000be0 	.word	0x20000be0

08007d64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <SystemInit+0x5c>)
 8007d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6e:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <SystemInit+0x5c>)
 8007d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007d78:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <SystemInit+0x60>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a11      	ldr	r2, [pc, #68]	; (8007dc4 <SystemInit+0x60>)
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <SystemInit+0x60>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <SystemInit+0x60>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	490d      	ldr	r1, [pc, #52]	; (8007dc4 <SystemInit+0x60>)
 8007d90:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <SystemInit+0x64>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <SystemInit+0x60>)
 8007d98:	4a0c      	ldr	r2, [pc, #48]	; (8007dcc <SystemInit+0x68>)
 8007d9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d9c:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <SystemInit+0x60>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <SystemInit+0x60>)
 8007da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <SystemInit+0x60>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007dae:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <SystemInit+0x5c>)
 8007db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007db4:	609a      	str	r2, [r3, #8]
#endif
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	e000ed00 	.word	0xe000ed00
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	fef6ffff 	.word	0xfef6ffff
 8007dcc:	24003010 	.word	0x24003010

08007dd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4912      	ldr	r1, [pc, #72]	; (8007e20 <MX_USB_DEVICE_Init+0x50>)
 8007dd8:	4812      	ldr	r0, [pc, #72]	; (8007e24 <MX_USB_DEVICE_Init+0x54>)
 8007dda:	f7fe fb1a 	bl	8006412 <USBD_Init>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007de4:	f7ff fd92 	bl	800790c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8007de8:	490f      	ldr	r1, [pc, #60]	; (8007e28 <MX_USB_DEVICE_Init+0x58>)
 8007dea:	480e      	ldr	r0, [pc, #56]	; (8007e24 <MX_USB_DEVICE_Init+0x54>)
 8007dec:	f7fe fb3c 	bl	8006468 <USBD_RegisterClass>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007df6:	f7ff fd89 	bl	800790c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8007dfa:	490c      	ldr	r1, [pc, #48]	; (8007e2c <MX_USB_DEVICE_Init+0x5c>)
 8007dfc:	4809      	ldr	r0, [pc, #36]	; (8007e24 <MX_USB_DEVICE_Init+0x54>)
 8007dfe:	f7fe faf5 	bl	80063ec <USBD_AUDIO_RegisterInterface>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e08:	f7ff fd80 	bl	800790c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e0c:	4805      	ldr	r0, [pc, #20]	; (8007e24 <MX_USB_DEVICE_Init+0x54>)
 8007e0e:	f7fe fb45 	bl	800649c <USBD_Start>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e18:	f7ff fd78 	bl	800790c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e1c:	bf00      	nop
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	200000dc 	.word	0x200000dc
 8007e24:	20000338 	.word	0x20000338
 8007e28:	20000008 	.word	0x20000008
 8007e2c:	200000c0 	.word	0x200000c0

08007e30 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8007e3c:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8007e52:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d001      	beq.n	8007e78 <AUDIO_AudioCmd_FS+0x18>
 8007e74:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;	
 8007e76:	e000      	b.n	8007e7a <AUDIO_AudioCmd_FS+0x1a>
    break;
 8007e78:	bf00      	nop
  }
  return (USBD_OK);
 8007e7a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8007e92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007eaa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007ec2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007ed4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08a      	sub	sp, #40	; 0x28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ee8:	f107 0314 	add.w	r3, r7, #20
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	60da      	str	r2, [r3, #12]
 8007ef6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f00:	d149      	bne.n	8007f96 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f02:	4b27      	ldr	r3, [pc, #156]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	4a26      	ldr	r2, [pc, #152]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f08:	f043 0301 	orr.w	r3, r3, #1
 8007f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f0e:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007f1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f20:	2302      	movs	r3, #2
 8007f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f2c:	230a      	movs	r3, #10
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	4619      	mov	r1, r3
 8007f36:	481b      	ldr	r0, [pc, #108]	; (8007fa4 <HAL_PCD_MspInit+0xc4>)
 8007f38:	f7f9 fbcc 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007f4a:	f107 0314 	add.w	r3, r7, #20
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4814      	ldr	r0, [pc, #80]	; (8007fa4 <HAL_PCD_MspInit+0xc4>)
 8007f52:	f7f9 fbbf 	bl	80016d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f56:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5a:	4a11      	ldr	r2, [pc, #68]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f60:	6353      	str	r3, [r2, #52]	; 0x34
 8007f62:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f78:	6453      	str	r3, [r2, #68]	; 0x44
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_PCD_MspInit+0xc0>)
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f82:	60bb      	str	r3, [r7, #8]
 8007f84:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2100      	movs	r1, #0
 8007f8a:	2043      	movs	r0, #67	; 0x43
 8007f8c:	f7f8 fc17 	bl	80007be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f90:	2043      	movs	r0, #67	; 0x43
 8007f92:	f7f8 fc30 	bl	80007f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f96:	bf00      	nop
 8007f98:	3728      	adds	r7, #40	; 0x28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	40020000 	.word	0x40020000

08007fa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7fe fab5 	bl	800652e <USBD_LL_SetupStage>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8007fde:	78fa      	ldrb	r2, [r7, #3]
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	f7fe fae5 	bl	80065c4 <USBD_LL_DataOutStage>
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8008014:	78fa      	ldrb	r2, [r7, #3]
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	1a9b      	subs	r3, r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	3348      	adds	r3, #72	; 0x48
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	4619      	mov	r1, r3
 800802a:	f7fe fb3c 	bl	80066a6 <USBD_LL_DataInStage>
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe fc4a 	bl	80068de <USBD_LL_SOF>
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800805a:	2301      	movs	r3, #1
 800805c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
 800806a:	e008      	b.n	800807e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d102      	bne.n	800807a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
 8008078:	e001      	b.n	800807e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800807a:	f7ff fc47 	bl	800790c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008084:	7bfa      	ldrb	r2, [r7, #15]
 8008086:	4611      	mov	r1, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fbf2 	bl	8006872 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe fbab 	bl	80067f0 <USBD_LL_Reset>
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fbed 	bl	8006892 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080d8:	4b04      	ldr	r3, [pc, #16]	; (80080ec <HAL_PCD_SuspendCallback+0x48>)
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	4a03      	ldr	r2, [pc, #12]	; (80080ec <HAL_PCD_SuspendCallback+0x48>)
 80080de:	f043 0306 	orr.w	r3, r3, #6
 80080e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	e000ed00 	.word	0xe000ed00

080080f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fbdc 	bl	80068bc <USBD_LL_Resume>
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800811e:	78fa      	ldrb	r2, [r7, #3]
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fc02 	bl	800692c <USBD_LL_IsoOUTIncomplete>
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fbe3 	bl	8006912 <USBD_LL_IsoINIncomplete>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fbef 	bl	8006946 <USBD_LL_DevConnected>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fbec 	bl	800695c <USBD_LL_DevDisconnected>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d13c      	bne.n	8008216 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800819c:	4a20      	ldr	r2, [pc, #128]	; (8008220 <USBD_LL_Init+0x94>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <USBD_LL_Init+0x94>)
 80081a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081ac:	4b1c      	ldr	r3, [pc, #112]	; (8008220 <USBD_LL_Init+0x94>)
 80081ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80081b4:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <USBD_LL_Init+0x94>)
 80081b6:	2206      	movs	r2, #6
 80081b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081ba:	4b19      	ldr	r3, [pc, #100]	; (8008220 <USBD_LL_Init+0x94>)
 80081bc:	2202      	movs	r2, #2
 80081be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081c0:	4b17      	ldr	r3, [pc, #92]	; (8008220 <USBD_LL_Init+0x94>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081c6:	4b16      	ldr	r3, [pc, #88]	; (8008220 <USBD_LL_Init+0x94>)
 80081c8:	2202      	movs	r2, #2
 80081ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80081cc:	4b14      	ldr	r3, [pc, #80]	; (8008220 <USBD_LL_Init+0x94>)
 80081ce:	2201      	movs	r2, #1
 80081d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80081d2:	4b13      	ldr	r3, [pc, #76]	; (8008220 <USBD_LL_Init+0x94>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80081d8:	4b11      	ldr	r3, [pc, #68]	; (8008220 <USBD_LL_Init+0x94>)
 80081da:	2200      	movs	r2, #0
 80081dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80081de:	4b10      	ldr	r3, [pc, #64]	; (8008220 <USBD_LL_Init+0x94>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <USBD_LL_Init+0x94>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80081ea:	480d      	ldr	r0, [pc, #52]	; (8008220 <USBD_LL_Init+0x94>)
 80081ec:	f7f9 fd68 	bl	8001cc0 <HAL_PCD_Init>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80081f6:	f7ff fb89 	bl	800790c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80081fa:	2180      	movs	r1, #128	; 0x80
 80081fc:	4808      	ldr	r0, [pc, #32]	; (8008220 <USBD_LL_Init+0x94>)
 80081fe:	f7fa fed0 	bl	8002fa2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008202:	2240      	movs	r2, #64	; 0x40
 8008204:	2100      	movs	r1, #0
 8008206:	4806      	ldr	r0, [pc, #24]	; (8008220 <USBD_LL_Init+0x94>)
 8008208:	f7fa fe84 	bl	8002f14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800820c:	2280      	movs	r2, #128	; 0x80
 800820e:	2101      	movs	r1, #1
 8008210:	4803      	ldr	r0, [pc, #12]	; (8008220 <USBD_LL_Init+0x94>)
 8008212:	f7fa fe7f 	bl	8002f14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	200005d4 	.word	0x200005d4

08008224 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800823a:	4618      	mov	r0, r3
 800823c:	f7f9 fe58 	bl	8001ef0 <HAL_PCD_Start>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f970 	bl	800852c <USBD_Get_USB_Status>
 800824c:	4603      	mov	r3, r0
 800824e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008250:	7bbb      	ldrb	r3, [r7, #14]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	4608      	mov	r0, r1
 8008264:	4611      	mov	r1, r2
 8008266:	461a      	mov	r2, r3
 8008268:	4603      	mov	r3, r0
 800826a:	70fb      	strb	r3, [r7, #3]
 800826c:	460b      	mov	r3, r1
 800826e:	70bb      	strb	r3, [r7, #2]
 8008270:	4613      	mov	r3, r2
 8008272:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008282:	78bb      	ldrb	r3, [r7, #2]
 8008284:	883a      	ldrh	r2, [r7, #0]
 8008286:	78f9      	ldrb	r1, [r7, #3]
 8008288:	f7fa fa4d 	bl	8002726 <HAL_PCD_EP_Open>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f94a 	bl	800852c <USBD_Get_USB_Status>
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800829c:	7bbb      	ldrb	r3, [r7, #14]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80082c0:	78fa      	ldrb	r2, [r7, #3]
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fa fa96 	bl	80027f6 <HAL_PCD_EP_Close>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 f92b 	bl	800852c <USBD_Get_USB_Status>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80082da:	7bbb      	ldrb	r3, [r7, #14]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f7fa fb56 	bl	80029b4 <HAL_PCD_EP_SetStall>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f90c 	bl	800852c <USBD_Get_USB_Status>
 8008314:	4603      	mov	r3, r0
 8008316:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008318:	7bbb      	ldrb	r3, [r7, #14]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f7fa fb9b 	bl	8002a7c <HAL_PCD_EP_ClrStall>
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 f8ed 	bl	800852c <USBD_Get_USB_Status>
 8008352:	4603      	mov	r3, r0
 8008354:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008356:	7bbb      	ldrb	r3, [r7, #14]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008372:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008378:	2b00      	cmp	r3, #0
 800837a:	da0b      	bge.n	8008394 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008382:	68f9      	ldr	r1, [r7, #12]
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	1a9b      	subs	r3, r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	333e      	adds	r3, #62	; 0x3e
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	e00b      	b.n	80083ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	4613      	mov	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	1a9b      	subs	r3, r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80083aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	4611      	mov	r1, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fa f980 	bl	80026dc <HAL_PCD_SetAddress>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f8a2 	bl	800852c <USBD_Get_USB_Status>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	461a      	mov	r2, r3
 8008402:	460b      	mov	r3, r1
 8008404:	72fb      	strb	r3, [r7, #11]
 8008406:	4613      	mov	r3, r2
 8008408:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008418:	893b      	ldrh	r3, [r7, #8]
 800841a:	7af9      	ldrb	r1, [r7, #11]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	f7fa fa7f 	bl	8002920 <HAL_PCD_EP_Transmit>
 8008422:	4603      	mov	r3, r0
 8008424:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f87f 	bl	800852c <USBD_Get_USB_Status>
 800842e:	4603      	mov	r3, r0
 8008430:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008432:	7dbb      	ldrb	r3, [r7, #22]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	607a      	str	r2, [r7, #4]
 8008446:	461a      	mov	r2, r3
 8008448:	460b      	mov	r3, r1
 800844a:	72fb      	strb	r3, [r7, #11]
 800844c:	4613      	mov	r3, r2
 800844e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800845e:	893b      	ldrh	r3, [r7, #8]
 8008460:	7af9      	ldrb	r1, [r7, #11]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	f7fa fa11 	bl	800288a <HAL_PCD_EP_Receive>
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f85c 	bl	800852c <USBD_Get_USB_Status>
 8008474:	4603      	mov	r3, r0
 8008476:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008478:	7dbb      	ldrb	r3, [r7, #22]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_PCDEx_LPM_Callback+0x18>
 8008496:	2b01      	cmp	r3, #1
 8008498:	d01f      	beq.n	80084da <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800849a:	e03b      	b.n	8008514 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80084a4:	f000 f83c 	bl	8008520 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084a8:	4b1c      	ldr	r3, [pc, #112]	; (800851c <HAL_PCDEx_LPM_Callback+0x98>)
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	4a1b      	ldr	r2, [pc, #108]	; (800851c <HAL_PCDEx_LPM_Callback+0x98>)
 80084ae:	f023 0306 	bic.w	r3, r3, #6
 80084b2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	6812      	ldr	r2, [r2, #0]
 80084c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084c6:	f023 0301 	bic.w	r3, r3, #1
 80084ca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe f9f2 	bl	80068bc <USBD_LL_Resume>
    break;
 80084d8:	e01c      	b.n	8008514 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6812      	ldr	r2, [r2, #0]
 80084e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe f9ca 	bl	8006892 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_PCDEx_LPM_Callback+0x98>)
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	4a04      	ldr	r2, [pc, #16]	; (800851c <HAL_PCDEx_LPM_Callback+0x98>)
 800850c:	f043 0306 	orr.w	r3, r3, #6
 8008510:	6113      	str	r3, [r2, #16]
    break;   
 8008512:	bf00      	nop
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	e000ed00 	.word	0xe000ed00

08008520 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008524:	f7ff f800 	bl	8007528 <SystemClock_Config>
}
 8008528:	bf00      	nop
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d817      	bhi.n	8008570 <USBD_Get_USB_Status+0x44>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <USBD_Get_USB_Status+0x1c>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	08008559 	.word	0x08008559
 800854c:	0800855f 	.word	0x0800855f
 8008550:	08008565 	.word	0x08008565
 8008554:	0800856b 	.word	0x0800856b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73fb      	strb	r3, [r7, #15]
    break;
 800855c:	e00b      	b.n	8008576 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800855e:	2302      	movs	r3, #2
 8008560:	73fb      	strb	r3, [r7, #15]
    break;
 8008562:	e008      	b.n	8008576 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
    break;
 8008568:	e005      	b.n	8008576 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800856a:	2302      	movs	r3, #2
 800856c:	73fb      	strb	r3, [r7, #15]
    break;
 800856e:	e002      	b.n	8008576 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008570:	2302      	movs	r3, #2
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	bf00      	nop
  }
  return usb_status;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2212      	movs	r2, #18
 8008594:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008596:	4b03      	ldr	r3, [pc, #12]	; (80085a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	200000fc 	.word	0x200000fc

080085a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2204      	movs	r2, #4
 80085b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085ba:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	2000011c 	.word	0x2000011c

080085cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	4907      	ldr	r1, [pc, #28]	; (8008600 <USBD_FS_ProductStrDescriptor+0x34>)
 80085e2:	4808      	ldr	r0, [pc, #32]	; (8008604 <USBD_FS_ProductStrDescriptor+0x38>)
 80085e4:	f7fe feae 	bl	8007344 <USBD_GetString>
 80085e8:	e004      	b.n	80085f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	4904      	ldr	r1, [pc, #16]	; (8008600 <USBD_FS_ProductStrDescriptor+0x34>)
 80085ee:	4805      	ldr	r0, [pc, #20]	; (8008604 <USBD_FS_ProductStrDescriptor+0x38>)
 80085f0:	f7fe fea8 	bl	8007344 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	200009d8 	.word	0x200009d8
 8008604:	08008a28 	.word	0x08008a28

08008608 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	4904      	ldr	r1, [pc, #16]	; (8008628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008618:	4804      	ldr	r0, [pc, #16]	; (800862c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800861a:	f7fe fe93 	bl	8007344 <USBD_GetString>
  return USBD_StrDesc;
 800861e:	4b02      	ldr	r3, [pc, #8]	; (8008628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	200009d8 	.word	0x200009d8
 800862c:	08008a34 	.word	0x08008a34

08008630 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	221a      	movs	r2, #26
 8008640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008642:	f000 f855 	bl	80086f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008646:	4b02      	ldr	r3, [pc, #8]	; (8008650 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000120 	.word	0x20000120

08008654 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d105      	bne.n	8008672 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4907      	ldr	r1, [pc, #28]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800866a:	4808      	ldr	r0, [pc, #32]	; (800868c <USBD_FS_ConfigStrDescriptor+0x38>)
 800866c:	f7fe fe6a 	bl	8007344 <USBD_GetString>
 8008670:	e004      	b.n	800867c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4904      	ldr	r1, [pc, #16]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008676:	4805      	ldr	r0, [pc, #20]	; (800868c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008678:	f7fe fe64 	bl	8007344 <USBD_GetString>
  }
  return USBD_StrDesc;
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200009d8 	.word	0x200009d8
 800868c:	08008a48 	.word	0x08008a48

08008690 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	6039      	str	r1, [r7, #0]
 800869a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4907      	ldr	r1, [pc, #28]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086a6:	4808      	ldr	r0, [pc, #32]	; (80086c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a8:	f7fe fe4c 	bl	8007344 <USBD_GetString>
 80086ac:	e004      	b.n	80086b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	4904      	ldr	r1, [pc, #16]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086b2:	4805      	ldr	r0, [pc, #20]	; (80086c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086b4:	f7fe fe46 	bl	8007344 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	200009d8 	.word	0x200009d8
 80086c8:	08008a58 	.word	0x08008a58

080086cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	220c      	movs	r2, #12
 80086dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80086de:	4b03      	ldr	r3, [pc, #12]	; (80086ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	20000110 	.word	0x20000110

080086f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086f6:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <Get_SerialNum+0x44>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086fc:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <Get_SerialNum+0x48>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008702:	4b0e      	ldr	r3, [pc, #56]	; (800873c <Get_SerialNum+0x4c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008716:	2208      	movs	r2, #8
 8008718:	4909      	ldr	r1, [pc, #36]	; (8008740 <Get_SerialNum+0x50>)
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f814 	bl	8008748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008720:	2204      	movs	r2, #4
 8008722:	4908      	ldr	r1, [pc, #32]	; (8008744 <Get_SerialNum+0x54>)
 8008724:	68b8      	ldr	r0, [r7, #8]
 8008726:	f000 f80f 	bl	8008748 <IntToUnicode>
  }
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	1ff0f420 	.word	0x1ff0f420
 8008738:	1ff0f424 	.word	0x1ff0f424
 800873c:	1ff0f428 	.word	0x1ff0f428
 8008740:	20000122 	.word	0x20000122
 8008744:	20000132 	.word	0x20000132

08008748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
 800875e:	e027      	b.n	80087b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	0f1b      	lsrs	r3, r3, #28
 8008764:	2b09      	cmp	r3, #9
 8008766:	d80b      	bhi.n	8008780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	0f1b      	lsrs	r3, r3, #28
 800876c:	b2da      	uxtb	r2, r3
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	4619      	mov	r1, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	440b      	add	r3, r1
 8008778:	3230      	adds	r2, #48	; 0x30
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	e00a      	b.n	8008796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0f1b      	lsrs	r3, r3, #28
 8008784:	b2da      	uxtb	r2, r3
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	4619      	mov	r1, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	440b      	add	r3, r1
 8008790:	3237      	adds	r2, #55	; 0x37
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	3301      	adds	r3, #1
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	4413      	add	r3, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	3301      	adds	r3, #1
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	7dfa      	ldrb	r2, [r7, #23]
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d3d3      	bcc.n	8008760 <IntToUnicode+0x18>
  }
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80087c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80087c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80087ca:	e003      	b.n	80087d4 <LoopCopyDataInit>

080087cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80087cc:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80087ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80087d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80087d2:	3104      	adds	r1, #4

080087d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80087d4:	480b      	ldr	r0, [pc, #44]	; (8008804 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80087d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80087da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80087dc:	d3f6      	bcc.n	80087cc <CopyDataInit>
  ldr  r2, =_sbss
 80087de:	4a0b      	ldr	r2, [pc, #44]	; (800880c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80087e0:	e002      	b.n	80087e8 <LoopFillZerobss>

080087e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80087e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80087e4:	f842 3b04 	str.w	r3, [r2], #4

080087e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80087e8:	4b09      	ldr	r3, [pc, #36]	; (8008810 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80087ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80087ec:	d3f9      	bcc.n	80087e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80087ee:	f7ff fab9 	bl	8007d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80087f2:	f000 f817 	bl	8008824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087f6:	f7fe fe83 	bl	8007500 <main>
  bx  lr    
 80087fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80087fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008800:	08008a98 	.word	0x08008a98
  ldr  r0, =_sdata
 8008804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008808:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 800880c:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8008810:	20000bdc 	.word	0x20000bdc

08008814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008814:	e7fe      	b.n	8008814 <ADC_IRQHandler>
	...

08008818 <__errno>:
 8008818:	4b01      	ldr	r3, [pc, #4]	; (8008820 <__errno+0x8>)
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	2000013c 	.word	0x2000013c

08008824 <__libc_init_array>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	4e0d      	ldr	r6, [pc, #52]	; (800885c <__libc_init_array+0x38>)
 8008828:	4c0d      	ldr	r4, [pc, #52]	; (8008860 <__libc_init_array+0x3c>)
 800882a:	1ba4      	subs	r4, r4, r6
 800882c:	10a4      	asrs	r4, r4, #2
 800882e:	2500      	movs	r5, #0
 8008830:	42a5      	cmp	r5, r4
 8008832:	d109      	bne.n	8008848 <__libc_init_array+0x24>
 8008834:	4e0b      	ldr	r6, [pc, #44]	; (8008864 <__libc_init_array+0x40>)
 8008836:	4c0c      	ldr	r4, [pc, #48]	; (8008868 <__libc_init_array+0x44>)
 8008838:	f000 f8ea 	bl	8008a10 <_init>
 800883c:	1ba4      	subs	r4, r4, r6
 800883e:	10a4      	asrs	r4, r4, #2
 8008840:	2500      	movs	r5, #0
 8008842:	42a5      	cmp	r5, r4
 8008844:	d105      	bne.n	8008852 <__libc_init_array+0x2e>
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800884c:	4798      	blx	r3
 800884e:	3501      	adds	r5, #1
 8008850:	e7ee      	b.n	8008830 <__libc_init_array+0xc>
 8008852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008856:	4798      	blx	r3
 8008858:	3501      	adds	r5, #1
 800885a:	e7f2      	b.n	8008842 <__libc_init_array+0x1e>
 800885c:	08008a90 	.word	0x08008a90
 8008860:	08008a90 	.word	0x08008a90
 8008864:	08008a90 	.word	0x08008a90
 8008868:	08008a94 	.word	0x08008a94

0800886c <malloc>:
 800886c:	4b02      	ldr	r3, [pc, #8]	; (8008878 <malloc+0xc>)
 800886e:	4601      	mov	r1, r0
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f000 b861 	b.w	8008938 <_malloc_r>
 8008876:	bf00      	nop
 8008878:	2000013c 	.word	0x2000013c

0800887c <free>:
 800887c:	4b02      	ldr	r3, [pc, #8]	; (8008888 <free+0xc>)
 800887e:	4601      	mov	r1, r0
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f000 b80b 	b.w	800889c <_free_r>
 8008886:	bf00      	nop
 8008888:	2000013c 	.word	0x2000013c

0800888c <memset>:
 800888c:	4402      	add	r2, r0
 800888e:	4603      	mov	r3, r0
 8008890:	4293      	cmp	r3, r2
 8008892:	d100      	bne.n	8008896 <memset+0xa>
 8008894:	4770      	bx	lr
 8008896:	f803 1b01 	strb.w	r1, [r3], #1
 800889a:	e7f9      	b.n	8008890 <memset+0x4>

0800889c <_free_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4605      	mov	r5, r0
 80088a0:	2900      	cmp	r1, #0
 80088a2:	d045      	beq.n	8008930 <_free_r+0x94>
 80088a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a8:	1f0c      	subs	r4, r1, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfb8      	it	lt
 80088ae:	18e4      	addlt	r4, r4, r3
 80088b0:	f000 f8ac 	bl	8008a0c <__malloc_lock>
 80088b4:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <_free_r+0x98>)
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	4610      	mov	r0, r2
 80088ba:	b933      	cbnz	r3, 80088ca <_free_r+0x2e>
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	6014      	str	r4, [r2, #0]
 80088c0:	4628      	mov	r0, r5
 80088c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c6:	f000 b8a2 	b.w	8008a0e <__malloc_unlock>
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	d90c      	bls.n	80088e8 <_free_r+0x4c>
 80088ce:	6821      	ldr	r1, [r4, #0]
 80088d0:	1862      	adds	r2, r4, r1
 80088d2:	4293      	cmp	r3, r2
 80088d4:	bf04      	itt	eq
 80088d6:	681a      	ldreq	r2, [r3, #0]
 80088d8:	685b      	ldreq	r3, [r3, #4]
 80088da:	6063      	str	r3, [r4, #4]
 80088dc:	bf04      	itt	eq
 80088de:	1852      	addeq	r2, r2, r1
 80088e0:	6022      	streq	r2, [r4, #0]
 80088e2:	6004      	str	r4, [r0, #0]
 80088e4:	e7ec      	b.n	80088c0 <_free_r+0x24>
 80088e6:	4613      	mov	r3, r2
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	b10a      	cbz	r2, 80088f0 <_free_r+0x54>
 80088ec:	42a2      	cmp	r2, r4
 80088ee:	d9fa      	bls.n	80088e6 <_free_r+0x4a>
 80088f0:	6819      	ldr	r1, [r3, #0]
 80088f2:	1858      	adds	r0, r3, r1
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d10b      	bne.n	8008910 <_free_r+0x74>
 80088f8:	6820      	ldr	r0, [r4, #0]
 80088fa:	4401      	add	r1, r0
 80088fc:	1858      	adds	r0, r3, r1
 80088fe:	4282      	cmp	r2, r0
 8008900:	6019      	str	r1, [r3, #0]
 8008902:	d1dd      	bne.n	80088c0 <_free_r+0x24>
 8008904:	6810      	ldr	r0, [r2, #0]
 8008906:	6852      	ldr	r2, [r2, #4]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	4401      	add	r1, r0
 800890c:	6019      	str	r1, [r3, #0]
 800890e:	e7d7      	b.n	80088c0 <_free_r+0x24>
 8008910:	d902      	bls.n	8008918 <_free_r+0x7c>
 8008912:	230c      	movs	r3, #12
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	e7d3      	b.n	80088c0 <_free_r+0x24>
 8008918:	6820      	ldr	r0, [r4, #0]
 800891a:	1821      	adds	r1, r4, r0
 800891c:	428a      	cmp	r2, r1
 800891e:	bf04      	itt	eq
 8008920:	6811      	ldreq	r1, [r2, #0]
 8008922:	6852      	ldreq	r2, [r2, #4]
 8008924:	6062      	str	r2, [r4, #4]
 8008926:	bf04      	itt	eq
 8008928:	1809      	addeq	r1, r1, r0
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	605c      	str	r4, [r3, #4]
 800892e:	e7c7      	b.n	80088c0 <_free_r+0x24>
 8008930:	bd38      	pop	{r3, r4, r5, pc}
 8008932:	bf00      	nop
 8008934:	200001c4 	.word	0x200001c4

08008938 <_malloc_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	1ccd      	adds	r5, r1, #3
 800893c:	f025 0503 	bic.w	r5, r5, #3
 8008940:	3508      	adds	r5, #8
 8008942:	2d0c      	cmp	r5, #12
 8008944:	bf38      	it	cc
 8008946:	250c      	movcc	r5, #12
 8008948:	2d00      	cmp	r5, #0
 800894a:	4606      	mov	r6, r0
 800894c:	db01      	blt.n	8008952 <_malloc_r+0x1a>
 800894e:	42a9      	cmp	r1, r5
 8008950:	d903      	bls.n	800895a <_malloc_r+0x22>
 8008952:	230c      	movs	r3, #12
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	2000      	movs	r0, #0
 8008958:	bd70      	pop	{r4, r5, r6, pc}
 800895a:	f000 f857 	bl	8008a0c <__malloc_lock>
 800895e:	4a21      	ldr	r2, [pc, #132]	; (80089e4 <_malloc_r+0xac>)
 8008960:	6814      	ldr	r4, [r2, #0]
 8008962:	4621      	mov	r1, r4
 8008964:	b991      	cbnz	r1, 800898c <_malloc_r+0x54>
 8008966:	4c20      	ldr	r4, [pc, #128]	; (80089e8 <_malloc_r+0xb0>)
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	b91b      	cbnz	r3, 8008974 <_malloc_r+0x3c>
 800896c:	4630      	mov	r0, r6
 800896e:	f000 f83d 	bl	80089ec <_sbrk_r>
 8008972:	6020      	str	r0, [r4, #0]
 8008974:	4629      	mov	r1, r5
 8008976:	4630      	mov	r0, r6
 8008978:	f000 f838 	bl	80089ec <_sbrk_r>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d124      	bne.n	80089ca <_malloc_r+0x92>
 8008980:	230c      	movs	r3, #12
 8008982:	6033      	str	r3, [r6, #0]
 8008984:	4630      	mov	r0, r6
 8008986:	f000 f842 	bl	8008a0e <__malloc_unlock>
 800898a:	e7e4      	b.n	8008956 <_malloc_r+0x1e>
 800898c:	680b      	ldr	r3, [r1, #0]
 800898e:	1b5b      	subs	r3, r3, r5
 8008990:	d418      	bmi.n	80089c4 <_malloc_r+0x8c>
 8008992:	2b0b      	cmp	r3, #11
 8008994:	d90f      	bls.n	80089b6 <_malloc_r+0x7e>
 8008996:	600b      	str	r3, [r1, #0]
 8008998:	50cd      	str	r5, [r1, r3]
 800899a:	18cc      	adds	r4, r1, r3
 800899c:	4630      	mov	r0, r6
 800899e:	f000 f836 	bl	8008a0e <__malloc_unlock>
 80089a2:	f104 000b 	add.w	r0, r4, #11
 80089a6:	1d23      	adds	r3, r4, #4
 80089a8:	f020 0007 	bic.w	r0, r0, #7
 80089ac:	1ac3      	subs	r3, r0, r3
 80089ae:	d0d3      	beq.n	8008958 <_malloc_r+0x20>
 80089b0:	425a      	negs	r2, r3
 80089b2:	50e2      	str	r2, [r4, r3]
 80089b4:	e7d0      	b.n	8008958 <_malloc_r+0x20>
 80089b6:	428c      	cmp	r4, r1
 80089b8:	684b      	ldr	r3, [r1, #4]
 80089ba:	bf16      	itet	ne
 80089bc:	6063      	strne	r3, [r4, #4]
 80089be:	6013      	streq	r3, [r2, #0]
 80089c0:	460c      	movne	r4, r1
 80089c2:	e7eb      	b.n	800899c <_malloc_r+0x64>
 80089c4:	460c      	mov	r4, r1
 80089c6:	6849      	ldr	r1, [r1, #4]
 80089c8:	e7cc      	b.n	8008964 <_malloc_r+0x2c>
 80089ca:	1cc4      	adds	r4, r0, #3
 80089cc:	f024 0403 	bic.w	r4, r4, #3
 80089d0:	42a0      	cmp	r0, r4
 80089d2:	d005      	beq.n	80089e0 <_malloc_r+0xa8>
 80089d4:	1a21      	subs	r1, r4, r0
 80089d6:	4630      	mov	r0, r6
 80089d8:	f000 f808 	bl	80089ec <_sbrk_r>
 80089dc:	3001      	adds	r0, #1
 80089de:	d0cf      	beq.n	8008980 <_malloc_r+0x48>
 80089e0:	6025      	str	r5, [r4, #0]
 80089e2:	e7db      	b.n	800899c <_malloc_r+0x64>
 80089e4:	200001c4 	.word	0x200001c4
 80089e8:	200001c8 	.word	0x200001c8

080089ec <_sbrk_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4c06      	ldr	r4, [pc, #24]	; (8008a08 <_sbrk_r+0x1c>)
 80089f0:	2300      	movs	r3, #0
 80089f2:	4605      	mov	r5, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	f7ff f988 	bl	8007d0c <_sbrk>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d102      	bne.n	8008a06 <_sbrk_r+0x1a>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	b103      	cbz	r3, 8008a06 <_sbrk_r+0x1a>
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	20000bd8 	.word	0x20000bd8

08008a0c <__malloc_lock>:
 8008a0c:	4770      	bx	lr

08008a0e <__malloc_unlock>:
 8008a0e:	4770      	bx	lr

08008a10 <_init>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr

08008a1c <_fini>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	bf00      	nop
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr
