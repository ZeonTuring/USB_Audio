
BluePitch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b08  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f20  08008f20  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08008f20  08008f20  00018f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f28  08008f28  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  20000190  080090c0  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00005004  20000b64  080090c0  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a71  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039eb  00000000  00000000  00038c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  0003c620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  0003d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c67  00000000  00000000  0003e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015e29  00000000  00000000  0005825f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a8d7  00000000  00000000  0006e088  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f895f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  000f89dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000190 	.word	0x20000190
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008c84 	.word	0x08008c84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000194 	.word	0x20000194
 80001d0:	08008c84 	.word	0x08008c84

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x3c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200f      	movs	r0, #15
 80004fc:	f000 fcf8 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000500:	200f      	movs	r0, #15
 8000502:	f000 fd21 	bl	8000f48 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <MX_GPIO_Init+0x110>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a3c      	ldr	r2, [pc, #240]	; (8000624 <MX_GPIO_Init+0x110>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <MX_GPIO_Init+0x110>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4b36      	ldr	r3, [pc, #216]	; (8000624 <MX_GPIO_Init+0x110>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a35      	ldr	r2, [pc, #212]	; (8000624 <MX_GPIO_Init+0x110>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b33      	ldr	r3, [pc, #204]	; (8000624 <MX_GPIO_Init+0x110>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <MX_GPIO_Init+0x110>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <MX_GPIO_Init+0x110>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <MX_GPIO_Init+0x110>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <MX_GPIO_Init+0x110>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a27      	ldr	r2, [pc, #156]	; (8000624 <MX_GPIO_Init+0x110>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_GPIO_Init+0x110>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_GPIO_Init+0x110>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MX_GPIO_Init+0x110>)
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_GPIO_Init+0x110>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4817      	ldr	r0, [pc, #92]	; (8000628 <MX_GPIO_Init+0x114>)
 80005cc:	f001 fa3a 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005d0:	2304      	movs	r3, #4
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	4812      	ldr	r0, [pc, #72]	; (800062c <MX_GPIO_Init+0x118>)
 80005e4:	f001 fa2e 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005e8:	2308      	movs	r3, #8
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <MX_GPIO_Init+0x11c>)
 80005fc:	f001 fa22 	bl	8001a44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4806      	ldr	r0, [pc, #24]	; (8000630 <MX_GPIO_Init+0x11c>)
 8000616:	f001 fa15 	bl	8001a44 <HAL_GPIO_Init>

}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40020800 	.word	0x40020800
 800062c:	40020c00 	.word	0x40020c00
 8000630:	40020400 	.word	0x40020400

08000634 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f001 fcab 	bl	8001fcc <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f9cc 	bl	8000a18 <Error_Handler>
  }

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001bc 	.word	0x200001bc
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <HAL_I2C_MspInit+0x84>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d12b      	bne.n	800070a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ce:	23c0      	movs	r3, #192	; 0xc0
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d2:	2312      	movs	r3, #18
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006de:	2304      	movs	r3, #4
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <HAL_I2C_MspInit+0x8c>)
 80006ea:	f001 f9ab 	bl	8001a44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_I2C_MspInit+0x88>)
 80006f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_I2C_MspInit+0x88>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40005400 	.word	0x40005400
 8000718:	40023800 	.word	0x40023800
 800071c:	40020400 	.word	0x40020400

08000720 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_I2S2_Init+0x54>)
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_I2S2_Init+0x58>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2S2_Init+0x54>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_LSB;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_I2S2_Init+0x54>)
 8000734:	2220      	movs	r2, #32
 8000736:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2S2_Init+0x54>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_I2S2_Init+0x54>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_I2S2_Init+0x54>)
 8000748:	f64a 4244 	movw	r2, #44100	; 0xac44
 800074c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2S2_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2S2_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2S2_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2S2_Init+0x54>)
 8000762:	f001 fdf3 	bl	800234c <HAL_I2S_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800076c:	f000 f954 	bl	8000a18 <Error_Handler>
  }

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000270 	.word	0x20000270
 8000778:	40003800 	.word	0x40003800

0800077c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a46      	ldr	r2, [pc, #280]	; (80008b4 <HAL_I2S_MspInit+0x138>)
 800079a:	4293      	cmp	r3, r2
 800079c:	f040 8085 	bne.w	80008aa <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a43      	ldr	r2, [pc, #268]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a35      	ldr	r2, [pc, #212]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
 80007e8:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <HAL_I2S_MspInit+0x13c>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80007f4:	2348      	movs	r3, #72	; 0x48
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000804:	2305      	movs	r3, #5
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	482b      	ldr	r0, [pc, #172]	; (80008bc <HAL_I2S_MspInit+0x140>)
 8000810:	f001 f918 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000814:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000826:	2305      	movs	r3, #5
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4823      	ldr	r0, [pc, #140]	; (80008c0 <HAL_I2S_MspInit+0x144>)
 8000832:	f001 f907 	bl	8001a44 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000838:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <HAL_I2S_MspInit+0x14c>)
 800083a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000844:	2240      	movs	r2, #64	; 0x40
 8000846:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000854:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800085c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000864:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000870:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000874:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000878:	2204      	movs	r2, #4
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 800087e:	2203      	movs	r2, #3
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 8000890:	f000 fb7e 	bl	8000f90 <HAL_DMA_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_I2S_MspInit+0x122>
    {
      Error_Handler();
 800089a:	f000 f8bd 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 80008a2:	639a      	str	r2, [r3, #56]	; 0x38
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_I2S_MspInit+0x148>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40003800 	.word	0x40003800
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020400 	.word	0x40020400
 80008c4:	20000210 	.word	0x20000210
 80008c8:	40026070 	.word	0x40026070

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 f98a 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f81a 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f7ff fe1c 	bl	8000514 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <main+0x3c>)
 80008e4:	f001 fb40 	bl	8001f68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <main+0x3c>)
 80008f0:	f001 fb3a 	bl	8001f68 <HAL_GPIO_WritePin>

  MX_DMA_Init();
 80008f4:	f7ff fdee 	bl	80004d4 <MX_DMA_Init>
  MX_I2S2_Init();
 80008f8:	f7ff ff12 	bl	8000720 <MX_I2S2_Init>

  MX_USB_DEVICE_Init();
 80008fc:	f007 fc10 	bl	8008120 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000900:	f7ff fe98 	bl	8000634 <MX_I2C1_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000904:	e7fe      	b.n	8000904 <main+0x38>
 8000906:	bf00      	nop
 8000908:	40020400 	.word	0x40020400

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b098      	sub	sp, #96	; 0x60
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000916:	2230      	movs	r2, #48	; 0x30
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f008 f8f0 	bl	8008b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <SystemClock_Config+0x104>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <SystemClock_Config+0x104>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <SystemClock_Config+0x104>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <SystemClock_Config+0x108>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000968:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <SystemClock_Config+0x108>)
 800096a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0x108>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	2301      	movs	r3, #1
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000980:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000990:	2319      	movs	r3, #25
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000994:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000998:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800099a:	2304      	movs	r3, #4
 800099c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800099e:	2307      	movs	r3, #7
 80009a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fd38 	bl	800441c <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009b2:	f000 f831 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	2102      	movs	r1, #2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 f842 	bl	8004a5c <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80009de:	f000 f81b 	bl	8000a18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80009e6:	f240 130f 	movw	r3, #271	; 0x10f
 80009ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fab9 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000a00:	f000 f80a 	bl	8000a18 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8000a04:	f004 f9b8 	bl	8004d78 <HAL_RCC_EnableCSS>
}
 8000a08:	bf00      	nop
 8000a0a:	3760      	adds	r7, #96	; 0x60
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a90:	f004 fa50 	bl	8004f34 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <HardFault_Handler+0x4>

08000a9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aaa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f8d5 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <DMA1_Stream4_IRQHandler+0x10>)
 8000aee:	f000 fd41 	bl	8001574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000210 	.word	0x20000210

08000afc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <OTG_FS_IRQHandler+0x10>)
 8000b02:	f002 fc68 	bl	80033d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000758 	.word	0x20000758

08000b10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x50>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x16>
		heap_end = &end;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <_sbrk+0x50>)
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <_sbrk+0x54>)
 8000b24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <_sbrk+0x50>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <_sbrk+0x50>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	466a      	mov	r2, sp
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d907      	bls.n	8000b4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b3a:	f007 ffa7 	bl	8008a8c <__errno>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	230c      	movs	r3, #12
 8000b42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	e006      	b.n	8000b58 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_sbrk+0x50>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_sbrk+0x50>)
 8000b54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200001ac 	.word	0x200001ac
 8000b64:	20000b68 	.word	0x20000b68

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <SystemInit+0x28>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <SystemInit+0x28>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SystemInit+0x28>)
 8000b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b82:	609a      	str	r2, [r3, #8]
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b9a:	e003      	b.n	8000ba4 <LoopCopyDataInit>

08000b9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ba0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ba2:	3104      	adds	r1, #4

08000ba4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ba8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000baa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bac:	d3f6      	bcc.n	8000b9c <CopyDataInit>
  ldr  r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bb0:	e002      	b.n	8000bb8 <LoopFillZerobss>

08000bb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bb4:	f842 3b04 	str.w	r3, [r2], #4

08000bb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bbc:	d3f9      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd3 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f007 ff69 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fe81 	bl	80008cc <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000bd0:	08008f30 	.word	0x08008f30
  ldr  r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bd8:	20000190 	.word	0x20000190
  ldr  r2, =_sbss
 8000bdc:	20000190 	.word	0x20000190
  ldr  r3, = _ebss
 8000be0:	20000b64 	.word	0x20000b64

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f94d 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff ff0e 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f994 	bl	8000f78 <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f942 	bl	8000ef0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200002b8 	.word	0x200002b8

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200002b8 	.word	0x200002b8

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_Delay+0x40>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000008 	.word	0x20000008

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	d00f      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d00c      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d009      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d006      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d003      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ed6:	2192      	movs	r1, #146	; 0x92
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000eda:	f7ff fda4 	bl	8000a26 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff16 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	08008c9c 	.word	0x08008c9c

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d903      	bls.n	8000f10 <HAL_NVIC_SetPriority+0x20>
 8000f08:	21aa      	movs	r1, #170	; 0xaa
 8000f0a:	480e      	ldr	r0, [pc, #56]	; (8000f44 <HAL_NVIC_SetPriority+0x54>)
 8000f0c:	f7ff fd8b 	bl	8000a26 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	d903      	bls.n	8000f1e <HAL_NVIC_SetPriority+0x2e>
 8000f16:	21ab      	movs	r1, #171	; 0xab
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <HAL_NVIC_SetPriority+0x54>)
 8000f1a:	f7ff fd84 	bl	8000a26 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1e:	f7ff ff1b 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000f22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff ff6b 	bl	8000e04 <NVIC_EncodePriority>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff3a 	bl	8000db0 <__NVIC_SetPriority>
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08008c9c 	.word	0x08008c9c

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da03      	bge.n	8000f62 <HAL_NVIC_EnableIRQ+0x1a>
 8000f5a:	21be      	movs	r1, #190	; 0xbe
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_NVIC_EnableIRQ+0x2c>)
 8000f5e:	f7ff fd62 	bl	8000a26 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff04 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08008c9c 	.word	0x08008c9c

08000f78 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff73 	bl	8000e6c <SysTick_Config>
 8000f86:	4603      	mov	r3, r0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff fe8a 	bl	8000cb4 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e204      	b.n	80013b6 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a97      	ldr	r2, [pc, #604]	; (8001210 <HAL_DMA_Init+0x280>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d04e      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a96      	ldr	r2, [pc, #600]	; (8001214 <HAL_DMA_Init+0x284>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d049      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a94      	ldr	r2, [pc, #592]	; (8001218 <HAL_DMA_Init+0x288>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d044      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a93      	ldr	r2, [pc, #588]	; (800121c <HAL_DMA_Init+0x28c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d03f      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a91      	ldr	r2, [pc, #580]	; (8001220 <HAL_DMA_Init+0x290>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d03a      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a90      	ldr	r2, [pc, #576]	; (8001224 <HAL_DMA_Init+0x294>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d035      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a8e      	ldr	r2, [pc, #568]	; (8001228 <HAL_DMA_Init+0x298>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d030      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a8d      	ldr	r2, [pc, #564]	; (800122c <HAL_DMA_Init+0x29c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d02b      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a8b      	ldr	r2, [pc, #556]	; (8001230 <HAL_DMA_Init+0x2a0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d026      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a8a      	ldr	r2, [pc, #552]	; (8001234 <HAL_DMA_Init+0x2a4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d021      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a88      	ldr	r2, [pc, #544]	; (8001238 <HAL_DMA_Init+0x2a8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01c      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_DMA_Init+0x2ac>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d017      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a85      	ldr	r2, [pc, #532]	; (8001240 <HAL_DMA_Init+0x2b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d012      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a84      	ldr	r2, [pc, #528]	; (8001244 <HAL_DMA_Init+0x2b4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d00d      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a82      	ldr	r2, [pc, #520]	; (8001248 <HAL_DMA_Init+0x2b8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d008      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a81      	ldr	r2, [pc, #516]	; (800124c <HAL_DMA_Init+0x2bc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_DMA_Init+0xc4>
 800104c:	21b8      	movs	r1, #184	; 0xb8
 800104e:	4880      	ldr	r0, [pc, #512]	; (8001250 <HAL_DMA_Init+0x2c0>)
 8001050:	f7ff fce9 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d026      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001064:	d021      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800106e:	d01c      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001078:	d017      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001082:	d012      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800108c:	d00d      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001096:	d008      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80010a0:	d003      	beq.n	80010aa <HAL_DMA_Init+0x11a>
 80010a2:	21b9      	movs	r1, #185	; 0xb9
 80010a4:	486a      	ldr	r0, [pc, #424]	; (8001250 <HAL_DMA_Init+0x2c0>)
 80010a6:	f7ff fcbe 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_DMA_Init+0x13a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b40      	cmp	r3, #64	; 0x40
 80010b8:	d007      	beq.n	80010ca <HAL_DMA_Init+0x13a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b80      	cmp	r3, #128	; 0x80
 80010c0:	d003      	beq.n	80010ca <HAL_DMA_Init+0x13a>
 80010c2:	21ba      	movs	r1, #186	; 0xba
 80010c4:	4862      	ldr	r0, [pc, #392]	; (8001250 <HAL_DMA_Init+0x2c0>)
 80010c6:	f7ff fcae 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d2:	d007      	beq.n	80010e4 <HAL_DMA_Init+0x154>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_DMA_Init+0x154>
 80010dc:	21bb      	movs	r1, #187	; 0xbb
 80010de:	485c      	ldr	r0, [pc, #368]	; (8001250 <HAL_DMA_Init+0x2c0>)
 80010e0:	f7ff fca1 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ec:	d007      	beq.n	80010fe <HAL_DMA_Init+0x16e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_DMA_Init+0x16e>
 80010f6:	21bc      	movs	r1, #188	; 0xbc
 80010f8:	4855      	ldr	r0, [pc, #340]	; (8001250 <HAL_DMA_Init+0x2c0>)
 80010fa:	f7ff fc94 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <HAL_DMA_Init+0x192>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800110e:	d008      	beq.n	8001122 <HAL_DMA_Init+0x192>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001118:	d003      	beq.n	8001122 <HAL_DMA_Init+0x192>
 800111a:	21bd      	movs	r1, #189	; 0xbd
 800111c:	484c      	ldr	r0, [pc, #304]	; (8001250 <HAL_DMA_Init+0x2c0>)
 800111e:	f7ff fc82 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00d      	beq.n	8001146 <HAL_DMA_Init+0x1b6>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001132:	d008      	beq.n	8001146 <HAL_DMA_Init+0x1b6>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800113c:	d003      	beq.n	8001146 <HAL_DMA_Init+0x1b6>
 800113e:	21be      	movs	r1, #190	; 0xbe
 8001140:	4843      	ldr	r0, [pc, #268]	; (8001250 <HAL_DMA_Init+0x2c0>)
 8001142:	f7ff fc70 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00c      	beq.n	8001168 <HAL_DMA_Init+0x1d8>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001156:	d007      	beq.n	8001168 <HAL_DMA_Init+0x1d8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b20      	cmp	r3, #32
 800115e:	d003      	beq.n	8001168 <HAL_DMA_Init+0x1d8>
 8001160:	21bf      	movs	r1, #191	; 0xbf
 8001162:	483b      	ldr	r0, [pc, #236]	; (8001250 <HAL_DMA_Init+0x2c0>)
 8001164:	f7ff fc5f 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d012      	beq.n	8001196 <HAL_DMA_Init+0x206>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d00d      	beq.n	8001196 <HAL_DMA_Init+0x206>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001182:	d008      	beq.n	8001196 <HAL_DMA_Init+0x206>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800118c:	d003      	beq.n	8001196 <HAL_DMA_Init+0x206>
 800118e:	21c0      	movs	r1, #192	; 0xc0
 8001190:	482f      	ldr	r0, [pc, #188]	; (8001250 <HAL_DMA_Init+0x2c0>)
 8001192:	f7ff fc48 	bl	8000a26 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_DMA_Init+0x21e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d003      	beq.n	80011ae <HAL_DMA_Init+0x21e>
 80011a6:	21c1      	movs	r1, #193	; 0xc1
 80011a8:	4829      	ldr	r0, [pc, #164]	; (8001250 <HAL_DMA_Init+0x2c0>)
 80011aa:	f7ff fc3c 	bl	8000a26 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d065      	beq.n	8001282 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00f      	beq.n	80011de <HAL_DMA_Init+0x24e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d00b      	beq.n	80011de <HAL_DMA_Init+0x24e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d007      	beq.n	80011de <HAL_DMA_Init+0x24e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d003      	beq.n	80011de <HAL_DMA_Init+0x24e>
 80011d6:	21c6      	movs	r1, #198	; 0xc6
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <HAL_DMA_Init+0x2c0>)
 80011da:	f7ff fc24 	bl	8000a26 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d036      	beq.n	8001254 <HAL_DMA_Init+0x2c4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80011ee:	d031      	beq.n	8001254 <HAL_DMA_Init+0x2c4>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d02c      	beq.n	8001254 <HAL_DMA_Init+0x2c4>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001202:	d027      	beq.n	8001254 <HAL_DMA_Init+0x2c4>
 8001204:	21c7      	movs	r1, #199	; 0xc7
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <HAL_DMA_Init+0x2c0>)
 8001208:	f7ff fc0d 	bl	8000a26 <assert_failed>
 800120c:	e022      	b.n	8001254 <HAL_DMA_Init+0x2c4>
 800120e:	bf00      	nop
 8001210:	40026010 	.word	0x40026010
 8001214:	40026028 	.word	0x40026028
 8001218:	40026040 	.word	0x40026040
 800121c:	40026058 	.word	0x40026058
 8001220:	40026070 	.word	0x40026070
 8001224:	40026088 	.word	0x40026088
 8001228:	400260a0 	.word	0x400260a0
 800122c:	400260b8 	.word	0x400260b8
 8001230:	40026410 	.word	0x40026410
 8001234:	40026428 	.word	0x40026428
 8001238:	40026440 	.word	0x40026440
 800123c:	40026458 	.word	0x40026458
 8001240:	40026470 	.word	0x40026470
 8001244:	40026488 	.word	0x40026488
 8001248:	400264a0 	.word	0x400264a0
 800124c:	400264b8 	.word	0x400264b8
 8001250:	08008cd8 	.word	0x08008cd8
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	2b00      	cmp	r3, #0
 800125a:	d012      	beq.n	8001282 <HAL_DMA_Init+0x2f2>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001264:	d00d      	beq.n	8001282 <HAL_DMA_Init+0x2f2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126e:	d008      	beq.n	8001282 <HAL_DMA_Init+0x2f2>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001278:	d003      	beq.n	8001282 <HAL_DMA_Init+0x2f2>
 800127a:	21c8      	movs	r1, #200	; 0xc8
 800127c:	4850      	ldr	r0, [pc, #320]	; (80013c0 <HAL_DMA_Init+0x430>)
 800127e:	f7ff fbd2 	bl	8000a26 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2202      	movs	r2, #2
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a2:	e00f      	b.n	80012c4 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012a4:	f7ff fd06 	bl	8000cb4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d908      	bls.n	80012c4 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2220      	movs	r2, #32
 80012b6:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2203      	movs	r2, #3
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e078      	b.n	80013b6 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1e8      	bne.n	80012a4 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_DMA_Init+0x434>)
 80012de:	4013      	ands	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	4313      	orrs	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2b04      	cmp	r3, #4
 800131c:	d107      	bne.n	800132e <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4313      	orrs	r3, r2
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	4313      	orrs	r3, r2
 800132c:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f023 0307 	bic.w	r3, r3, #7
 8001344:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b04      	cmp	r3, #4
 8001356:	d117      	bne.n	8001388 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	4313      	orrs	r3, r2
 8001360:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00e      	beq.n	8001388 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 faf0 	bl	8001950 <DMA_CheckFifoParam>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2240      	movs	r2, #64	; 0x40
 800137a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001384:	2301      	movs	r3, #1
 8001386:	e016      	b.n	80013b6 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 faa7 	bl	80018e4 <DMA_CalcBaseAndBitshift>
 8001396:	4603      	mov	r3, r0
 8001398:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	223f      	movs	r2, #63	; 0x3f
 80013a0:	409a      	lsls	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	08008cd8 	.word	0x08008cd8
 80013c4:	f010803f 	.word	0xf010803f

080013c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_DMA_Start_IT+0x26>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ec:	d304      	bcc.n	80013f8 <HAL_DMA_Start_IT+0x30>
 80013ee:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80013f2:	4827      	ldr	r0, [pc, #156]	; (8001490 <HAL_DMA_Start_IT+0xc8>)
 80013f4:	f7ff fb17 	bl	8000a26 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_DMA_Start_IT+0x3e>
 8001402:	2302      	movs	r3, #2
 8001404:	e040      	b.n	8001488 <HAL_DMA_Start_IT+0xc0>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d12f      	bne.n	800147a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2202      	movs	r2, #2
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fa2a 	bl	8001888 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	223f      	movs	r2, #63	; 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0216 	orr.w	r2, r2, #22
 800144e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e005      	b.n	8001486 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001482:	2302      	movs	r3, #2
 8001484:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	08008cd8 	.word	0x08008cd8

08001494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014a2:	f7ff fc07 	bl	8000cb4 <HAL_GetTick>
 80014a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d008      	beq.n	80014c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e052      	b.n	800156c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0216 	bic.w	r2, r2, #22
 80014d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_DMA_Abort+0x62>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0208 	bic.w	r2, r2, #8
 8001504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001516:	e013      	b.n	8001540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001518:	f7ff fbcc 	bl	8000cb4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b05      	cmp	r3, #5
 8001524:	d90c      	bls.n	8001540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2203      	movs	r2, #3
 8001538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e015      	b.n	800156c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1e4      	bne.n	8001518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	223f      	movs	r2, #63	; 0x3f
 8001554:	409a      	lsls	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_DMA_IRQHandler+0x258>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a92      	ldr	r2, [pc, #584]	; (80017d0 <HAL_DMA_IRQHandler+0x25c>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0a9b      	lsrs	r3, r3, #10
 800158c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	2208      	movs	r2, #8
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01a      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2208      	movs	r2, #8
 80015ce:	409a      	lsls	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2201      	movs	r2, #1
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d012      	beq.n	8001616 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2201      	movs	r2, #1
 8001604:	409a      	lsls	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f043 0202 	orr.w	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	2204      	movs	r2, #4
 800161c:	409a      	lsls	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00b      	beq.n	800164c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2204      	movs	r2, #4
 800163a:	409a      	lsls	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001644:	f043 0204 	orr.w	r2, r3, #4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2210      	movs	r2, #16
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d043      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d03c      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2210      	movs	r2, #16
 8001670:	409a      	lsls	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d018      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d108      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d024      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
 80016a2:	e01f      	b.n	80016e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01b      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e016      	b.n	80016e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0208 	bic.w	r2, r2, #8
 80016d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	2220      	movs	r2, #32
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 808e 	beq.w	8001812 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8086 	beq.w	8001812 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170a:	2220      	movs	r2, #32
 800170c:	409a      	lsls	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b05      	cmp	r3, #5
 800171c:	d136      	bne.n	800178c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0216 	bic.w	r2, r2, #22
 800172c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800173c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <HAL_DMA_IRQHandler+0x1da>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0208 	bic.w	r2, r2, #8
 800175c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	223f      	movs	r2, #63	; 0x3f
 8001764:	409a      	lsls	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177e:	2b00      	cmp	r3, #0
 8001780:	d07d      	beq.n	800187e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	4798      	blx	r3
        }
        return;
 800178a:	e078      	b.n	800187e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01c      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d108      	bne.n	80017ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d030      	beq.n	8001812 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
 80017b8:	e02b      	b.n	8001812 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d027      	beq.n	8001812 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
 80017ca:	e022      	b.n	8001812 <HAL_DMA_IRQHandler+0x29e>
 80017cc:	20000000 	.word	0x20000000
 80017d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10f      	bne.n	8001802 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0210 	bic.w	r2, r2, #16
 80017f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	2b00      	cmp	r3, #0
 8001818:	d032      	beq.n	8001880 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d022      	beq.n	800186c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2205      	movs	r2, #5
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	429a      	cmp	r2, r3
 8001848:	d307      	bcc.n	800185a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f2      	bne.n	800183e <HAL_DMA_IRQHandler+0x2ca>
 8001858:	e000      	b.n	800185c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800185a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
 800187c:	e000      	b.n	8001880 <HAL_DMA_IRQHandler+0x30c>
        return;
 800187e:	bf00      	nop
    }
  }
}
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop

08001888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d108      	bne.n	80018c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018c6:	e007      	b.n	80018d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3b10      	subs	r3, #16
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <DMA_CalcBaseAndBitshift+0x64>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <DMA_CalcBaseAndBitshift+0x68>)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d909      	bls.n	8001926 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	1d1a      	adds	r2, r3, #4
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58
 8001924:	e007      	b.n	8001936 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192e:	f023 0303 	bic.w	r3, r3, #3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	aaaaaaab 	.word	0xaaaaaaab
 800194c:	08008eb8 	.word	0x08008eb8

08001950 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11f      	bne.n	80019aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d855      	bhi.n	8001a1c <DMA_CheckFifoParam+0xcc>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <DMA_CheckFifoParam+0x28>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	0800199b 	.word	0x0800199b
 8001980:	08001989 	.word	0x08001989
 8001984:	08001a1d 	.word	0x08001a1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d045      	beq.n	8001a20 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001998:	e042      	b.n	8001a20 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019a2:	d13f      	bne.n	8001a24 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a8:	e03c      	b.n	8001a24 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b2:	d121      	bne.n	80019f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d836      	bhi.n	8001a28 <DMA_CheckFifoParam+0xd8>
 80019ba:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <DMA_CheckFifoParam+0x70>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	080019d7 	.word	0x080019d7
 80019c8:	080019d1 	.word	0x080019d1
 80019cc:	080019e9 	.word	0x080019e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      break;
 80019d4:	e02f      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d024      	beq.n	8001a2c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e6:	e021      	b.n	8001a2c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f0:	d11e      	bne.n	8001a30 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019f6:	e01b      	b.n	8001a30 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d902      	bls.n	8001a04 <DMA_CheckFifoParam+0xb4>
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d003      	beq.n	8001a0a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a02:	e018      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
      break;
 8001a08:	e015      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00e      	beq.n	8001a34 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
      break;
 8001a1a:	e00b      	b.n	8001a34 <DMA_CheckFifoParam+0xe4>
      break;
 8001a1c:	bf00      	nop
 8001a1e:	e00a      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;
 8001a20:	bf00      	nop
 8001a22:	e008      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;
 8001a24:	bf00      	nop
 8001a26:	e006      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;
 8001a28:	bf00      	nop
 8001a2a:	e004      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;
 8001a2c:	bf00      	nop
 8001a2e:	e002      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;
 8001a34:	bf00      	nop
    }
  } 
  
  return status; 
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <HAL_GPIO_Init+0x108>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d017      	beq.n	8001a92 <HAL_GPIO_Init+0x4e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <HAL_GPIO_Init+0x10c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x4e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a39      	ldr	r2, [pc, #228]	; (8001b54 <HAL_GPIO_Init+0x110>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00f      	beq.n	8001a92 <HAL_GPIO_Init+0x4e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_GPIO_Init+0x114>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00b      	beq.n	8001a92 <HAL_GPIO_Init+0x4e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x118>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x4e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HAL_GPIO_Init+0x11c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x4e>
 8001a8a:	21b3      	movs	r1, #179	; 0xb3
 8001a8c:	4835      	ldr	r0, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x120>)
 8001a8e:	f7fe ffca 	bl	8000a26 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_GPIO_Init+0x64>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x6c>
 8001aa8:	21b4      	movs	r1, #180	; 0xb4
 8001aaa:	482e      	ldr	r0, [pc, #184]	; (8001b64 <HAL_GPIO_Init+0x120>)
 8001aac:	f7fe ffbb 	bl	8000a26 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d035      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d031      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b11      	cmp	r3, #17
 8001ac6:	d02d      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d029      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b12      	cmp	r3, #18
 8001ad6:	d025      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_GPIO_Init+0x124>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d020      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_GPIO_Init+0x128>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d01b      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_GPIO_Init+0x12c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d016      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_GPIO_Init+0x130>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d011      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_GPIO_Init+0x134>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00c      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_GPIO_Init+0x138>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0xe0>
 8001b1c:	21b5      	movs	r1, #181	; 0xb5
 8001b1e:	4811      	ldr	r0, [pc, #68]	; (8001b64 <HAL_GPIO_Init+0x120>)
 8001b20:	f7fe ff81 	bl	8000a26 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_GPIO_Init+0x100>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d007      	beq.n	8001b44 <HAL_GPIO_Init+0x100>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x100>
 8001b3c:	21b6      	movs	r1, #182	; 0xb6
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_GPIO_Init+0x120>)
 8001b40:	f7fe ff71 	bl	8000a26 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	e201      	b.n	8001f4e <HAL_GPIO_Init+0x50a>
 8001b4a:	bf00      	nop
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40021c00 	.word	0x40021c00
 8001b64:	08008d10 	.word	0x08008d10
 8001b68:	10110000 	.word	0x10110000
 8001b6c:	10210000 	.word	0x10210000
 8001b70:	10310000 	.word	0x10310000
 8001b74:	10120000 	.word	0x10120000
 8001b78:	10220000 	.word	0x10220000
 8001b7c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 81d5 	bne.w	8001f48 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d00b      	beq.n	8001bbe <HAL_GPIO_Init+0x17a>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb2:	2b11      	cmp	r3, #17
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b12      	cmp	r3, #18
 8001bbc:	d144      	bne.n	8001c48 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00f      	beq.n	8001be6 <HAL_GPIO_Init+0x1a2>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d00b      	beq.n	8001be6 <HAL_GPIO_Init+0x1a2>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x1a2>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x1a2>
 8001bde:	21c8      	movs	r1, #200	; 0xc8
 8001be0:	489e      	ldr	r0, [pc, #632]	; (8001e5c <HAL_GPIO_Init+0x418>)
 8001be2:	f7fe ff20 	bl	8000a26 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d004      	beq.n	8001c8a <HAL_GPIO_Init+0x246>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	f040 808c 	bne.w	8001da2 <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d05f      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d05b      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d057      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d053      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d04f      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d04b      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d047      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d043      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d03f      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d03b      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d037      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d033      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d02f      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d02b      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d027      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d023      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b07      	cmp	r3, #7
 8001d20:	d01b      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b07      	cmp	r3, #7
 8001d28:	d017      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b0a      	cmp	r3, #10
 8001d38:	d00f      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b09      	cmp	r3, #9
 8001d40:	d00b      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x316>
 8001d52:	21e0      	movs	r1, #224	; 0xe0
 8001d54:	4841      	ldr	r0, [pc, #260]	; (8001e5c <HAL_GPIO_Init+0x418>)
 8001d56:	f7fe fe66 	bl	8000a26 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	69b9      	ldr	r1, [r7, #24]
 8001d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0203 	and.w	r2, r3, #3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80b2 	beq.w	8001f48 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_GPIO_Init+0x41c>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_GPIO_Init+0x41c>)
 8001dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df2:	6453      	str	r3, [r2, #68]	; 0x44
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x41c>)
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x420>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a10      	ldr	r2, [pc, #64]	; (8001e68 <HAL_GPIO_Init+0x424>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d029      	beq.n	8001e80 <HAL_GPIO_Init+0x43c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <HAL_GPIO_Init+0x428>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d023      	beq.n	8001e7c <HAL_GPIO_Init+0x438>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_GPIO_Init+0x42c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x414>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_GPIO_Init+0x430>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x410>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_GPIO_Init+0x434>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x40c>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e018      	b.n	8001e82 <HAL_GPIO_Init+0x43e>
 8001e50:	2307      	movs	r3, #7
 8001e52:	e016      	b.n	8001e82 <HAL_GPIO_Init+0x43e>
 8001e54:	2303      	movs	r3, #3
 8001e56:	e014      	b.n	8001e82 <HAL_GPIO_Init+0x43e>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e012      	b.n	8001e82 <HAL_GPIO_Init+0x43e>
 8001e5c:	08008d10 	.word	0x08008d10
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_GPIO_Init+0x43e>
 8001e80:	2300      	movs	r3, #0
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e92:	4933      	ldr	r1, [pc, #204]	; (8001f60 <HAL_GPIO_Init+0x51c>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_GPIO_Init+0x520>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	f67f ae15 	bls.w	8001b80 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8001f56:	bf00      	nop
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40013c00 	.word	0x40013c00

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_GPIO_WritePin+0x20>
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <HAL_GPIO_WritePin+0x2a>
 8001f88:	f240 119f 	movw	r1, #415	; 0x19f
 8001f8c:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_GPIO_WritePin+0x60>)
 8001f8e:	f7fe fd4a 	bl	8000a26 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001f92:	787b      	ldrb	r3, [r7, #1]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_WritePin+0x40>
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d004      	beq.n	8001fa8 <HAL_GPIO_WritePin+0x40>
 8001f9e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <HAL_GPIO_WritePin+0x60>)
 8001fa4:	f7fe fd3f 	bl	8000a26 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08008d10 	.word	0x08008d10

08001fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1b1      	b.n	8002342 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4aa2      	ldr	r2, [pc, #648]	; (800226c <HAL_I2C_Init+0x2a0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_I2C_Init+0x3a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4aa0      	ldr	r2, [pc, #640]	; (8002270 <HAL_I2C_Init+0x2a4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_I2C_Init+0x3a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a9f      	ldr	r2, [pc, #636]	; (8002274 <HAL_I2C_Init+0x2a8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_I2C_Init+0x3a>
 8001ffc:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002000:	489d      	ldr	r0, [pc, #628]	; (8002278 <HAL_I2C_Init+0x2ac>)
 8002002:	f7fe fd10 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_I2C_Init+0x4c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a9a      	ldr	r2, [pc, #616]	; (800227c <HAL_I2C_Init+0x2b0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d904      	bls.n	8002022 <HAL_I2C_Init+0x56>
 8002018:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800201c:	4896      	ldr	r0, [pc, #600]	; (8002278 <HAL_I2C_Init+0x2ac>)
 800201e:	f7fe fd02 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_I2C_Init+0x72>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002032:	d004      	beq.n	800203e <HAL_I2C_Init+0x72>
 8002034:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002038:	488f      	ldr	r0, [pc, #572]	; (8002278 <HAL_I2C_Init+0x2ac>)
 800203a:	f7fe fcf4 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_I2C_Init+0x8c>
 800204e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002052:	4889      	ldr	r0, [pc, #548]	; (8002278 <HAL_I2C_Init+0x2ac>)
 8002054:	f7fe fce7 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002060:	d009      	beq.n	8002076 <HAL_I2C_Init+0xaa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800206a:	d004      	beq.n	8002076 <HAL_I2C_Init+0xaa>
 800206c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002070:	4881      	ldr	r0, [pc, #516]	; (8002278 <HAL_I2C_Init+0x2ac>)
 8002072:	f7fe fcd8 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_I2C_Init+0xc4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d004      	beq.n	8002090 <HAL_I2C_Init+0xc4>
 8002086:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800208a:	487b      	ldr	r0, [pc, #492]	; (8002278 <HAL_I2C_Init+0x2ac>)
 800208c:	f7fe fccb 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_I2C_Init+0xda>
 800209c:	f240 11c3 	movw	r1, #451	; 0x1c3
 80020a0:	4875      	ldr	r0, [pc, #468]	; (8002278 <HAL_I2C_Init+0x2ac>)
 80020a2:	f7fe fcc0 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_I2C_Init+0xf4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d004      	beq.n	80020c0 <HAL_I2C_Init+0xf4>
 80020b6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80020ba:	486f      	ldr	r0, [pc, #444]	; (8002278 <HAL_I2C_Init+0x2ac>)
 80020bc:	f7fe fcb3 	bl	8000a26 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_I2C_Init+0x10e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d004      	beq.n	80020da <HAL_I2C_Init+0x10e>
 80020d0:	f240 11c5 	movw	r1, #453	; 0x1c5
 80020d4:	4868      	ldr	r0, [pc, #416]	; (8002278 <HAL_I2C_Init+0x2ac>)
 80020d6:	f7fe fca6 	bl	8000a26 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe face 	bl	8000690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2224      	movs	r2, #36	; 0x24
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800211a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800212c:	f002 feee 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8002130:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_I2C_Init+0x2b4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d807      	bhi.n	800214c <HAL_I2C_Init+0x180>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_I2C_Init+0x2b8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	bf94      	ite	ls
 8002144:	2301      	movls	r3, #1
 8002146:	2300      	movhi	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e006      	b.n	800215a <HAL_I2C_Init+0x18e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a4e      	ldr	r2, [pc, #312]	; (8002288 <HAL_I2C_Init+0x2bc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	bf94      	ite	ls
 8002154:	2301      	movls	r3, #1
 8002156:	2300      	movhi	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0ef      	b.n	8002342 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a49      	ldr	r2, [pc, #292]	; (800228c <HAL_I2C_Init+0x2c0>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_I2C_Init+0x2b4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d802      	bhi.n	800219c <HAL_I2C_Init+0x1d0>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3301      	adds	r3, #1
 800219a:	e009      	b.n	80021b0 <HAL_I2C_Init+0x1e4>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	4a3a      	ldr	r2, [pc, #232]	; (8002290 <HAL_I2C_Init+0x2c4>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	3301      	adds	r3, #1
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_I2C_Init+0x2b4>)
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d80d      	bhi.n	80021ec <HAL_I2C_Init+0x220>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e59      	subs	r1, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fbb1 f3f3 	udiv	r3, r1, r3
 80021de:	3301      	adds	r3, #1
 80021e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	bf38      	it	cc
 80021e8:	2304      	movcc	r3, #4
 80021ea:	e063      	b.n	80022b4 <HAL_I2C_Init+0x2e8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d111      	bne.n	8002218 <HAL_I2C_Init+0x24c>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e58      	subs	r0, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	440b      	add	r3, r1
 8002202:	fbb0 f3f3 	udiv	r3, r0, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e012      	b.n	800223e <HAL_I2C_Init+0x272>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	0099      	lsls	r1, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Init+0x27a>
 8002242:	2301      	movs	r3, #1
 8002244:	e036      	b.n	80022b4 <HAL_I2C_Init+0x2e8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d122      	bne.n	8002294 <HAL_I2C_Init+0x2c8>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1e58      	subs	r0, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	440b      	add	r3, r1
 800225c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226a:	e023      	b.n	80022b4 <HAL_I2C_Init+0x2e8>
 800226c:	40005400 	.word	0x40005400
 8002270:	40005800 	.word	0x40005800
 8002274:	40005c00 	.word	0x40005c00
 8002278:	08008d4c 	.word	0x08008d4c
 800227c:	00061a80 	.word	0x00061a80
 8002280:	000186a0 	.word	0x000186a0
 8002284:	001e847f 	.word	0x001e847f
 8002288:	003d08ff 	.word	0x003d08ff
 800228c:	431bde83 	.word	0x431bde83
 8002290:	10624dd3 	.word	0x10624dd3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6809      	ldr	r1, [r1, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6911      	ldr	r1, [r2, #16]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68d2      	ldr	r2, [r2, #12]
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop

0800234c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e1d1      	b.n	8002702 <HAL_I2S_Init+0x3b6>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a93      	ldr	r2, [pc, #588]	; (80025b0 <HAL_I2S_Init+0x264>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_I2S_Init+0x30>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a91      	ldr	r2, [pc, #580]	; (80025b4 <HAL_I2S_Init+0x268>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_I2S_Init+0x30>
 8002372:	f240 1115 	movw	r1, #277	; 0x115
 8002376:	4890      	ldr	r0, [pc, #576]	; (80025b8 <HAL_I2S_Init+0x26c>)
 8002378:	f7fe fb55 	bl	8000a26 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_I2S_Init+0x60>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238c:	d00e      	beq.n	80023ac <HAL_I2S_Init+0x60>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002396:	d009      	beq.n	80023ac <HAL_I2S_Init+0x60>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023a0:	d004      	beq.n	80023ac <HAL_I2S_Init+0x60>
 80023a2:	f44f 718b 	mov.w	r1, #278	; 0x116
 80023a6:	4884      	ldr	r0, [pc, #528]	; (80025b8 <HAL_I2S_Init+0x26c>)
 80023a8:	f7fe fb3d 	bl	8000a26 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d014      	beq.n	80023de <HAL_I2S_Init+0x92>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d010      	beq.n	80023de <HAL_I2S_Init+0x92>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d00c      	beq.n	80023de <HAL_I2S_Init+0x92>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b30      	cmp	r3, #48	; 0x30
 80023ca:	d008      	beq.n	80023de <HAL_I2S_Init+0x92>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2bb0      	cmp	r3, #176	; 0xb0
 80023d2:	d004      	beq.n	80023de <HAL_I2S_Init+0x92>
 80023d4:	f240 1117 	movw	r1, #279	; 0x117
 80023d8:	4877      	ldr	r0, [pc, #476]	; (80025b8 <HAL_I2S_Init+0x26c>)
 80023da:	f7fe fb24 	bl	8000a26 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_I2S_Init+0xbc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d00c      	beq.n	8002408 <HAL_I2S_Init+0xbc>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d008      	beq.n	8002408 <HAL_I2S_Init+0xbc>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d004      	beq.n	8002408 <HAL_I2S_Init+0xbc>
 80023fe:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002402:	486d      	ldr	r0, [pc, #436]	; (80025b8 <HAL_I2S_Init+0x26c>)
 8002404:	f7fe fb0f 	bl	8000a26 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002410:	d008      	beq.n	8002424 <HAL_I2S_Init+0xd8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <HAL_I2S_Init+0xd8>
 800241a:	f240 1119 	movw	r1, #281	; 0x119
 800241e:	4866      	ldr	r0, [pc, #408]	; (80025b8 <HAL_I2S_Init+0x26c>)
 8002420:	f7fe fb01 	bl	8000a26 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800242c:	d304      	bcc.n	8002438 <HAL_I2S_Init+0xec>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4a62      	ldr	r2, [pc, #392]	; (80025bc <HAL_I2S_Init+0x270>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d908      	bls.n	800244a <HAL_I2S_Init+0xfe>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d004      	beq.n	800244a <HAL_I2S_Init+0xfe>
 8002440:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8002444:	485c      	ldr	r0, [pc, #368]	; (80025b8 <HAL_I2S_Init+0x26c>)
 8002446:	f7fe faee 	bl	8000a26 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_I2S_Init+0x118>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b08      	cmp	r3, #8
 8002458:	d004      	beq.n	8002464 <HAL_I2S_Init+0x118>
 800245a:	f240 111b 	movw	r1, #283	; 0x11b
 800245e:	4856      	ldr	r0, [pc, #344]	; (80025b8 <HAL_I2S_Init+0x26c>)
 8002460:	f7fe fae1 	bl	8000a26 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d008      	beq.n	800247e <HAL_I2S_Init+0x132>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_I2S_Init+0x132>
 8002474:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8002478:	484f      	ldr	r0, [pc, #316]	; (80025b8 <HAL_I2S_Init+0x26c>)
 800247a:	f7fe fad4 	bl	8000a26 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_I2S_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4a      	ldr	r2, [pc, #296]	; (80025c0 <HAL_I2S_Init+0x274>)
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7fe f96f 	bl	800077c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024b4:	f023 030f 	bic.w	r3, r3, #15
 80024b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2202      	movs	r2, #2
 80024c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d060      	beq.n	800258c <HAL_I2S_Init+0x240>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_I2S_Init+0x18c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80024d2:	2310      	movs	r3, #16
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e001      	b.n	80024dc <HAL_I2S_Init+0x190>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d802      	bhi.n	80024ea <HAL_I2S_Init+0x19e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f002 ff42 	bl	8005374 <HAL_RCCEx_GetPeriphCLKFreq>
 80024f0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024fa:	d125      	bne.n	8002548 <HAL_I2S_Init+0x1fc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_I2S_Init+0x1da>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	fbb2 f2f3 	udiv	r2, r2, r3
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	3305      	adds	r3, #5
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e01f      	b.n	8002566 <HAL_I2S_Init+0x21a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	3305      	adds	r3, #5
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	e00e      	b.n	8002566 <HAL_I2S_Init+0x21a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	3305      	adds	r3, #5
 8002564:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_I2S_Init+0x278>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e003      	b.n	8002594 <HAL_I2S_Init+0x248>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800258c:	2302      	movs	r3, #2
 800258e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d902      	bls.n	80025a0 <HAL_I2S_Init+0x254>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2bff      	cmp	r3, #255	; 0xff
 800259e:	d913      	bls.n	80025c8 <HAL_I2S_Init+0x27c>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	f043 0210 	orr.w	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0a8      	b.n	8002702 <HAL_I2S_Init+0x3b6>
 80025b0:	40003800 	.word	0x40003800
 80025b4:	40003c00 	.word	0x40003c00
 80025b8:	08008d84 	.word	0x08008d84
 80025bc:	0002ee00 	.word	0x0002ee00
 80025c0:	08002b59 	.word	0x08002b59
 80025c4:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	ea42 0103 	orr.w	r1, r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	430a      	orrs	r2, r1
 80025da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6851      	ldr	r1, [r2, #4]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	4311      	orrs	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6992      	ldr	r2, [r2, #24]
 80025fe:	430a      	orrs	r2, r1
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_I2S_Init+0x2da>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d004      	beq.n	8002626 <HAL_I2S_Init+0x2da>
 800261c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002620:	483a      	ldr	r0, [pc, #232]	; (800270c <HAL_I2S_Init+0x3c0>)
 8002622:	f7fe fa00 	bl	8000a26 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d161      	bne.n	80026f2 <HAL_I2S_Init+0x3a6>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a37      	ldr	r2, [pc, #220]	; (8002710 <HAL_I2S_Init+0x3c4>)
 8002632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a36      	ldr	r2, [pc, #216]	; (8002714 <HAL_I2S_Init+0x3c8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_I2S_Init+0x2f6>
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_I2S_Init+0x3cc>)
 8002640:	e001      	b.n	8002646 <HAL_I2S_Init+0x2fa>
 8002642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4931      	ldr	r1, [pc, #196]	; (8002714 <HAL_I2S_Init+0x3c8>)
 800264e:	428a      	cmp	r2, r1
 8002650:	d101      	bne.n	8002656 <HAL_I2S_Init+0x30a>
 8002652:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_I2S_Init+0x3cc>)
 8002654:	e001      	b.n	800265a <HAL_I2S_Init+0x30e>
 8002656:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800265a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800265e:	f023 030f 	bic.w	r3, r3, #15
 8002662:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <HAL_I2S_Init+0x3c8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_I2S_Init+0x326>
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_I2S_Init+0x3cc>)
 8002670:	e001      	b.n	8002676 <HAL_I2S_Init+0x32a>
 8002672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002676:	2202      	movs	r2, #2
 8002678:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a25      	ldr	r2, [pc, #148]	; (8002714 <HAL_I2S_Init+0x3c8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d101      	bne.n	8002688 <HAL_I2S_Init+0x33c>
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_I2S_Init+0x3cc>)
 8002686:	e001      	b.n	800268c <HAL_I2S_Init+0x340>
 8002688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d003      	beq.n	80026a2 <HAL_I2S_Init+0x356>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_I2S_Init+0x35e>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	e001      	b.n	80026ae <HAL_I2S_Init+0x362>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	b299      	uxth	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80026c4:	4303      	orrs	r3, r0
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	430b      	orrs	r3, r1
 80026ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026da:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_I2S_Init+0x3c8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_I2S_Init+0x39e>
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_I2S_Init+0x3cc>)
 80026e8:	e001      	b.n	80026ee <HAL_I2S_Init+0x3a2>
 80026ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ee:	897a      	ldrh	r2, [r7, #10]
 80026f0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	08008d84 	.word	0x08008d84
 8002710:	08002c6d 	.word	0x08002c6d
 8002714:	40003800 	.word	0x40003800
 8002718:	40003400 	.word	0x40003400

0800271c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_I2S_Transmit_DMA+0x1a>
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e08e      	b.n	8002858 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_I2S_Transmit_DMA+0x2e>
 8002746:	2302      	movs	r3, #2
 8002748:	e086      	b.n	8002858 <HAL_I2S_Transmit_DMA+0x13c>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d005      	beq.n	800276a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
 8002768:	e076      	b.n	8002858 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2203      	movs	r2, #3
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d002      	beq.n	8002796 <HAL_I2S_Transmit_DMA+0x7a>
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d10a      	bne.n	80027ac <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027aa:	e005      	b.n	80027b8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_I2S_Transmit_DMA+0x144>)
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <HAL_I2S_Transmit_DMA+0x148>)
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	4a26      	ldr	r2, [pc, #152]	; (8002868 <HAL_I2S_Transmit_DMA+0x14c>)
 80027ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027d8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e8:	f7fe fdee 	bl	80013c8 <HAL_DMA_Start_IT>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00f      	beq.n	8002812 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0208 	orr.w	r2, r3, #8
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e022      	b.n	8002858 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800282e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0202 	orr.w	r2, r2, #2
 800284c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	08002a37 	.word	0x08002a37
 8002864:	080029f5 	.word	0x080029f5
 8002868:	08002a53 	.word	0x08002a53

0800286c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0202 	bic.w	r2, r2, #2
 8002886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	605a      	str	r2, [r3, #4]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00f      	beq.n	80028c0 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fdf5 	bl	8001494 <HAL_DMA_Abort>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	f043 0208 	orr.w	r2, r3, #8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
      errorcode = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00f      	beq.n	80028e8 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fde1 	bl	8001494 <HAL_DMA_Abort>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f043 0208 	orr.w	r2, r3, #8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
      errorcode = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  /* In case of Full-Duplex, disable the I2SxEXT Tx/Rx DMA requests*/
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d141      	bne.n	8002978 <HAL_I2S_DMAStop+0x10c>
  {
    /* Disable the I2SxEXT DMA requests */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a28      	ldr	r2, [pc, #160]	; (800299c <HAL_I2S_DMAStop+0x130>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_I2S_DMAStop+0x96>
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_I2S_DMAStop+0x134>)
 8002900:	e001      	b.n	8002906 <HAL_I2S_DMAStop+0x9a>
 8002902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4923      	ldr	r1, [pc, #140]	; (800299c <HAL_I2S_DMAStop+0x130>)
 800290e:	428b      	cmp	r3, r1
 8002910:	d101      	bne.n	8002916 <HAL_I2S_DMAStop+0xaa>
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_I2S_DMAStop+0x134>)
 8002914:	e001      	b.n	800291a <HAL_I2S_DMAStop+0xae>
 8002916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800291a:	f022 0202 	bic.w	r2, r2, #2
 800291e:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_I2S_DMAStop+0x130>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_I2S_DMAStop+0xc2>
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_I2S_DMAStop+0x134>)
 800292c:	e001      	b.n	8002932 <HAL_I2S_DMAStop+0xc6>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4918      	ldr	r1, [pc, #96]	; (800299c <HAL_I2S_DMAStop+0x130>)
 800293a:	428b      	cmp	r3, r1
 800293c:	d101      	bne.n	8002942 <HAL_I2S_DMAStop+0xd6>
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_I2S_DMAStop+0x134>)
 8002940:	e001      	b.n	8002946 <HAL_I2S_DMAStop+0xda>
 8002942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	605a      	str	r2, [r3, #4]

    /* Disable I2Sext peripheral */
    __HAL_I2SEXT_DISABLE(hi2s);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_I2S_DMAStop+0x130>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_I2S_DMAStop+0xee>
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_I2S_DMAStop+0x134>)
 8002958:	e001      	b.n	800295e <HAL_I2S_DMAStop+0xf2>
 800295a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	490d      	ldr	r1, [pc, #52]	; (800299c <HAL_I2S_DMAStop+0x130>)
 8002966:	428b      	cmp	r3, r1
 8002968:	d101      	bne.n	800296e <HAL_I2S_DMAStop+0x102>
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_I2S_DMAStop+0x134>)
 800296c:	e001      	b.n	8002972 <HAL_I2S_DMAStop+0x106>
 800296e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002976:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	61da      	str	r2, [r3, #28]

  hi2s->State = HAL_I2S_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40003800 	.word	0x40003800
 80029a0:	40003400 	.word	0x40003400

080029a4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	HalfTransfer_CallBack_FS();
 80029ac:	f005 fc68 	bl	8008280 <HalfTransfer_CallBack_FS>
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	TransferComplete_CallBack_FS();
 80029c0:	f005 fc54 	bl	800826c <TransferComplete_CallBack_FS>

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10e      	bne.n	8002a28 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0202 	bic.w	r2, r2, #2
 8002a18:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff ffc5 	bl	80029b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff ffad 	bl	80029a4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0203 	bic.w	r2, r2, #3
 8002a6e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f043 0208 	orr.w	r2, r3, #8
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff ffa5 	bl	80029e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	881a      	ldrh	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c9a      	adds	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10e      	bne.n	8002af2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ae2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff63 	bl	80029b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10e      	bne.n	8002b50 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff3e 	bl	80029cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d13a      	bne.n	8002bea <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d109      	bne.n	8002b92 <I2S_IRQHandler+0x3a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d102      	bne.n	8002b92 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ffb4 	bl	8002afa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d126      	bne.n	8002bea <I2S_IRQHandler+0x92>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d11f      	bne.n	8002bea <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bb8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	f043 0202 	orr.w	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fefb 	bl	80029e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d136      	bne.n	8002c64 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d109      	bne.n	8002c14 <I2S_IRQHandler+0xbc>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d102      	bne.n	8002c14 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff45 	bl	8002a9e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d122      	bne.n	8002c64 <I2S_IRQHandler+0x10c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d11b      	bne.n	8002c64 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c3a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff febe 	bl	80029e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4aa2      	ldr	r2, [pc, #648]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c86:	4ba2      	ldr	r3, [pc, #648]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c88:	e001      	b.n	8002c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a9b      	ldr	r2, [pc, #620]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ca4:	4b9a      	ldr	r3, [pc, #616]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ca6:	e001      	b.n	8002cac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d004      	beq.n	8002cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 8099 	bne.w	8002df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d107      	bne.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f925 	bl	8002f28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9c8 	bl	8003088 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d13a      	bne.n	8002d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d035      	beq.n	8002d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7e      	ldr	r2, [pc, #504]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d16:	4b7e      	ldr	r3, [pc, #504]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d18:	e001      	b.n	8002d1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4979      	ldr	r1, [pc, #484]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d26:	428b      	cmp	r3, r1
 8002d28:	d101      	bne.n	8002d2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d2a:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d2c:	e001      	b.n	8002d32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fe34 	bl	80029e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	f040 80be 	bne.w	8002f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80b8 	beq.w	8002f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a59      	ldr	r2, [pc, #356]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002daa:	4b59      	ldr	r3, [pc, #356]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dac:	e001      	b.n	8002db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4954      	ldr	r1, [pc, #336]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dba:	428b      	cmp	r3, r1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002dbe:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dc0:	e001      	b.n	8002dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f043 0204 	orr.w	r2, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fdf6 	bl	80029e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002df4:	e084      	b.n	8002f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d107      	bne.n	8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8be 	bl	8002f8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8fd 	bl	8003024 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d12f      	bne.n	8002e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d02a      	beq.n	8002e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e5a:	e001      	b.n	8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4929      	ldr	r1, [pc, #164]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e6e:	e001      	b.n	8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fda6 	bl	80029e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d131      	bne.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02c      	beq.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002eb4:	e001      	b.n	8002eba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4912      	ldr	r1, [pc, #72]	; (8002f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ec2:	428b      	cmp	r3, r1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ec8:	e001      	b.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ece:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ed2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ee2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff fd71 	bl	80029e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002efe:	e000      	b.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f00:	bf00      	nop
}
 8002f02:	bf00      	nop
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40003800 	.word	0x40003800
 8002f10:	40003400 	.word	0x40003400

08002f14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c99      	adds	r1, r3, #2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6251      	str	r1, [r2, #36]	; 0x24
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d113      	bne.n	8002f82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ffc9 	bl	8002f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c99      	adds	r1, r3, #2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6251      	str	r1, [r2, #36]	; 0x24
 8002f9e:	8819      	ldrh	r1, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	; (800301c <I2SEx_TxISR_I2SExt+0x90>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <I2SEx_TxISR_I2SExt+0x22>
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <I2SEx_TxISR_I2SExt+0x94>)
 8002fac:	e001      	b.n	8002fb2 <I2SEx_TxISR_I2SExt+0x26>
 8002fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d121      	bne.n	8003012 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <I2SEx_TxISR_I2SExt+0x90>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <I2SEx_TxISR_I2SExt+0x50>
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <I2SEx_TxISR_I2SExt+0x94>)
 8002fda:	e001      	b.n	8002fe0 <I2SEx_TxISR_I2SExt+0x54>
 8002fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	490d      	ldr	r1, [pc, #52]	; (800301c <I2SEx_TxISR_I2SExt+0x90>)
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	d101      	bne.n	8002ff0 <I2SEx_TxISR_I2SExt+0x64>
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <I2SEx_TxISR_I2SExt+0x94>)
 8002fee:	e001      	b.n	8002ff4 <I2SEx_TxISR_I2SExt+0x68>
 8002ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff81 	bl	8002f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40003800 	.word	0x40003800
 8003020:	40003400 	.word	0x40003400

08003024 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68d8      	ldr	r0, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	1c99      	adds	r1, r3, #2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800303c:	b282      	uxth	r2, r0
 800303e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d113      	bne.n	8003080 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003066:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff4a 	bl	8002f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a20      	ldr	r2, [pc, #128]	; (8003118 <I2SEx_RxISR_I2SExt+0x90>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <I2SEx_RxISR_I2SExt+0x16>
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <I2SEx_RxISR_I2SExt+0x94>)
 800309c:	e001      	b.n	80030a2 <I2SEx_RxISR_I2SExt+0x1a>
 800309e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a2:	68d8      	ldr	r0, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	1c99      	adds	r1, r3, #2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80030ae:	b282      	uxth	r2, r0
 80030b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d121      	bne.n	800310e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <I2SEx_RxISR_I2SExt+0x90>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <I2SEx_RxISR_I2SExt+0x50>
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <I2SEx_RxISR_I2SExt+0x94>)
 80030d6:	e001      	b.n	80030dc <I2SEx_RxISR_I2SExt+0x54>
 80030d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	490d      	ldr	r1, [pc, #52]	; (8003118 <I2SEx_RxISR_I2SExt+0x90>)
 80030e4:	428b      	cmp	r3, r1
 80030e6:	d101      	bne.n	80030ec <I2SEx_RxISR_I2SExt+0x64>
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <I2SEx_RxISR_I2SExt+0x94>)
 80030ea:	e001      	b.n	80030f0 <I2SEx_RxISR_I2SExt+0x68>
 80030ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ff03 	bl	8002f14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40003800 	.word	0x40003800
 800311c:	40003400 	.word	0x40003400

08003120 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003122:	b08f      	sub	sp, #60	; 0x3c
 8003124:	af0a      	add	r7, sp, #40	; 0x28
 8003126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e118      	b.n	8003364 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313a:	d003      	beq.n	8003144 <HAL_PCD_Init+0x24>
 800313c:	2187      	movs	r1, #135	; 0x87
 800313e:	488b      	ldr	r0, [pc, #556]	; (800336c <HAL_PCD_Init+0x24c>)
 8003140:	f7fd fc71 	bl	8000a26 <assert_failed>

  USBx = hpcd->Instance;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f005 f9a6 	bl	80084b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f002 fa67 	bl	8005656 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	687e      	ldr	r6, [r7, #4]
 8003190:	466d      	mov	r5, sp
 8003192:	f106 0410 	add.w	r4, r6, #16
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a6:	1d33      	adds	r3, r6, #4
 80031a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	f002 f93e 	bl	800542c <USB_CoreInit>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0d0      	b.n	8003364 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f002 fa55 	bl	8005678 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e04a      	b.n	800326a <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	333d      	adds	r3, #61	; 0x3d
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	b298      	uxth	r0, r3
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3342      	adds	r3, #66	; 0x42
 8003210:	4602      	mov	r2, r0
 8003212:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	333f      	adds	r3, #63	; 0x3f
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3344      	adds	r3, #68	; 0x44
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3348      	adds	r3, #72	; 0x48
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3350      	adds	r3, #80	; 0x50
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	3301      	adds	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d3af      	bcc.n	80031d4 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e044      	b.n	8003304 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3301      	adds	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d3b5      	bcc.n	800327a <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	687e      	ldr	r6, [r7, #4]
 8003316:	466d      	mov	r5, sp
 8003318:	f106 0410 	add.w	r4, r6, #16
 800331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003324:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003328:	e885 0003 	stmia.w	r5, {r0, r1}
 800332c:	1d33      	adds	r3, r6, #4
 800332e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003330:	6838      	ldr	r0, [r7, #0]
 8003332:	f002 f9cb 	bl	80056cc <USB_DevInit>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e00d      	b.n	8003364 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 f9c0 	bl	80066e2 <USB_DevDisconnect>

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336c:	08008dbc 	.word	0x08008dbc

08003370 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_PCD_Start+0x1c>
 8003388:	2302      	movs	r3, #2
 800338a:	e020      	b.n	80033ce <HAL_PCD_Start+0x5e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	2b01      	cmp	r3, #1
 800339a:	d109      	bne.n	80033b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d005      	beq.n	80033b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 f97c 	bl	80066b2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f002 f938 	bl	8005634 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033d6:	b590      	push	{r4, r7, lr}
 80033d8:	b08d      	sub	sp, #52	; 0x34
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fa23 	bl	8006838 <USB_GetMode>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 838e 	bne.w	8003b16 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 f987 	bl	8006712 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8384 	beq.w	8003b14 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f003 f97e 	bl	8006712 <USB_ReadInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d107      	bne.n	8003430 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f002 0202 	and.w	r2, r2, #2
 800342e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 f96c 	bl	8006712 <USB_ReadInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003444:	d17b      	bne.n	800353e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f003 f972 	bl	8006738 <USB_ReadDevAllOutEpInterrupt>
 8003454:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003456:	e06f      	b.n	8003538 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d064      	beq.n	800352c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f003 f997 	bl	80067a0 <USB_ReadDevOutEPInterrupt>
 8003472:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2301      	movs	r3, #1
 800348e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fdf6 	bl	8004084 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00c      	beq.n	80034bc <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fef5 	bl	8004294 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	461a      	mov	r2, r3
 80034b8:	2308      	movs	r3, #8
 80034ba:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	2310      	movs	r3, #16
 80034d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d015      	beq.n	800350e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d108      	bne.n	80034fc <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034f4:	461a      	mov	r2, r3
 80034f6:	2101      	movs	r1, #1
 80034f8:	f003 f9e2 	bl	80068c0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	2320      	movs	r3, #32
 800350c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800352a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	3301      	adds	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d18c      	bne.n	8003458 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f003 f8e5 	bl	8006712 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003552:	f040 80c4 	bne.w	80036de <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f003 f906 	bl	800676c <USB_ReadDevAllInEpInterrupt>
 8003560:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003566:	e0b6      	b.n	80036d6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80ab 	beq.w	80036ca <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f003 f92c 	bl	80067dc <USB_ReadDevInEPInterrupt>
 8003584:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05b      	beq.n	8003648 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	2201      	movs	r2, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69f9      	ldr	r1, [r7, #28]
 80035ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b0:	4013      	ands	r3, r2
 80035b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c0:	461a      	mov	r2, r3
 80035c2:	2301      	movs	r3, #1
 80035c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d11b      	bne.n	8003606 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3348      	adds	r3, #72	; 0x48
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4403      	add	r3, r0
 80035ee:	3344      	adds	r3, #68	; 0x44
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4419      	add	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3348      	adds	r3, #72	; 0x48
 8003604:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f004 ffd0 	bl	80085b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d116      	bne.n	8003648 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <HAL_PCD_IRQHandler+0x272>
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3350      	adds	r3, #80	; 0x50
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003640:	461a      	mov	r2, r3
 8003642:	2101      	movs	r1, #1
 8003644:	f003 f93c 	bl	80068c0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365e:	461a      	mov	r2, r3
 8003660:	2308      	movs	r3, #8
 8003662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367a:	461a      	mov	r2, r3
 800367c:	2310      	movs	r3, #16
 800367e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	461a      	mov	r2, r3
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	461a      	mov	r2, r3
 80036b4:	2302      	movs	r3, #2
 80036b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fc4f 	bl	8003f68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	3301      	adds	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af45 	bne.w	8003568 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 f815 	bl	8006712 <USB_ReadInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f2:	d122      	bne.n	800373a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800370e:	2b01      	cmp	r3, #1
 8003710:	d108      	bne.n	8003724 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fe71 	bl	8004404 <HAL_PCDEx_LPM_Callback>
 8003722:	e002      	b.n	800372a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f004 ffbb 	bl	80086a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f002 ffe7 	bl	8006712 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800374e:	d112      	bne.n	8003776 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d102      	bne.n	8003766 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f004 ff77 	bl	8008654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003774:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f002 ffc9 	bl	8006712 <USB_ReadInterrupts>
 8003780:	4603      	mov	r3, r0
 8003782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	f040 80a7 	bne.w	80038dc <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2110      	movs	r1, #16
 80037a8:	4618      	mov	r0, r3
 80037aa:	f002 f901 	bl	80059b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b2:	e036      	b.n	8003822 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	461a      	mov	r2, r3
 80037c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	440a      	add	r2, r1
 8003812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800381a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	3301      	adds	r3, #1
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003828:	429a      	cmp	r2, r3
 800382a:	d3c3      	bcc.n	80037b4 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800383e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003858:	f043 030b 	orr.w	r3, r3, #11
 800385c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386e:	f043 030b 	orr.w	r3, r3, #11
 8003872:	6453      	str	r3, [r2, #68]	; 0x44
 8003874:	e015      	b.n	80038a2 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003888:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800388c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389c:	f043 030b 	orr.w	r3, r3, #11
 80038a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038c6:	461a      	mov	r2, r3
 80038c8:	f002 fffa 	bl	80068c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 ff16 	bl	8006712 <USB_ReadInterrupts>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f0:	d124      	bne.n	800393c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 ffac 	bl	8006854 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f002 f8b6 	bl	8005a72 <USB_GetDevSpeed>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	f001 faef 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8003916:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	4620      	mov	r0, r4
 8003922:	f001 fde5 	bl	80054f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f004 fe6b 	bl	8008602 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800393a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f002 fee6 	bl	8006712 <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b10      	cmp	r3, #16
 800394e:	d161      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0210 	bic.w	r2, r2, #16
 800395e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	0c5b      	lsrs	r3, r3, #17
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	2b02      	cmp	r3, #2
 800398a:	d124      	bne.n	80039d6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d035      	beq.n	8003a04 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	6a38      	ldr	r0, [r7, #32]
 80039ac:	f002 fd5e 	bl	800646c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ce:	441a      	add	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	619a      	str	r2, [r3, #24]
 80039d4:	e016      	b.n	8003a04 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	0c5b      	lsrs	r3, r3, #17
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d110      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039e8:	2208      	movs	r2, #8
 80039ea:	4619      	mov	r1, r3
 80039ec:	6a38      	ldr	r0, [r7, #32]
 80039ee:	f002 fd3d 	bl	800646c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fe:	441a      	add	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0210 	orr.w	r2, r2, #16
 8003a12:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f002 fe7a 	bl	8006712 <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d10a      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f004 fddc 	bl	80085e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 0208 	and.w	r2, r2, #8
 8003a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 fe65 	bl	8006712 <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a52:	d10f      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f004 fe3e 	bl	80086e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fe4a 	bl	8006712 <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a88:	d10f      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f004 fe11 	bl	80086bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 fe2f 	bl	8006712 <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d10a      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f004 fe1f 	bl	8008704 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f002 fe19 	bl	8006712 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d115      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f004 fe0f 	bl	8008720 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e000      	b.n	8003b16 <HAL_PCD_IRQHandler+0x740>
      return;
 8003b14:	bf00      	nop
    }
  }
}
 8003b16:	3734      	adds	r7, #52	; 0x34
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd90      	pop	{r4, r7, pc}

08003b1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_PCD_SetAddress+0x1a>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e013      	b.n	8003b5e <HAL_PCD_SetAddress+0x42>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f002 fd89 	bl	8006666 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	4608      	mov	r0, r1
 8003b70:	4611      	mov	r1, r2
 8003b72:	461a      	mov	r2, r3
 8003b74:	4603      	mov	r3, r0
 8003b76:	70fb      	strb	r3, [r7, #3]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	803b      	strh	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da0f      	bge.n	8003bac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 020f 	and.w	r2, r3, #15
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	3338      	adds	r3, #56	; 0x38
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	705a      	strb	r2, [r3, #1]
 8003baa:	e00f      	b.n	8003bcc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 020f 	and.w	r2, r3, #15
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bd8:	883a      	ldrh	r2, [r7, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	78ba      	ldrb	r2, [r7, #2]
 8003be2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bf6:	78bb      	ldrb	r3, [r7, #2]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d102      	bne.n	8003c02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_PCD_EP_Open+0xaa>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e00e      	b.n	8003c2e <HAL_PCD_EP_Open+0xc8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 ff4c 	bl	8005abc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da0f      	bge.n	8003c6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	3338      	adds	r3, #56	; 0x38
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3304      	adds	r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	705a      	strb	r2, [r3, #1]
 8003c68:	e00f      	b.n	8003c8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	f003 020f 	and.w	r2, r3, #15
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	3304      	adds	r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_PCD_EP_Close+0x6e>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e00e      	b.n	8003cc2 <HAL_PCD_EP_Close+0x8c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68f9      	ldr	r1, [r7, #12]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 ff8a 	bl	8005bcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2200      	movs	r2, #0
 8003d04:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	f002 fa0d 	bl	800615c <USB_EP0StartXfer>
 8003d42:	e008      	b.n	8003d56 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	f001 ffbf 	bl	8005cd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	f003 020f 	and.w	r2, r3, #15
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	3338      	adds	r3, #56	; 0x38
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	3304      	adds	r3, #4
 8003d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d102      	bne.n	8003dba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	f002 f9c3 	bl	800615c <USB_EP0StartXfer>
 8003dd6:	e008      	b.n	8003dea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	f001 ff75 	bl	8005cd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d901      	bls.n	8003e12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e050      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da0f      	bge.n	8003e3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	3338      	adds	r3, #56	; 0x38
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3304      	adds	r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	705a      	strb	r2, [r3, #1]
 8003e38:	e00d      	b.n	8003e56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_PCD_EP_SetStall+0x82>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e01e      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0xc0>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 fb1a 	bl	80064be <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	b2d9      	uxtb	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f002 fd0b 	bl	80068c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d901      	bls.n	8003eda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e042      	b.n	8003f60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da0f      	bge.n	8003f02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	3338      	adds	r3, #56	; 0x38
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	705a      	strb	r2, [r3, #1]
 8003f00:	e00f      	b.n	8003f22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_PCD_EP_ClrStall+0x86>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e00e      	b.n	8003f60 <HAL_PCD_EP_ClrStall+0xa4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f002 fb22 	bl	800659a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	3338      	adds	r3, #56	; 0x38
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d901      	bls.n	8003fa0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e06c      	b.n	800407a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d902      	bls.n	8003fbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3303      	adds	r3, #3
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fc4:	e02b      	b.n	800401e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d902      	bls.n	8003fe2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	4603      	mov	r3, r0
 8004000:	6978      	ldr	r0, [r7, #20]
 8004002:	f002 f9fe 	bl	8006402 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	441a      	add	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	441a      	add	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	b29b      	uxth	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	429a      	cmp	r2, r3
 8004032:	d809      	bhi.n	8004048 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800403c:	429a      	cmp	r2, r3
 800403e:	d203      	bcs.n	8004048 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1be      	bne.n	8003fc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	429a      	cmp	r2, r3
 8004052:	d811      	bhi.n	8004078 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	2201      	movs	r2, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	43db      	mvns	r3, r3
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004074:	4013      	ands	r3, r2
 8004076:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	333c      	adds	r3, #60	; 0x3c
 800409c:	3304      	adds	r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	f040 80b3 	bne.w	8004222 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d028      	beq.n	8004118 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a70      	ldr	r2, [pc, #448]	; (800428c <PCD_EP_OutXfrComplete_int+0x208>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d90e      	bls.n	80040ec <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ea:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f004 fa33 	bl	8008558 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040fc:	461a      	mov	r2, r3
 80040fe:	2101      	movs	r1, #1
 8004100:	f002 fbde 	bl	80068c0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	461a      	mov	r2, r3
 8004112:	2308      	movs	r3, #8
 8004114:	6093      	str	r3, [r2, #8]
 8004116:	e0b3      	b.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	461a      	mov	r2, r3
 8004130:	2320      	movs	r3, #32
 8004132:	6093      	str	r3, [r2, #8]
 8004134:	e0a4      	b.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	f040 809f 	bne.w	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a51      	ldr	r2, [pc, #324]	; (800428c <PCD_EP_OutXfrComplete_int+0x208>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d90f      	bls.n	800416a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	461a      	mov	r2, r3
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	e08a      	b.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800417c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	0159      	lsls	r1, r3, #5
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	440b      	add	r3, r1
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004190:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4403      	add	r3, r0
 80041a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041a4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4403      	add	r3, r0
 80041c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4419      	add	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4403      	add	r3, r0
 80041de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041e2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f004 f9c6 	bl	800857c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d144      	bne.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d138      	bne.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004218:	461a      	mov	r2, r3
 800421a:	2101      	movs	r1, #1
 800421c:	f002 fb50 	bl	80068c0 <USB_EP0_OutStart>
 8004220:	e02e      	b.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a1a      	ldr	r2, [pc, #104]	; (8004290 <PCD_EP_OutXfrComplete_int+0x20c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d124      	bne.n	8004274 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	461a      	mov	r2, r3
 8004242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004246:	6093      	str	r3, [r2, #8]
 8004248:	e01a      	b.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	461a      	mov	r2, r3
 8004262:	2320      	movs	r3, #32
 8004264:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f004 f985 	bl	800857c <HAL_PCD_DataOutStageCallback>
 8004272:	e005      	b.n	8004280 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f004 f97e 	bl	800857c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	4f54300a 	.word	0x4f54300a
 8004290:	4f54310a 	.word	0x4f54310a

08004294 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	333c      	adds	r3, #60	; 0x3c
 80042ac:	3304      	adds	r3, #4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d113      	bne.n	80042f2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <PCD_EP_OutSetupPacket_int+0xb8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d922      	bls.n	8004318 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01d      	beq.n	8004318 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	461a      	mov	r2, r3
 80042ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ee:	6093      	str	r3, [r2, #8]
 80042f0:	e012      	b.n	8004318 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a16      	ldr	r2, [pc, #88]	; (8004350 <PCD_EP_OutSetupPacket_int+0xbc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10e      	bne.n	8004318 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004316:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f004 f91d 	bl	8008558 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a0a      	ldr	r2, [pc, #40]	; (800434c <PCD_EP_OutSetupPacket_int+0xb8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d90c      	bls.n	8004340 <PCD_EP_OutSetupPacket_int+0xac>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d108      	bne.n	8004340 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004338:	461a      	mov	r2, r3
 800433a:	2101      	movs	r1, #1
 800433c:	f002 fac0 	bl	80068c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	4f54300a 	.word	0x4f54300a
 8004350:	4f54310a 	.word	0x4f54310a

08004354 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
 8004360:	4613      	mov	r3, r2
 8004362:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d107      	bne.n	8004382 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004372:	883b      	ldrh	r3, [r7, #0]
 8004374:	0419      	lsls	r1, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	430a      	orrs	r2, r1
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
 8004380:	e028      	b.n	80043d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4413      	add	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e00d      	b.n	80043b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	3340      	adds	r3, #64	; 0x40
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4413      	add	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	3301      	adds	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3ec      	bcc.n	8004396 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043bc:	883b      	ldrh	r3, [r7, #0]
 80043be:	0418      	lsls	r0, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4302      	orrs	r2, r0
 80043cc:	3340      	adds	r3, #64	; 0x40
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e30d      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b0f      	cmp	r3, #15
 8004434:	d903      	bls.n	800443e <HAL_RCC_OscConfig+0x22>
 8004436:	21e8      	movs	r1, #232	; 0xe8
 8004438:	48a3      	ldr	r0, [pc, #652]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	f7fc faf4 	bl	8000a26 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8088 	beq.w	800455c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <HAL_RCC_OscConfig+0x54>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d008      	beq.n	8004470 <HAL_RCC_OscConfig+0x54>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004466:	d003      	beq.n	8004470 <HAL_RCC_OscConfig+0x54>
 8004468:	21ed      	movs	r1, #237	; 0xed
 800446a:	4897      	ldr	r0, [pc, #604]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	f7fc fadb 	bl	8000a26 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004470:	4b96      	ldr	r3, [pc, #600]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b04      	cmp	r3, #4
 800447a:	d00c      	beq.n	8004496 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447c:	4b93      	ldr	r3, [pc, #588]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004484:	2b08      	cmp	r3, #8
 8004486:	d112      	bne.n	80044ae <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004488:	4b90      	ldr	r3, [pc, #576]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004494:	d10b      	bne.n	80044ae <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004496:	4b8d      	ldr	r3, [pc, #564]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d05b      	beq.n	800455a <HAL_RCC_OscConfig+0x13e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d157      	bne.n	800455a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e2cd      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0xaa>
 80044b8:	4b84      	ldr	r3, [pc, #528]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a83      	ldr	r2, [pc, #524]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e01d      	b.n	8004502 <HAL_RCC_OscConfig+0xe6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0xce>
 80044d0:	4b7e      	ldr	r3, [pc, #504]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a7d      	ldr	r2, [pc, #500]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b7b      	ldr	r3, [pc, #492]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7a      	ldr	r2, [pc, #488]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0xe6>
 80044ea:	4b78      	ldr	r3, [pc, #480]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a77      	ldr	r2, [pc, #476]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b75      	ldr	r3, [pc, #468]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a74      	ldr	r2, [pc, #464]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80044fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d013      	beq.n	8004532 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7fc fbd3 	bl	8000cb4 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004512:	f7fc fbcf 	bl	8000cb4 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b64      	cmp	r3, #100	; 0x64
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e292      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004524:	4b69      	ldr	r3, [pc, #420]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0xf6>
 8004530:	e014      	b.n	800455c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004532:	f7fc fbbf 	bl	8000cb4 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800453a:	f7fc fbbb 	bl	8000cb4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	; 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e27e      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454c:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x11e>
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d079      	beq.n	800465c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCC_OscConfig+0x166>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d004      	beq.n	8004582 <HAL_RCC_OscConfig+0x166>
 8004578:	f240 111f 	movw	r1, #287	; 0x11f
 800457c:	4852      	ldr	r0, [pc, #328]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800457e:	f7fc fa52 	bl	8000a26 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b1f      	cmp	r3, #31
 8004588:	d904      	bls.n	8004594 <HAL_RCC_OscConfig+0x178>
 800458a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800458e:	484e      	ldr	r0, [pc, #312]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	f7fc fa49 	bl	8000a26 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a0:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11c      	bne.n	80045e6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d116      	bne.n	80045e6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b8:	4b44      	ldr	r3, [pc, #272]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1b4>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e23c      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	493b      	ldr	r1, [pc, #236]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e4:	e03a      	b.n	800465c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d020      	beq.n	8004630 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ee:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <HAL_RCC_OscConfig+0x2b4>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fc fb5e 	bl	8000cb4 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fc fb5a 	bl	8000cb4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e21d      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4928      	ldr	r1, [pc, #160]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
 800462e:	e015      	b.n	800465c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_RCC_OscConfig+0x2b4>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fc fb3d 	bl	8000cb4 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463e:	f7fc fb39 	bl	8000cb4 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1fc      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004650:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f0      	bne.n	800463e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d046      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_OscConfig+0x266>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d004      	beq.n	8004682 <HAL_RCC_OscConfig+0x266>
 8004678:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800467c:	4812      	ldr	r0, [pc, #72]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800467e:	f7fc f9d2 	bl	8000a26 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <HAL_RCC_OscConfig+0x2b8>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fc fb10 	bl	8000cb4 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004698:	f7fc fb0c 	bl	8000cb4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1cf      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x27c>
 80046b6:	e01e      	b.n	80046f6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCC_OscConfig+0x2b8>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046be:	f7fc faf9 	bl	8000cb4 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	e011      	b.n	80046ea <HAL_RCC_OscConfig+0x2ce>
 80046c6:	bf00      	nop
 80046c8:	08008df4 	.word	0x08008df4
 80046cc:	40023800 	.word	0x40023800
 80046d0:	42470000 	.word	0x42470000
 80046d4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fc faec 	bl	8000cb4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1af      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ea:	4b97      	ldr	r3, [pc, #604]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80a8 	beq.w	8004854 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004704:	2300      	movs	r3, #0
 8004706:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00c      	beq.n	800472a <HAL_RCC_OscConfig+0x30e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d008      	beq.n	800472a <HAL_RCC_OscConfig+0x30e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b05      	cmp	r3, #5
 800471e:	d004      	beq.n	800472a <HAL_RCC_OscConfig+0x30e>
 8004720:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004724:	4889      	ldr	r0, [pc, #548]	; (800494c <HAL_RCC_OscConfig+0x530>)
 8004726:	f7fc f97e 	bl	8000a26 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b87      	ldr	r3, [pc, #540]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	4b83      	ldr	r3, [pc, #524]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	4a82      	ldr	r2, [pc, #520]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004744:	6413      	str	r3, [r2, #64]	; 0x40
 8004746:	4b80      	ldr	r3, [pc, #512]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004756:	4b7e      	ldr	r3, [pc, #504]	; (8004950 <HAL_RCC_OscConfig+0x534>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d118      	bne.n	8004794 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004762:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <HAL_RCC_OscConfig+0x534>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7a      	ldr	r2, [pc, #488]	; (8004950 <HAL_RCC_OscConfig+0x534>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476e:	f7fc faa1 	bl	8000cb4 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7fc fa9d 	bl	8000cb4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e160      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b71      	ldr	r3, [pc, #452]	; (8004950 <HAL_RCC_OscConfig+0x534>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x38e>
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a69      	ldr	r2, [pc, #420]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	e01c      	b.n	80047e4 <HAL_RCC_OscConfig+0x3c8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x3b0>
 80047b2:	4b65      	ldr	r3, [pc, #404]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	4a64      	ldr	r2, [pc, #400]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
 80047be:	4b62      	ldr	r3, [pc, #392]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a61      	ldr	r2, [pc, #388]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0x3c8>
 80047cc:	4b5e      	ldr	r3, [pc, #376]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	4a5d      	ldr	r2, [pc, #372]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6713      	str	r3, [r2, #112]	; 0x70
 80047d8:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a5a      	ldr	r2, [pc, #360]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fc fa62 	bl	8000cb4 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fc fa5e 	bl	8000cb4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e11f      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ee      	beq.n	80047f4 <HAL_RCC_OscConfig+0x3d8>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004818:	f7fc fa4c 	bl	8000cb4 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fc fa48 	bl	8000cb4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e109      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	4b44      	ldr	r3, [pc, #272]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ee      	bne.n	8004820 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004848:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	4a3e      	ldr	r2, [pc, #248]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <HAL_RCC_OscConfig+0x45a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d008      	beq.n	8004876 <HAL_RCC_OscConfig+0x45a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d004      	beq.n	8004876 <HAL_RCC_OscConfig+0x45a>
 800486c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004870:	4836      	ldr	r0, [pc, #216]	; (800494c <HAL_RCC_OscConfig+0x530>)
 8004872:	f7fc f8d8 	bl	8000a26 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80e4 	beq.w	8004a48 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004880:	4b31      	ldr	r3, [pc, #196]	; (8004948 <HAL_RCC_OscConfig+0x52c>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	f000 80ae 	beq.w	80049ea <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b02      	cmp	r3, #2
 8004894:	f040 8092 	bne.w	80049bc <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <HAL_RCC_OscConfig+0x498>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a8:	d004      	beq.n	80048b4 <HAL_RCC_OscConfig+0x498>
 80048aa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80048ae:	4827      	ldr	r0, [pc, #156]	; (800494c <HAL_RCC_OscConfig+0x530>)
 80048b0:	f7fc f8b9 	bl	8000a26 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	2b3f      	cmp	r3, #63	; 0x3f
 80048ba:	d904      	bls.n	80048c6 <HAL_RCC_OscConfig+0x4aa>
 80048bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80048c0:	4822      	ldr	r0, [pc, #136]	; (800494c <HAL_RCC_OscConfig+0x530>)
 80048c2:	f7fc f8b0 	bl	8000a26 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b31      	cmp	r3, #49	; 0x31
 80048cc:	d904      	bls.n	80048d8 <HAL_RCC_OscConfig+0x4bc>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80048d6:	d904      	bls.n	80048e2 <HAL_RCC_OscConfig+0x4c6>
 80048d8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80048dc:	481b      	ldr	r0, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x530>)
 80048de:	f7fc f8a2 	bl	8000a26 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d010      	beq.n	800490c <HAL_RCC_OscConfig+0x4f0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d00c      	beq.n	800490c <HAL_RCC_OscConfig+0x4f0>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d008      	beq.n	800490c <HAL_RCC_OscConfig+0x4f0>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d004      	beq.n	800490c <HAL_RCC_OscConfig+0x4f0>
 8004902:	f240 11db 	movw	r1, #475	; 0x1db
 8004906:	4811      	ldr	r0, [pc, #68]	; (800494c <HAL_RCC_OscConfig+0x530>)
 8004908:	f7fc f88d 	bl	8000a26 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d903      	bls.n	800491c <HAL_RCC_OscConfig+0x500>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d904      	bls.n	8004926 <HAL_RCC_OscConfig+0x50a>
 800491c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004920:	480a      	ldr	r0, [pc, #40]	; (800494c <HAL_RCC_OscConfig+0x530>)
 8004922:	f7fc f880 	bl	8000a26 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_OscConfig+0x538>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fc f9c2 	bl	8000cb4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	e011      	b.n	8004958 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004934:	f7fc f9be 	bl	8000cb4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d90a      	bls.n	8004958 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e081      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	08008df4 	.word	0x08008df4
 8004950:	40007000 	.word	0x40007000
 8004954:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004958:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <HAL_RCC_OscConfig+0x638>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e7      	bne.n	8004934 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	019b      	lsls	r3, r3, #6
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	3b01      	subs	r3, #1
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	061b      	lsls	r3, r3, #24
 8004988:	4932      	ldr	r1, [pc, #200]	; (8004a54 <HAL_RCC_OscConfig+0x638>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498e:	4b32      	ldr	r3, [pc, #200]	; (8004a58 <HAL_RCC_OscConfig+0x63c>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fc f98e 	bl	8000cb4 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499c:	f7fc f98a 	bl	8000cb4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e04d      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ae:	4b29      	ldr	r3, [pc, #164]	; (8004a54 <HAL_RCC_OscConfig+0x638>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x580>
 80049ba:	e045      	b.n	8004a48 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049bc:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <HAL_RCC_OscConfig+0x63c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c2:	f7fc f977 	bl	8000cb4 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fc f973 	bl	8000cb4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e036      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_RCC_OscConfig+0x638>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f0      	bne.n	80049ca <HAL_RCC_OscConfig+0x5ae>
 80049e8:	e02e      	b.n	8004a48 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e029      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <HAL_RCC_OscConfig+0x638>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d11c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d115      	bne.n	8004a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10d      	bne.n	8004a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d106      	bne.n	8004a44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	42470060 	.word	0x42470060

08004a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e174      	b.n	8004d5a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x24>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b0f      	cmp	r3, #15
 8004a7e:	d904      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x2e>
 8004a80:	f240 2151 	movw	r1, #593	; 0x251
 8004a84:	487b      	ldr	r0, [pc, #492]	; (8004c74 <HAL_RCC_ClockConfig+0x218>)
 8004a86:	f7fb ffce 	bl	8000a26 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d019      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d016      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d013      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d010      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d007      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b07      	cmp	r3, #7
 8004ab8:	d004      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x68>
 8004aba:	f240 2152 	movw	r1, #594	; 0x252
 8004abe:	486d      	ldr	r0, [pc, #436]	; (8004c74 <HAL_RCC_ClockConfig+0x218>)
 8004ac0:	f7fb ffb1 	bl	8000a26 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b6c      	ldr	r3, [pc, #432]	; (8004c78 <HAL_RCC_ClockConfig+0x21c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d90c      	bls.n	8004aec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b69      	ldr	r3, [pc, #420]	; (8004c78 <HAL_RCC_ClockConfig+0x21c>)
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b67      	ldr	r3, [pc, #412]	; (8004c78 <HAL_RCC_ClockConfig+0x21c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e136      	b.n	8004d5a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d049      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b04:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a5c      	ldr	r2, [pc, #368]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b1c:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a56      	ldr	r2, [pc, #344]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d024      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b80      	cmp	r3, #128	; 0x80
 8004b36:	d020      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b90      	cmp	r3, #144	; 0x90
 8004b3e:	d01c      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2ba0      	cmp	r3, #160	; 0xa0
 8004b46:	d018      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2bb0      	cmp	r3, #176	; 0xb0
 8004b4e:	d014      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2bc0      	cmp	r3, #192	; 0xc0
 8004b56:	d010      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2bd0      	cmp	r3, #208	; 0xd0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2be0      	cmp	r3, #224	; 0xe0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2bf0      	cmp	r3, #240	; 0xf0
 8004b6e:	d004      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x11e>
 8004b70:	f240 2175 	movw	r1, #629	; 0x275
 8004b74:	483f      	ldr	r0, [pc, #252]	; (8004c74 <HAL_RCC_ClockConfig+0x218>)
 8004b76:	f7fb ff56 	bl	8000a26 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7a:	4b40      	ldr	r3, [pc, #256]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	493d      	ldr	r1, [pc, #244]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d059      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x166>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x166>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x166>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d004      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x166>
 8004bb8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8004bbc:	482d      	ldr	r0, [pc, #180]	; (8004c74 <HAL_RCC_ClockConfig+0x218>)
 8004bbe:	f7fb ff32 	bl	8000a26 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d119      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0bf      	b.n	8004d5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0af      	b.n	8004d5a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0a7      	b.n	8004d5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 0203 	bic.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4919      	ldr	r1, [pc, #100]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c1c:	f7fc f84a 	bl	8000cb4 <HAL_GetTick>
 8004c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c24:	f7fc f846 	bl	8000cb4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e08f      	b.n	8004d5a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_RCC_ClockConfig+0x220>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 020c 	and.w	r2, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d1eb      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x21c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d212      	bcs.n	8004c80 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_RCC_ClockConfig+0x21c>)
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_ClockConfig+0x21c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d007      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e072      	b.n	8004d5a <HAL_RCC_ClockConfig+0x2fe>
 8004c74:	08008df4 	.word	0x08008df4
 8004c78:	40023c00 	.word	0x40023c00
 8004c7c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d025      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x26a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d013      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x26a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x26a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x26a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004cba:	d004      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x26a>
 8004cbc:	f240 21ba 	movw	r1, #698	; 0x2ba
 8004cc0:	4828      	ldr	r0, [pc, #160]	; (8004d64 <HAL_RCC_ClockConfig+0x308>)
 8004cc2:	f7fb feb0 	bl	8000a26 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc6:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCC_ClockConfig+0x30c>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	4925      	ldr	r1, [pc, #148]	; (8004d68 <HAL_RCC_ClockConfig+0x30c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d026      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d018      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x2c2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf4:	d013      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x2c2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cfe:	d00e      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x2c2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004d08:	d009      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x2c2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004d12:	d004      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x2c2>
 8004d14:	f240 21c1 	movw	r1, #705	; 0x2c1
 8004d18:	4812      	ldr	r0, [pc, #72]	; (8004d64 <HAL_RCC_ClockConfig+0x308>)
 8004d1a:	f7fb fe84 	bl	8000a26 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_RCC_ClockConfig+0x30c>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	490e      	ldr	r1, [pc, #56]	; (8004d68 <HAL_RCC_ClockConfig+0x30c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d32:	f000 f82d 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d36:	4601      	mov	r1, r0
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <HAL_RCC_ClockConfig+0x30c>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <HAL_RCC_ClockConfig+0x310>)
 8004d44:	5cd3      	ldrb	r3, [r2, r3]
 8004d46:	fa21 f303 	lsr.w	r3, r1, r3
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x314>)
 8004d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_RCC_ClockConfig+0x318>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb ff6a 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	08008df4 	.word	0x08008df4
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	08008ea0 	.word	0x08008ea0
 8004d70:	20000000 	.word	0x20000000
 8004d74:	20000004 	.word	0x20000004

08004d78 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <HAL_RCC_EnableCSS+0x14>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	4247004c 	.word	0x4247004c

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da6:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x32>
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d008      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x38>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 808d 	bne.w	8004ed6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <HAL_RCC_GetSysClockFreq+0x15c>)
 8004dbe:	60bb      	str	r3, [r7, #8]
       break;
 8004dc0:	e08c      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc2:	4b4b      	ldr	r3, [pc, #300]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dc4:	60bb      	str	r3, [r7, #8]
      break;
 8004dc6:	e089      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc8:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd2:	4b45      	ldr	r3, [pc, #276]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d023      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dde:	4b42      	ldr	r3, [pc, #264]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	f04f 0400 	mov.w	r4, #0
 8004de8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	ea03 0501 	and.w	r5, r3, r1
 8004df4:	ea04 0602 	and.w	r6, r4, r2
 8004df8:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dfa:	fb02 f106 	mul.w	r1, r2, r6
 8004dfe:	2200      	movs	r2, #0
 8004e00:	fb02 f205 	mul.w	r2, r2, r5
 8004e04:	440a      	add	r2, r1
 8004e06:	493a      	ldr	r1, [pc, #232]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e08:	fba5 0101 	umull	r0, r1, r5, r1
 8004e0c:	1853      	adds	r3, r2, r1
 8004e0e:	4619      	mov	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	461a      	mov	r2, r3
 8004e18:	4623      	mov	r3, r4
 8004e1a:	f7fb f9db 	bl	80001d4 <__aeabi_uldivmod>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e049      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	ea03 0501 	and.w	r5, r3, r1
 8004e3c:	ea04 0602 	and.w	r6, r4, r2
 8004e40:	4629      	mov	r1, r5
 8004e42:	4632      	mov	r2, r6
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	f04f 0400 	mov.w	r4, #0
 8004e4c:	0154      	lsls	r4, r2, #5
 8004e4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e52:	014b      	lsls	r3, r1, #5
 8004e54:	4619      	mov	r1, r3
 8004e56:	4622      	mov	r2, r4
 8004e58:	1b49      	subs	r1, r1, r5
 8004e5a:	eb62 0206 	sbc.w	r2, r2, r6
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	f04f 0400 	mov.w	r4, #0
 8004e66:	0194      	lsls	r4, r2, #6
 8004e68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e6c:	018b      	lsls	r3, r1, #6
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	eb64 0402 	sbc.w	r4, r4, r2
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	00e2      	lsls	r2, r4, #3
 8004e7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e82:	00d9      	lsls	r1, r3, #3
 8004e84:	460b      	mov	r3, r1
 8004e86:	4614      	mov	r4, r2
 8004e88:	195b      	adds	r3, r3, r5
 8004e8a:	eb44 0406 	adc.w	r4, r4, r6
 8004e8e:	f04f 0100 	mov.w	r1, #0
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	02a2      	lsls	r2, r4, #10
 8004e98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e9c:	0299      	lsls	r1, r3, #10
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f04f 0400 	mov.w	r4, #0
 8004eac:	461a      	mov	r2, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	f7fb f990 	bl	80001d4 <__aeabi_uldivmod>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	0c1b      	lsrs	r3, r3, #16
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	60bb      	str	r3, [r7, #8]
      break;
 8004ed4:	e002      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ed8:	60bb      	str	r3, [r7, #8]
      break;
 8004eda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004edc:	68bb      	ldr	r3, [r7, #8]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	017d7840 	.word	0x017d7840

08004ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000000 	.word	0x20000000

08004f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f10:	f7ff fff0 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f14:	4601      	mov	r1, r0
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0a9b      	lsrs	r3, r3, #10
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4a03      	ldr	r2, [pc, #12]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	08008eb0 	.word	0x08008eb0

08004f34 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f40:	2b80      	cmp	r3, #128	; 0x80
 8004f42:	d104      	bne.n	8004f4e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004f44:	f000 f80a 	bl	8004f5c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	701a      	strb	r2, [r3, #0]
  }
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	4002380e 	.word	0x4002380e

08004f5c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d904      	bls.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004f8c:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004f90:	4899      	ldr	r0, [pc, #612]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004f92:	f7fb fd48 	bl	8000a26 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d105      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d050      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d903      	bls.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b07      	cmp	r3, #7
 8004fbc:	d904      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fbe:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004fc2:	488d      	ldr	r0, [pc, #564]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004fc4:	f7fb fd2f 	bl	8000a26 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b31      	cmp	r3, #49	; 0x31
 8004fce:	d904      	bls.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004fd8:	d904      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004fda:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004fde:	4886      	ldr	r0, [pc, #536]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004fe0:	f7fb fd21 	bl	8000a26 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fe4:	4b85      	ldr	r3, [pc, #532]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fea:	f7fb fe63 	bl	8000cb4 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ff2:	f7fb fe5f 	bl	8000cb4 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e1aa      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005004:	4b7e      	ldr	r3, [pc, #504]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	019a      	lsls	r2, r3, #6
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	071b      	lsls	r3, r3, #28
 800501c:	4978      	ldr	r1, [pc, #480]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005024:	4b75      	ldr	r3, [pc, #468]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502a:	f7fb fe43 	bl	8000cb4 <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005032:	f7fb fe3f 	bl	8000cb4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e18a      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005044:	4b6e      	ldr	r3, [pc, #440]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8173 	beq.w	8005344 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	f000 80a6 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005072:	f000 80a0 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	4a62      	ldr	r2, [pc, #392]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800507c:	4293      	cmp	r3, r2
 800507e:	f000 809a 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4a60      	ldr	r2, [pc, #384]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	f000 8094 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4a5e      	ldr	r2, [pc, #376]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	f000 808e 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4a5c      	ldr	r2, [pc, #368]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	f000 8088 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4a5a      	ldr	r2, [pc, #360]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	f000 8082 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	4a58      	ldr	r2, [pc, #352]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d07c      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4a56      	ldr	r2, [pc, #344]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d077      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4a55      	ldr	r2, [pc, #340]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d072      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a53      	ldr	r2, [pc, #332]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d06d      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	4a52      	ldr	r2, [pc, #328]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d068      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4a50      	ldr	r2, [pc, #320]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d063      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	4a4f      	ldr	r2, [pc, #316]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d05e      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a4d      	ldr	r2, [pc, #308]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d059      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4a4c      	ldr	r2, [pc, #304]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d054      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a4a      	ldr	r2, [pc, #296]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04f      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a49      	ldr	r2, [pc, #292]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d04a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a47      	ldr	r2, [pc, #284]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d045      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4a46      	ldr	r2, [pc, #280]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d040      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a44      	ldr	r2, [pc, #272]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d03b      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	4a43      	ldr	r2, [pc, #268]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d036      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a41      	ldr	r2, [pc, #260]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d031      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4a40      	ldr	r2, [pc, #256]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d02c      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a3e      	ldr	r2, [pc, #248]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d027      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	4a3d      	ldr	r2, [pc, #244]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d022      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a3b      	ldr	r2, [pc, #236]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01d      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4a3a      	ldr	r2, [pc, #232]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d018      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a38      	ldr	r2, [pc, #224]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	4a37      	ldr	r2, [pc, #220]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a35      	ldr	r2, [pc, #212]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4a34      	ldr	r2, [pc, #208]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80051ac:	f640 2112 	movw	r1, #2578	; 0xa12
 80051b0:	4811      	ldr	r0, [pc, #68]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051b2:	f7fb fc38 	bl	8000a26 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a10      	ldr	r2, [pc, #64]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a29      	ldr	r2, [pc, #164]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051de:	f7fb fd69 	bl	8000cb4 <HAL_GetTick>
 80051e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051e4:	e04c      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x314>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7fb fd65 	bl	8000cb4 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d945      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0b0      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80051f8:	08008e2c 	.word	0x08008e2c
 80051fc:	42470068 	.word	0x42470068
 8005200:	40023800 	.word	0x40023800
 8005204:	00020300 	.word	0x00020300
 8005208:	00030300 	.word	0x00030300
 800520c:	00040300 	.word	0x00040300
 8005210:	00050300 	.word	0x00050300
 8005214:	00060300 	.word	0x00060300
 8005218:	00070300 	.word	0x00070300
 800521c:	00080300 	.word	0x00080300
 8005220:	00090300 	.word	0x00090300
 8005224:	000a0300 	.word	0x000a0300
 8005228:	000b0300 	.word	0x000b0300
 800522c:	000c0300 	.word	0x000c0300
 8005230:	000d0300 	.word	0x000d0300
 8005234:	000e0300 	.word	0x000e0300
 8005238:	000f0300 	.word	0x000f0300
 800523c:	00100300 	.word	0x00100300
 8005240:	00110300 	.word	0x00110300
 8005244:	00120300 	.word	0x00120300
 8005248:	00130300 	.word	0x00130300
 800524c:	00140300 	.word	0x00140300
 8005250:	00150300 	.word	0x00150300
 8005254:	00160300 	.word	0x00160300
 8005258:	00170300 	.word	0x00170300
 800525c:	00180300 	.word	0x00180300
 8005260:	00190300 	.word	0x00190300
 8005264:	001a0300 	.word	0x001a0300
 8005268:	001b0300 	.word	0x001b0300
 800526c:	001c0300 	.word	0x001c0300
 8005270:	001d0300 	.word	0x001d0300
 8005274:	001e0300 	.word	0x001e0300
 8005278:	001f0300 	.word	0x001f0300
 800527c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005280:	4b38      	ldr	r3, [pc, #224]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ac      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800528c:	4b36      	ldr	r3, [pc, #216]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005294:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02f      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x390>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d028      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052aa:	4b2f      	ldr	r3, [pc, #188]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b4:	4b2d      	ldr	r3, [pc, #180]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ba:	4b2c      	ldr	r3, [pc, #176]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052c0:	4a29      	ldr	r2, [pc, #164]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052c6:	4b28      	ldr	r3, [pc, #160]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d114      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x390>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fb fcef 	bl	8000cb4 <HAL_GetTick>
 80052d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fb fceb 	bl	8000cb4 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e034      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ee      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x36e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005308:	d10d      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800531a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531e:	4912      	ldr	r1, [pc, #72]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4a0f      	ldr	r2, [pc, #60]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800532c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533e:	490a      	ldr	r1, [pc, #40]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7c1a      	ldrb	r2, [r3, #16]
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8005356:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40007000 	.word	0x40007000
 8005368:	40023800 	.word	0x40023800
 800536c:	42470e40 	.word	0x42470e40
 8005370:	424711e0 	.word	0x424711e0

08005374 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d13d      	bne.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005392:	4b22      	ldr	r3, [pc, #136]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800539a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d12f      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053a8:	617b      	str	r3, [r7, #20]
          break;
 80053aa:	e02f      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b8:	d108      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e007      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053dc:	4b0f      	ldr	r3, [pc, #60]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053f0:	4b0a      	ldr	r3, [pc, #40]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	0f1b      	lsrs	r3, r3, #28
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	617b      	str	r3, [r7, #20]
          break;
 8005404:	e002      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
          break;
 800540a:	bf00      	nop
        }
      }
      break;
 800540c:	bf00      	nop
    }
  }
  return frequency;
 800540e:	697b      	ldr	r3, [r7, #20]
}
 8005410:	4618      	mov	r0, r3
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40023800 	.word	0x40023800
 8005420:	00bb8000 	.word	0x00bb8000
 8005424:	017d7840 	.word	0x017d7840
 8005428:	00f42400 	.word	0x00f42400

0800542c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800542c:	b084      	sub	sp, #16
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	f107 001c 	add.w	r0, r7, #28
 800543a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	2b01      	cmp	r3, #1
 8005442:	d122      	bne.n	800548a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 fa7c 	bl	800697c <USB_CoreReset>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	e01a      	b.n	80054c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f001 fa70 	bl	800697c <USB_CoreReset>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
 80054b2:	e005      	b.n	80054c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10b      	bne.n	80054de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f043 0206 	orr.w	r2, r3, #6
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ea:	b004      	add	sp, #16
 80054ec:	4770      	bx	lr
	...

080054f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d165      	bne.n	80055d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4a41      	ldr	r2, [pc, #260]	; (800560c <USB_SetTurnaroundTime+0x11c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d906      	bls.n	800551a <USB_SetTurnaroundTime+0x2a>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a40      	ldr	r2, [pc, #256]	; (8005610 <USB_SetTurnaroundTime+0x120>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d802      	bhi.n	800551a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005514:	230f      	movs	r3, #15
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e062      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4a3c      	ldr	r2, [pc, #240]	; (8005610 <USB_SetTurnaroundTime+0x120>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d906      	bls.n	8005530 <USB_SetTurnaroundTime+0x40>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4a3b      	ldr	r2, [pc, #236]	; (8005614 <USB_SetTurnaroundTime+0x124>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d802      	bhi.n	8005530 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800552a:	230e      	movs	r3, #14
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e057      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4a38      	ldr	r2, [pc, #224]	; (8005614 <USB_SetTurnaroundTime+0x124>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d906      	bls.n	8005546 <USB_SetTurnaroundTime+0x56>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4a37      	ldr	r2, [pc, #220]	; (8005618 <USB_SetTurnaroundTime+0x128>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d802      	bhi.n	8005546 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005540:	230d      	movs	r3, #13
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e04c      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4a33      	ldr	r2, [pc, #204]	; (8005618 <USB_SetTurnaroundTime+0x128>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d906      	bls.n	800555c <USB_SetTurnaroundTime+0x6c>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4a32      	ldr	r2, [pc, #200]	; (800561c <USB_SetTurnaroundTime+0x12c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d802      	bhi.n	800555c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005556:	230c      	movs	r3, #12
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e041      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4a2f      	ldr	r2, [pc, #188]	; (800561c <USB_SetTurnaroundTime+0x12c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d906      	bls.n	8005572 <USB_SetTurnaroundTime+0x82>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a2e      	ldr	r2, [pc, #184]	; (8005620 <USB_SetTurnaroundTime+0x130>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d802      	bhi.n	8005572 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800556c:	230b      	movs	r3, #11
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e036      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <USB_SetTurnaroundTime+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d906      	bls.n	8005588 <USB_SetTurnaroundTime+0x98>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <USB_SetTurnaroundTime+0x134>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d802      	bhi.n	8005588 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005582:	230a      	movs	r3, #10
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e02b      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4a26      	ldr	r2, [pc, #152]	; (8005624 <USB_SetTurnaroundTime+0x134>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d906      	bls.n	800559e <USB_SetTurnaroundTime+0xae>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a25      	ldr	r2, [pc, #148]	; (8005628 <USB_SetTurnaroundTime+0x138>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d802      	bhi.n	800559e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005598:	2309      	movs	r3, #9
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e020      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4a21      	ldr	r2, [pc, #132]	; (8005628 <USB_SetTurnaroundTime+0x138>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d906      	bls.n	80055b4 <USB_SetTurnaroundTime+0xc4>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a20      	ldr	r2, [pc, #128]	; (800562c <USB_SetTurnaroundTime+0x13c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d802      	bhi.n	80055b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055ae:	2308      	movs	r3, #8
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	e015      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4a1d      	ldr	r2, [pc, #116]	; (800562c <USB_SetTurnaroundTime+0x13c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d906      	bls.n	80055ca <USB_SetTurnaroundTime+0xda>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a1c      	ldr	r2, [pc, #112]	; (8005630 <USB_SetTurnaroundTime+0x140>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d802      	bhi.n	80055ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055c4:	2307      	movs	r3, #7
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e00a      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055ca:	2306      	movs	r3, #6
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e007      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055d6:	2309      	movs	r3, #9
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	e001      	b.n	80055e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055dc:	2309      	movs	r3, #9
 80055de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	029b      	lsls	r3, r3, #10
 80055f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	00d8acbf 	.word	0x00d8acbf
 8005610:	00e4e1bf 	.word	0x00e4e1bf
 8005614:	00f423ff 	.word	0x00f423ff
 8005618:	0106737f 	.word	0x0106737f
 800561c:	011a499f 	.word	0x011a499f
 8005620:	01312cff 	.word	0x01312cff
 8005624:	014ca43f 	.word	0x014ca43f
 8005628:	016e35ff 	.word	0x016e35ff
 800562c:	01a6ab1f 	.word	0x01a6ab1f
 8005630:	01e847ff 	.word	0x01e847ff

08005634 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f043 0201 	orr.w	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d106      	bne.n	80056a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	e00b      	b.n	80056bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	e001      	b.n	80056bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e003      	b.n	80056c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056bc:	2032      	movs	r0, #50	; 0x32
 80056be:	f7fb fb05 	bl	8000ccc <HAL_Delay>

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056cc:	b084      	sub	sp, #16
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e009      	b.n	8005700 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3340      	adds	r3, #64	; 0x40
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	3301      	adds	r3, #1
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b0e      	cmp	r3, #14
 8005704:	d9f2      	bls.n	80056ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d112      	bne.n	8005732 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
 8005730:	e00b      	b.n	800574a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005750:	461a      	mov	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	4619      	mov	r1, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	461a      	mov	r2, r3
 8005766:	680b      	ldr	r3, [r1, #0]
 8005768:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10c      	bne.n	800578a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005776:	2100      	movs	r1, #0
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f961 	bl	8005a40 <USB_SetDevSpeed>
 800577e:	e008      	b.n	8005792 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005780:	2101      	movs	r1, #1
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f95c 	bl	8005a40 <USB_SetDevSpeed>
 8005788:	e003      	b.n	8005792 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800578a:	2103      	movs	r1, #3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f957 	bl	8005a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005792:	2110      	movs	r1, #16
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f90b 	bl	80059b0 <USB_FlushTxFifo>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f929 	bl	80059fc <USB_FlushRxFifo>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	e043      	b.n	8005866 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f4:	d118      	bne.n	8005828 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	461a      	mov	r2, r3
 800580a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	e013      	b.n	800583a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	461a      	mov	r2, r3
 8005820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e008      	b.n	800583a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	461a      	mov	r2, r3
 800585a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800585e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3301      	adds	r3, #1
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	429a      	cmp	r2, r3
 800586c:	d3b7      	bcc.n	80057de <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e043      	b.n	80058fc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588a:	d118      	bne.n	80058be <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	461a      	mov	r2, r3
 80058a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e013      	b.n	80058d0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	e008      	b.n	80058d0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	461a      	mov	r2, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3301      	adds	r3, #1
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d3b7      	bcc.n	8005874 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005916:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	2b01      	cmp	r3, #1
 800591c:	d111      	bne.n	8005942 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	461a      	mov	r2, r3
 8005926:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <USB_DevInit+0x2dc>)
 8005928:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593c:	f043 0303 	orr.w	r3, r3, #3
 8005940:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800594e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f043 0210 	orr.w	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	4b11      	ldr	r3, [pc, #68]	; (80059ac <USB_DevInit+0x2e0>)
 8005968:	4313      	orrs	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800596e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f043 0208 	orr.w	r2, r3, #8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d107      	bne.n	8005996 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059a2:	b004      	add	sp, #16
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	00800100 	.word	0x00800100
 80059ac:	803c3800 	.word	0x803c3800

080059b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	019b      	lsls	r3, r3, #6
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <USB_FlushTxFifo+0x48>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d901      	bls.n	80059dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d0f0      	beq.n	80059ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	00030d40 	.word	0x00030d40

080059fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <USB_FlushRxFifo+0x40>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d901      	bls.n	8005a20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e006      	b.n	8005a2e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d0f0      	beq.n	8005a0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	00030d40 	.word	0x00030d40

08005a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a60:	4313      	orrs	r3, r2
 8005a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0306 	and.w	r3, r3, #6
 8005a8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
 8005a96:	e00a      	b.n	8005aae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d002      	beq.n	8005aa4 <USB_GetDevSpeed+0x32>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d102      	bne.n	8005aaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	75fb      	strb	r3, [r7, #23]
 8005aa8:	e001      	b.n	8005aae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005aaa:	230f      	movs	r3, #15
 8005aac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d13a      	bne.n	8005b4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	2101      	movs	r1, #1
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d155      	bne.n	8005bbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	78db      	ldrb	r3, [r3, #3]
 8005b2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	059b      	lsls	r3, r3, #22
 8005b32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b34:	4313      	orrs	r3, r2
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e036      	b.n	8005bbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b54:	69da      	ldr	r2, [r3, #28]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	2101      	movs	r1, #1
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11a      	bne.n	8005bbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	78db      	ldrb	r3, [r3, #3]
 8005ba0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d135      	bne.n	8005c54 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c08:	4013      	ands	r3, r2
 8005c0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	0159      	lsls	r1, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	440b      	add	r3, r1
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <USB_DeactivateEndpoint+0x100>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]
 8005c52:	e034      	b.n	8005cbe <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	2101      	movs	r1, #1
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	041b      	lsls	r3, r3, #16
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c74:	4013      	ands	r3, r2
 8005c76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	2101      	movs	r1, #1
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	43db      	mvns	r3, r3
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	0159      	lsls	r1, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	440b      	add	r3, r1
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <USB_DeactivateEndpoint+0x104>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	ec337800 	.word	0xec337800
 8005cd0:	eff37800 	.word	0xeff37800

08005cd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	f040 815c 	bne.w	8005fae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d132      	bne.n	8005d64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	0cdb      	lsrs	r3, r3, #19
 8005d5e:	04db      	lsls	r3, r3, #19
 8005d60:	6113      	str	r3, [r2, #16]
 8005d62:	e074      	b.n	8005e4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	0cdb      	lsrs	r3, r3, #19
 8005d80:	04db      	lsls	r3, r3, #19
 8005d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6959      	ldr	r1, [r3, #20]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	440b      	add	r3, r1
 8005dc0:	1e59      	subs	r1, r3, #1
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dca:	04d9      	lsls	r1, r3, #19
 8005dcc:	4b9d      	ldr	r3, [pc, #628]	; (8006044 <USB_EPStartXfer+0x370>)
 8005dce:	400b      	ands	r3, r1
 8005dd0:	69b9      	ldr	r1, [r7, #24]
 8005dd2:	0148      	lsls	r0, r1, #5
 8005dd4:	69f9      	ldr	r1, [r7, #28]
 8005dd6:	4401      	add	r1, r0
 8005dd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df6:	69b9      	ldr	r1, [r7, #24]
 8005df8:	0148      	lsls	r0, r1, #5
 8005dfa:	69f9      	ldr	r1, [r7, #28]
 8005dfc:	4401      	add	r1, r0
 8005dfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e02:	4313      	orrs	r3, r2
 8005e04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	78db      	ldrb	r3, [r3, #3]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d11f      	bne.n	8005e4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d14b      	bne.n	8005eec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	78db      	ldrb	r3, [r3, #3]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d128      	bne.n	8005eca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d110      	bne.n	8005eaa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	e00f      	b.n	8005eca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e12f      	b.n	800614c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	78db      	ldrb	r3, [r3, #3]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d015      	beq.n	8005f40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8117 	beq.w	800614c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	2101      	movs	r1, #1
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	69f9      	ldr	r1, [r7, #28]
 8005f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	634b      	str	r3, [r1, #52]	; 0x34
 8005f3e:	e105      	b.n	800614c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d110      	bne.n	8005f72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e00f      	b.n	8005f92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68d9      	ldr	r1, [r3, #12]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781a      	ldrb	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	b298      	uxth	r0, r3
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fa2b 	bl	8006402 <USB_WritePacket>
 8005fac:	e0ce      	b.n	800614c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	0cdb      	lsrs	r3, r3, #19
 8005fca:	04db      	lsls	r3, r3, #19
 8005fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ff0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d126      	bne.n	8006048 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	0148      	lsls	r0, r1, #5
 8006014:	69f9      	ldr	r1, [r7, #28]
 8006016:	4401      	add	r1, r0
 8006018:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800601c:	4313      	orrs	r3, r2
 800601e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800603e:	6113      	str	r3, [r2, #16]
 8006040:	e036      	b.n	80060b0 <USB_EPStartXfer+0x3dc>
 8006042:	bf00      	nop
 8006044:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4413      	add	r3, r2
 8006052:	1e5a      	subs	r2, r3, #1
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	fbb2 f3f3 	udiv	r3, r2, r3
 800605c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	8afb      	ldrh	r3, [r7, #22]
 800606e:	04d9      	lsls	r1, r3, #19
 8006070:	4b39      	ldr	r3, [pc, #228]	; (8006158 <USB_EPStartXfer+0x484>)
 8006072:	400b      	ands	r3, r1
 8006074:	69b9      	ldr	r1, [r7, #24]
 8006076:	0148      	lsls	r0, r1, #5
 8006078:	69f9      	ldr	r1, [r7, #28]
 800607a:	4401      	add	r1, r0
 800607c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006080:	4313      	orrs	r3, r2
 8006082:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	8af9      	ldrh	r1, [r7, #22]
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a0:	69b9      	ldr	r1, [r7, #24]
 80060a2:	0148      	lsls	r0, r1, #5
 80060a4:	69f9      	ldr	r1, [r7, #28]
 80060a6:	4401      	add	r1, r0
 80060a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060ac:	4313      	orrs	r3, r2
 80060ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d10d      	bne.n	80060d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	68d9      	ldr	r1, [r3, #12]
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	460a      	mov	r2, r1
 80060d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	78db      	ldrb	r3, [r3, #3]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d128      	bne.n	800612c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d110      	bne.n	800610c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	e00f      	b.n	800612c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800614a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	1ff80000 	.word	0x1ff80000

0800615c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b01      	cmp	r3, #1
 800617a:	f040 80cd 	bne.w	8006318 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d132      	bne.n	80061ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e4:	0cdb      	lsrs	r3, r3, #19
 80061e6:	04db      	lsls	r3, r3, #19
 80061e8:	6113      	str	r3, [r2, #16]
 80061ea:	e04e      	b.n	800628a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	0cdb      	lsrs	r3, r3, #19
 8006208:	04db      	lsls	r3, r3, #19
 800620a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006226:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800622a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800622e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	695a      	ldr	r2, [r3, #20]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d903      	bls.n	8006244 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	440a      	add	r2, r1
 800625a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627a:	6939      	ldr	r1, [r7, #16]
 800627c:	0148      	lsls	r0, r1, #5
 800627e:	6979      	ldr	r1, [r7, #20]
 8006280:	4401      	add	r1, r0
 8006282:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006286:	4313      	orrs	r3, r2
 8006288:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d11e      	bne.n	80062ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a4:	461a      	mov	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	e092      	b.n	80063f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d07e      	beq.n	80063f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	2101      	movs	r1, #1
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006312:	4313      	orrs	r3, r2
 8006314:	634b      	str	r3, [r1, #52]	; 0x34
 8006316:	e06d      	b.n	80063f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006332:	0cdb      	lsrs	r3, r3, #19
 8006334:	04db      	lsls	r3, r3, #19
 8006336:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006352:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006356:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800635a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800638a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a2:	6939      	ldr	r1, [r7, #16]
 80063a4:	0148      	lsls	r0, r1, #5
 80063a6:	6979      	ldr	r1, [r7, #20]
 80063a8:	4401      	add	r1, r0
 80063aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063ae:	4313      	orrs	r3, r2
 80063b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d10d      	bne.n	80063d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	68d9      	ldr	r1, [r3, #12]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	460a      	mov	r2, r1
 80063d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006402:	b480      	push	{r7}
 8006404:	b089      	sub	sp, #36	; 0x24
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	4611      	mov	r1, r2
 800640e:	461a      	mov	r2, r3
 8006410:	460b      	mov	r3, r1
 8006412:	71fb      	strb	r3, [r7, #7]
 8006414:	4613      	mov	r3, r2
 8006416:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006420:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11a      	bne.n	800645e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006428:	88bb      	ldrh	r3, [r7, #4]
 800642a:	3303      	adds	r3, #3
 800642c:	089b      	lsrs	r3, r3, #2
 800642e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006430:	2300      	movs	r3, #0
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e00f      	b.n	8006456 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	031a      	lsls	r2, r3, #12
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	461a      	mov	r2, r3
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6013      	str	r3, [r2, #0]
      pSrc++;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3304      	adds	r3, #4
 800644e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	3301      	adds	r3, #1
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	d3eb      	bcc.n	8006436 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3724      	adds	r7, #36	; 0x24
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	; 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	3303      	adds	r3, #3
 8006486:	089b      	lsrs	r3, r3, #2
 8006488:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800648a:	2300      	movs	r3, #0
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	e00b      	b.n	80064a8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	601a      	str	r2, [r3, #0]
    pDest++;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3304      	adds	r3, #4
 80064a0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	3301      	adds	r3, #1
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d3ef      	bcc.n	8006490 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064b0:	69fb      	ldr	r3, [r7, #28]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3724      	adds	r7, #36	; 0x24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d12c      	bne.n	8006534 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	db12      	blt.n	8006512 <USB_EPSetStall+0x54>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00f      	beq.n	8006512 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006510:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e02b      	b.n	800658c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db12      	blt.n	800656c <USB_EPSetStall+0xae>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00f      	beq.n	800656c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800656a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d128      	bne.n	8006608 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	78db      	ldrb	r3, [r3, #3]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d003      	beq.n	80065e6 <USB_EPClearStall+0x4c>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	78db      	ldrb	r3, [r3, #3]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d138      	bne.n	8006658 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e027      	b.n	8006658 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	440a      	add	r2, r1
 800661e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006626:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d003      	beq.n	8006638 <USB_EPClearStall+0x9e>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	78db      	ldrb	r3, [r3, #3]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d10f      	bne.n	8006658 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006656:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006684:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006688:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a0:	4313      	orrs	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066cc:	f023 0302 	bic.w	r3, r3, #2
 80066d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80066d2:	2003      	movs	r0, #3
 80066d4:	f7fa fafa 	bl	8000ccc <HAL_Delay>

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fc:	f043 0302 	orr.w	r3, r3, #2
 8006700:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006702:	2003      	movs	r0, #3
 8006704:	f7fa fae2 	bl	8000ccc <HAL_Delay>

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4013      	ands	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800672a:	68fb      	ldr	r3, [r7, #12]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4013      	ands	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	0c1b      	lsrs	r3, r3, #16
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4013      	ands	r3, r2
 800678e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	b29b      	uxth	r3, r3
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	4013      	ands	r3, r2
 80067cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067ce:	68bb      	ldr	r3, [r7, #8]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
 800680c:	01db      	lsls	r3, r3, #7
 800680e:	b2db      	uxtb	r3, r3
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4013      	ands	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800682a:	68bb      	ldr	r3, [r7, #8]
}
 800682c:	4618      	mov	r0, r3
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f003 0301 	and.w	r3, r3, #1
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006872:	f023 0307 	bic.w	r3, r3, #7
 8006876:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0306 	and.w	r3, r3, #6
 8006884:	2b04      	cmp	r3, #4
 8006886:	d109      	bne.n	800689c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006896:	f043 0303 	orr.w	r3, r3, #3
 800689a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	460b      	mov	r3, r1
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	333c      	adds	r3, #60	; 0x3c
 80068d6:	3304      	adds	r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4a26      	ldr	r2, [pc, #152]	; (8006978 <USB_EP0_OutStart+0xb8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d90a      	bls.n	80068fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f4:	d101      	bne.n	80068fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e037      	b.n	800696a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	2300      	movs	r3, #0
 8006904:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006928:	f043 0318 	orr.w	r3, r3, #24
 800692c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006940:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10f      	bne.n	8006968 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006962:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	4f54300a 	.word	0x4f54300a

0800697c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <USB_CoreReset+0x64>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e01b      	b.n	80069d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	daf2      	bge.n	8006988 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <USB_CoreReset+0x64>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d901      	bls.n	80069c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e006      	b.n	80069d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d0f0      	beq.n	80069b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	00030d40 	.word	0x00030d40

080069e4 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80069f0:	23b0      	movs	r3, #176	; 0xb0
 80069f2:	2201      	movs	r2, #1
 80069f4:	2101      	movs	r1, #1
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 ff07 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 8006a04:	f243 7050 	movw	r0, #14160	; 0x3750
 8006a08:	f002 f86a 	bl	8008ae0 <malloc>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <USBD_AUDIO_Init+0x40>
  {
    return USBD_FAIL;
 8006a20:	2302      	movs	r3, #2
 8006a22:	e034      	b.n	8006a8e <USBD_AUDIO_Init+0xaa>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a2a:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006a38:	3304      	adds	r3, #4
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	701a      	strb	r2, [r3, #0]
    haudio->wr_ptr = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006a44:	3308      	adds	r3, #8
 8006a46:	2200      	movs	r2, #0
 8006a48:	801a      	strh	r2, [r3, #0]
    haudio->rd_ptr = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006a50:	3306      	adds	r3, #6
 8006a52:	2200      	movs	r2, #0
 8006a54:	801a      	strh	r2, [r3, #0]
    haudio->rd_enable = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006a5c:	3305      	adds	r3, #5
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2146      	movs	r1, #70	; 0x46
 8006a6e:	f64a 4044 	movw	r0, #44100	; 0xac44
 8006a72:	4798      	blx	r3
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <USBD_AUDIO_Init+0x9a>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e007      	b.n	8006a8e <USBD_AUDIO_Init+0xaa>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1d1a      	adds	r2, r3, #4
 8006a82:	23b0      	movs	r3, #176	; 0xb0
 8006a84:	2101      	movs	r1, #1
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 ffb0 	bl	80089ec <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }
  return USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	70fb      	strb	r3, [r7, #3]

  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fed6 	bl	8008856 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00f      	beq.n	8006adc <USBD_AUDIO_DeInit+0x46>
  {
   ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f002 f80e 	bl	8008af0 <free>
    pdev->pClassData = NULL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b00:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01a      	beq.n	8006b44 <USBD_AUDIO_Setup+0x5c>
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	f040 809c 	bne.w	8006c4c <USBD_AUDIO_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d006      	beq.n	8006b2a <USBD_AUDIO_Setup+0x42>
 8006b1c:	2b81      	cmp	r3, #129	; 0x81
 8006b1e:	d109      	bne.n	8006b34 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa2a 	bl	8006f7c <AUDIO_REQ_GetCurrent>
      break;
 8006b28:	e00b      	b.n	8006b42 <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa45 	bl	8006fbc <AUDIO_REQ_SetCurrent>
      break;
 8006b32:	e006      	b.n	8006b42 <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError (pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fa03 	bl	8007f42 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b40:	bf00      	nop
    }
    break;
 8006b42:	e08a      	b.n	8006c5a <USBD_AUDIO_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b0b      	cmp	r3, #11
 8006b4a:	d876      	bhi.n	8006c3a <USBD_AUDIO_Setup+0x152>
 8006b4c:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <USBD_AUDIO_Setup+0x6c>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b85 	.word	0x08006b85
 8006b58:	08006c3b 	.word	0x08006c3b
 8006b5c:	08006c3b 	.word	0x08006c3b
 8006b60:	08006c3b 	.word	0x08006c3b
 8006b64:	08006c3b 	.word	0x08006c3b
 8006b68:	08006c3b 	.word	0x08006c3b
 8006b6c:	08006bad 	.word	0x08006bad
 8006b70:	08006c3b 	.word	0x08006c3b
 8006b74:	08006c3b 	.word	0x08006c3b
 8006b78:	08006c3b 	.word	0x08006c3b
 8006b7c:	08006bd7 	.word	0x08006bd7
 8006b80:	08006bfd 	.word	0x08006bfd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d107      	bne.n	8006b9e <USBD_AUDIO_Setup+0xb6>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	2202      	movs	r2, #2
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fa3e 	bl	8008018 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
                         ret = USBD_FAIL;
      }
      break;
 8006b9c:	e055      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f9ce 	bl	8007f42 <USBD_CtlError>
                         ret = USBD_FAIL;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8006baa:	e04e      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>

    case USB_REQ_GET_DESCRIPTOR:
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	885b      	ldrh	r3, [r3, #2]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b21      	cmp	r3, #33	; 0x21
 8006bb6:	d147      	bne.n	8006c48 <USBD_AUDIO_Setup+0x160>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8006bb8:	4b2a      	ldr	r3, [pc, #168]	; (8006c64 <USBD_AUDIO_Setup+0x17c>)
 8006bba:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	88db      	ldrh	r3, [r3, #6]
 8006bc0:	2b09      	cmp	r3, #9
 8006bc2:	bf28      	it	cs
 8006bc4:	2309      	movcs	r3, #9
 8006bc6:	817b      	strh	r3, [r7, #10]

        USBD_CtlSendData (pdev, pbuf, len);
 8006bc8:	897b      	ldrh	r3, [r7, #10]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fa22 	bl	8008018 <USBD_CtlSendData>
      }
      break;
 8006bd4:	e038      	b.n	8006c48 <USBD_AUDIO_Setup+0x160>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d106      	bne.n	8006bee <USBD_AUDIO_Setup+0x106>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2201      	movs	r2, #1
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fa16 	bl	8008018 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006bec:	e02d      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f9a6 	bl	8007f42 <USBD_CtlError>
        ret = USBD_FAIL;
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfa:	e026      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d112      	bne.n	8006c2c <USBD_AUDIO_Setup+0x144>
      {
         if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d806      	bhi.n	8006c1e <USBD_AUDIO_Setup+0x136>
         {
           haudio->alt_setting = (uint8_t)(req->wValue);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c1c:	e015      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>
           USBD_CtlError (pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f98e 	bl	8007f42 <USBD_CtlError>
           ret = USBD_FAIL;
 8006c26:	2302      	movs	r3, #2
 8006c28:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2a:	e00e      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 f987 	bl	8007f42 <USBD_CtlError>
        ret = USBD_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e007      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>

    default:
      USBD_CtlError (pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f980 	bl	8007f42 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	75fb      	strb	r3, [r7, #23]
      break;
 8006c46:	e000      	b.n	8006c4a <USBD_AUDIO_Setup+0x162>
      break;
 8006c48:	bf00      	nop
    }
    break;
 8006c4a:	e006      	b.n	8006c5a <USBD_AUDIO_Setup+0x172>
  default:
    USBD_CtlError (pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f977 	bl	8007f42 <USBD_CtlError>
    ret = USBD_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	75fb      	strb	r3, [r7, #23]
    break;
 8006c58:	bf00      	nop
  }

  return ret;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000056 	.word	0x20000056

08006c68 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	226d      	movs	r2, #109	; 0x6d
 8006c74:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 8006c76:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	20000044 	.word	0x20000044

08006c88 <USBD_AUDIO_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]

  /* Only OUT data are processed */
  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cb0:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006cb8:	330a      	adds	r3, #10
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d11d      	bne.n	8006cfc <USBD_AUDIO_EP0_RxReady+0x5a>
  {/* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 535d 	add.w	r3, r3, #14144	; 0x3740
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d116      	bne.n	8006cfc <USBD_AUDIO_EP0_RxReady+0x5a>
    {
     ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006cdc:	330b      	adds	r3, #11
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	4790      	blx	r2
      haudio->control.cmd = 0U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006cea:	330a      	adds	r3, #10
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 535d 	add.w	r3, r3, #14144	; 0x3740
 8006cf6:	330b      	adds	r3, #11
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
    }
  }

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USBD_AUDIO_Sync>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
void  USBD_AUDIO_Sync (USBD_HandleTypeDef *pdev, AUDIO_OffsetTypeDef offset)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t cmd = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d48:	60bb      	str	r3, [r7, #8]

  haudio->offset =  offset;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006d50:	3304      	adds	r3, #4
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	701a      	strb	r2, [r3, #0]

  if(haudio->rd_enable == 1U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006d5c:	3305      	adds	r3, #5
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d11a      	bne.n	8006d9a <USBD_AUDIO_Sync+0x68>
  {
    haudio->rd_ptr += (uint16_t)(AUDIO_TOTAL_BUF_SIZE / 2U);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006d6a:	3306      	adds	r3, #6
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006d7a:	3306      	adds	r3, #6
 8006d7c:	801a      	strh	r2, [r3, #0]

    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006d84:	3306      	adds	r3, #6
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	f5b3 5f5c 	cmp.w	r3, #14080	; 0x3700
 8006d8c:	d105      	bne.n	8006d9a <USBD_AUDIO_Sync+0x68>
    {
      /* roll back */
      haudio->rd_ptr = 0U;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006d94:	3306      	adds	r3, #6
 8006d96:	2200      	movs	r2, #0
 8006d98:	801a      	strh	r2, [r3, #0]
    }
  }

  if(haudio->rd_ptr > haudio->wr_ptr)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006da0:	3306      	adds	r3, #6
 8006da2:	881a      	ldrh	r2, [r3, #0]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006daa:	3308      	adds	r3, #8
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d925      	bls.n	8006dfe <USBD_AUDIO_Sync+0xcc>
  {
    if((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006db8:	3306      	adds	r3, #6
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2baf      	cmp	r3, #175	; 0xaf
 8006dcc:	dc03      	bgt.n	8006dd6 <USBD_AUDIO_Sync+0xa4>
    {
      cmd = AUDIO_TOTAL_BUF_SIZE / 2U + 4U;
 8006dce:	f641 3384 	movw	r3, #7044	; 0x1b84
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e038      	b.n	8006e48 <USBD_AUDIO_Sync+0x116>
    }
    else
    {
      if((haudio->rd_ptr - haudio->wr_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006ddc:	3306      	adds	r3, #6
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006de8:	3308      	adds	r3, #8
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f243 6250 	movw	r2, #13904	; 0x3650
 8006df2:	4293      	cmp	r3, r2
 8006df4:	dd28      	ble.n	8006e48 <USBD_AUDIO_Sync+0x116>
      {
        cmd = AUDIO_TOTAL_BUF_SIZE / 2U - 4U;
 8006df6:	f641 337c 	movw	r3, #7036	; 0x1b7c
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e024      	b.n	8006e48 <USBD_AUDIO_Sync+0x116>
      }
    }
  }
  else
  {
    if((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006e04:	3308      	adds	r3, #8
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006e10:	3306      	adds	r3, #6
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2baf      	cmp	r3, #175	; 0xaf
 8006e18:	dc03      	bgt.n	8006e22 <USBD_AUDIO_Sync+0xf0>
    {
      cmd = AUDIO_TOTAL_BUF_SIZE / 2U - 4U;
 8006e1a:	f641 337c 	movw	r3, #7036	; 0x1b7c
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e012      	b.n	8006e48 <USBD_AUDIO_Sync+0x116>
    }
    else
    {
      if((haudio->wr_ptr - haudio->rd_ptr) > (AUDIO_TOTAL_BUF_SIZE - AUDIO_OUT_PACKET))
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006e28:	3308      	adds	r3, #8
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006e34:	3306      	adds	r3, #6
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	f243 6250 	movw	r2, #13904	; 0x3650
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	dd02      	ble.n	8006e48 <USBD_AUDIO_Sync+0x116>
      {
        cmd = AUDIO_TOTAL_BUF_SIZE / 2U + 4U;
 8006e42:	f641 3384 	movw	r3, #7044	; 0x1b84
 8006e46:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  if(haudio->offset == AUDIO_OFFSET_FULL)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006e4e:	3304      	adds	r3, #4
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d10e      	bne.n	8006e74 <USBD_AUDIO_Sync+0x142>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	1d10      	adds	r0, r2, #4
 8006e62:	2202      	movs	r2, #2
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	4798      	blx	r3
                                                         cmd,
                                                         AUDIO_CMD_PLAY);
      haudio->offset = AUDIO_OFFSET_NONE;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006e6e:	3304      	adds	r3, #4
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
  }
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBD_AUDIO_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ec2:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d153      	bne.n	8006f72 <USBD_AUDIO_DataOut+0xc2>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	33b0      	adds	r3, #176	; 0xb0
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006ede:	3308      	adds	r3, #8
 8006ee0:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006ee8:	3308      	adds	r3, #8
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	f5b3 5f5c 	cmp.w	r3, #14080	; 0x3700
 8006ef0:	d11c      	bne.n	8006f2c <USBD_AUDIO_DataOut+0x7c>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006ef8:	3308      	adds	r3, #8
 8006efa:	2200      	movs	r2, #0
 8006efc:	801a      	strh	r2, [r3, #0]

      if(haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006f04:	3304      	adds	r3, #4
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d10f      	bne.n	8006f2c <USBD_AUDIO_DataOut+0x7c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	1d10      	adds	r0, r2, #4
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f44f 51dc 	mov.w	r1, #7040	; 0x1b80
 8006f1e:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
          haudio->offset = AUDIO_OFFSET_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006f26:	3304      	adds	r3, #4
 8006f28:	2200      	movs	r2, #0
 8006f2a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(haudio->rd_enable == 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006f32:	3305      	adds	r3, #5
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10d      	bne.n	8006f56 <USBD_AUDIO_DataOut+0xa6>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006f40:	3308      	adds	r3, #8
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8006f48:	d105      	bne.n	8006f56 <USBD_AUDIO_DataOut+0xa6>
      {
        haudio->rd_enable = 1U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006f50:	3305      	adds	r3, #5
 8006f52:	2201      	movs	r2, #1
 8006f54:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	1d1a      	adds	r2, r3, #4
 8006f68:	23b0      	movs	r3, #176	; 0xb0
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 fd3d 	bl	80089ec <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f8c:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006f94:	330b      	adds	r3, #11
 8006f96:	2240      	movs	r2, #64	; 0x40
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fdb0 	bl	8008b00 <memset>

  /* Send the current mute state */
  USBD_CtlSendData (pdev, haudio->control.data, req->wLength);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006fa6:	330b      	adds	r3, #11
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	88d2      	ldrh	r2, [r2, #6]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f832 	bl	8008018 <USBD_CtlSendData>
}
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fcc:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	88db      	ldrh	r3, [r3, #6]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d021      	beq.n	800701a <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       haudio->control.data,
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006fdc:	330b      	adds	r3, #11
    USBD_CtlPrepareRx (pdev,
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	88d2      	ldrh	r2, [r2, #6]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 f845 	bl	8008074 <USBD_CtlPrepareRx>
                       req->wLength);

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f503 535c 	add.w	r3, r3, #14080	; 0x3700
 8006ff0:	330a      	adds	r3, #10
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	88db      	ldrh	r3, [r3, #6]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 535d 	add.w	r3, r3, #14144	; 0x3740
 8007002:	330b      	adds	r3, #11
 8007004:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	889b      	ldrh	r3, [r3, #4]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b29b      	uxth	r3, r3
 800700e:	b2da      	uxtb	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 535d 	add.w	r3, r3, #14144	; 0x3740
 8007016:	330c      	adds	r3, #12
 8007018:	701a      	strb	r2, [r3, #0]
  }
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	220a      	movs	r2, #10
 8007030:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	200000b4 	.word	0x200000b4

08007044 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	4613      	mov	r3, r2
 8007076:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800707e:	2302      	movs	r3, #2
 8007080:	e01a      	b.n	80070b8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	79fa      	ldrb	r2, [r7, #7]
 80070ae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f001 fb43 	bl	800873c <USBD_LL_Init>

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]
 80070e0:	e001      	b.n	80070e6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070e2:	2302      	movs	r3, #2
 80070e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 fb69 	bl	80087d4 <USBD_LL_Start>

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800712e:	2302      	movs	r3, #2
 8007130:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00c      	beq.n	8007156 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	4611      	mov	r1, r2
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	78fa      	ldrb	r2, [r7, #3]
 8007176:	4611      	mov	r1, r2
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fe95 	bl	8007ec8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80071ac:	461a      	mov	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d00c      	beq.n	80071dc <USBD_LL_SetupStage+0x56>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d302      	bcc.n	80071cc <USBD_LL_SetupStage+0x46>
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d010      	beq.n	80071ec <USBD_LL_SetupStage+0x66>
 80071ca:	e017      	b.n	80071fc <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fa05 	bl	80075e4 <USBD_StdDevReq>
    break;
 80071da:	e01a      	b.n	8007212 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa67 	bl	80076b8 <USBD_StdItfReq>
    break;
 80071ea:	e012      	b.n	8007212 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 faa5 	bl	8007744 <USBD_StdEPReq>
    break;
 80071fa:	e00a      	b.n	8007212 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fb42 	bl	8008894 <USBD_LL_StallEP>
    break;
 8007210:	bf00      	nop
  }

  return USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	460b      	mov	r3, r1
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d14b      	bne.n	80072c8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007236:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800723e:	2b03      	cmp	r3, #3
 8007240:	d134      	bne.n	80072ac <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	429a      	cmp	r2, r3
 800724c:	d919      	bls.n	8007282 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	1ad2      	subs	r2, r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007264:	429a      	cmp	r2, r3
 8007266:	d203      	bcs.n	8007270 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800726c:	b29b      	uxth	r3, r3
 800726e:	e002      	b.n	8007276 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007274:	b29b      	uxth	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 ff18 	bl	80080b0 <USBD_CtlContinueRx>
 8007280:	e038      	b.n	80072f4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007294:	2b03      	cmp	r3, #3
 8007296:	d105      	bne.n	80072a4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 ff15 	bl	80080d4 <USBD_CtlSendStatus>
 80072aa:	e023      	b.n	80072f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	d11e      	bne.n	80072f4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80072be:	2100      	movs	r1, #0
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f001 fae7 	bl	8008894 <USBD_LL_StallEP>
 80072c6:	e015      	b.n	80072f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d108      	bne.n	80072f0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	7afa      	ldrb	r2, [r7, #11]
 80072e8:	4611      	mov	r1, r2
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	4798      	blx	r3
 80072ee:	e001      	b.n	80072f4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072f0:	2302      	movs	r3, #2
 80072f2:	e000      	b.n	80072f6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	460b      	mov	r3, r1
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d17f      	bne.n	8007412 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3314      	adds	r3, #20
 8007316:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800731e:	2b02      	cmp	r3, #2
 8007320:	d15c      	bne.n	80073dc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	429a      	cmp	r2, r3
 800732c:	d915      	bls.n	800735a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	b29b      	uxth	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fe82 	bl	8008050 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800734c:	2300      	movs	r3, #0
 800734e:	2200      	movs	r2, #0
 8007350:	2100      	movs	r1, #0
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 fb4a 	bl	80089ec <USBD_LL_PrepareReceive>
 8007358:	e04e      	b.n	80073f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	6912      	ldr	r2, [r2, #16]
 8007362:	fbb3 f1f2 	udiv	r1, r3, r2
 8007366:	fb02 f201 	mul.w	r2, r2, r1
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11c      	bne.n	80073aa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007378:	429a      	cmp	r2, r3
 800737a:	d316      	bcc.n	80073aa <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007386:	429a      	cmp	r2, r3
 8007388:	d20f      	bcs.n	80073aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fe5e 	bl	8008050 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800739c:	2300      	movs	r3, #0
 800739e:	2200      	movs	r2, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f001 fb22 	bl	80089ec <USBD_LL_PrepareReceive>
 80073a8:	e026      	b.n	80073f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d105      	bne.n	80073cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073cc:	2180      	movs	r1, #128	; 0x80
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f001 fa60 	bl	8008894 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fe90 	bl	80080fa <USBD_CtlReceiveStatus>
 80073da:	e00d      	b.n	80073f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d004      	beq.n	80073f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80073f0:	2180      	movs	r1, #128	; 0x80
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f001 fa4e 	bl	8008894 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d11d      	bne.n	800743e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff fe82 	bl	800710c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007410:	e015      	b.n	800743e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00d      	beq.n	800743a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007424:	2b03      	cmp	r3, #3
 8007426:	d108      	bne.n	800743a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	7afa      	ldrb	r2, [r7, #11]
 8007432:	4611      	mov	r1, r2
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	4798      	blx	r3
 8007438:	e001      	b.n	800743e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800743a:	2302      	movs	r3, #2
 800743c:	e000      	b.n	8007440 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	2200      	movs	r2, #0
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 f9d7 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	2200      	movs	r2, #0
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 f9c9 	bl	800880a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2240      	movs	r2, #64	; 0x40
 8007482:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6852      	ldr	r2, [r2, #4]
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	4611      	mov	r1, r2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2204      	movs	r2, #4
 8007502:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007544:	2b03      	cmp	r3, #3
 8007546:	d10b      	bne.n	8007560 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6852      	ldr	r2, [r2, #4]
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	4611      	mov	r1, r2
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d004      	beq.n	8007608 <USBD_StdDevReq+0x24>
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d002      	beq.n	8007608 <USBD_StdDevReq+0x24>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <USBD_StdDevReq+0x34>
 8007606:	e04c      	b.n	80076a2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
    break;
 8007616:	e049      	b.n	80076ac <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b09      	cmp	r3, #9
 800761e:	d83a      	bhi.n	8007696 <USBD_StdDevReq+0xb2>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <USBD_StdDevReq+0x44>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	08007679 	.word	0x08007679
 800762c:	0800768d 	.word	0x0800768d
 8007630:	08007697 	.word	0x08007697
 8007634:	08007683 	.word	0x08007683
 8007638:	08007697 	.word	0x08007697
 800763c:	0800765b 	.word	0x0800765b
 8007640:	08007651 	.word	0x08007651
 8007644:	08007697 	.word	0x08007697
 8007648:	0800766f 	.word	0x0800766f
 800764c:	08007665 	.word	0x08007665
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f9d2 	bl	80079fc <USBD_GetDescriptor>
      break;
 8007658:	e022      	b.n	80076a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fac7 	bl	8007bf0 <USBD_SetAddress>
      break;
 8007662:	e01d      	b.n	80076a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fb04 	bl	8007c74 <USBD_SetConfig>
      break;
 800766c:	e018      	b.n	80076a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fb8d 	bl	8007d90 <USBD_GetConfig>
      break;
 8007676:	e013      	b.n	80076a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fbbc 	bl	8007df8 <USBD_GetStatus>
      break;
 8007680:	e00e      	b.n	80076a0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fbea 	bl	8007e5e <USBD_SetFeature>
      break;
 800768a:	e009      	b.n	80076a0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fbf9 	bl	8007e86 <USBD_ClrFeature>
      break;
 8007694:	e004      	b.n	80076a0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fc52 	bl	8007f42 <USBD_CtlError>
      break;
 800769e:	bf00      	nop
    }
    break;
 80076a0:	e004      	b.n	80076ac <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fc4c 	bl	8007f42 <USBD_CtlError>
    break;
 80076aa:	bf00      	nop
  }

  return ret;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop

080076b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d003      	beq.n	80076da <USBD_StdItfReq+0x22>
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d001      	beq.n	80076da <USBD_StdItfReq+0x22>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d12a      	bne.n	8007730 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076e0:	3b01      	subs	r3, #1
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d81d      	bhi.n	8007722 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	889b      	ldrh	r3, [r3, #4]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d813      	bhi.n	8007718 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88db      	ldrh	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d110      	bne.n	800772c <USBD_StdItfReq+0x74>
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10d      	bne.n	800772c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fcdf 	bl	80080d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007716:	e009      	b.n	800772c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc11 	bl	8007f42 <USBD_CtlError>
      break;
 8007720:	e004      	b.n	800772c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc0c 	bl	8007f42 <USBD_CtlError>
      break;
 800772a:	e000      	b.n	800772e <USBD_StdItfReq+0x76>
      break;
 800772c:	bf00      	nop
    }
    break;
 800772e:	e004      	b.n	800773a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fc05 	bl	8007f42 <USBD_CtlError>
    break;
 8007738:	bf00      	nop
  }

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	889b      	ldrh	r3, [r3, #4]
 8007756:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007760:	2b20      	cmp	r3, #32
 8007762:	d004      	beq.n	800776e <USBD_StdEPReq+0x2a>
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	d002      	beq.n	800776e <USBD_StdEPReq+0x2a>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <USBD_StdEPReq+0x3a>
 800776c:	e13b      	b.n	80079e6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
    break;
 800777c:	e138      	b.n	80079f0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007786:	2b20      	cmp	r3, #32
 8007788:	d10a      	bne.n	80077a0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	e128      	b.n	80079f2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d03e      	beq.n	8007826 <USBD_StdEPReq+0xe2>
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d002      	beq.n	80077b2 <USBD_StdEPReq+0x6e>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d070      	beq.n	8007892 <USBD_StdEPReq+0x14e>
 80077b0:	e113      	b.n	80079da <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d002      	beq.n	80077c2 <USBD_StdEPReq+0x7e>
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d015      	beq.n	80077ec <USBD_StdEPReq+0xa8>
 80077c0:	e02b      	b.n	800781a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00c      	beq.n	80077e2 <USBD_StdEPReq+0x9e>
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d009      	beq.n	80077e2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f85e 	bl	8008894 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80077d8:	2180      	movs	r1, #128	; 0x80
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 f85a 	bl	8008894 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80077e0:	e020      	b.n	8007824 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fbac 	bl	8007f42 <USBD_CtlError>
        break;
 80077ea:	e01b      	b.n	8007824 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	885b      	ldrh	r3, [r3, #2]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10e      	bne.n	8007812 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <USBD_StdEPReq+0xce>
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	d008      	beq.n	8007812 <USBD_StdEPReq+0xce>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	88db      	ldrh	r3, [r3, #6]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 f841 	bl	8008894 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc5e 	bl	80080d4 <USBD_CtlSendStatus>

        break;
 8007818:	e004      	b.n	8007824 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb90 	bl	8007f42 <USBD_CtlError>
        break;
 8007822:	bf00      	nop
      }
      break;
 8007824:	e0de      	b.n	80079e4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800782c:	2b02      	cmp	r3, #2
 800782e:	d002      	beq.n	8007836 <USBD_StdEPReq+0xf2>
 8007830:	2b03      	cmp	r3, #3
 8007832:	d015      	beq.n	8007860 <USBD_StdEPReq+0x11c>
 8007834:	e026      	b.n	8007884 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00c      	beq.n	8007856 <USBD_StdEPReq+0x112>
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b80      	cmp	r3, #128	; 0x80
 8007840:	d009      	beq.n	8007856 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 f824 	bl	8008894 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800784c:	2180      	movs	r1, #128	; 0x80
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f820 	bl	8008894 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007854:	e01c      	b.n	8007890 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fb72 	bl	8007f42 <USBD_CtlError>
        break;
 800785e:	e017      	b.n	8007890 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	885b      	ldrh	r3, [r3, #2]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d112      	bne.n	800788e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 f82b 	bl	80088d2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc29 	bl	80080d4 <USBD_CtlSendStatus>
        }
        break;
 8007882:	e004      	b.n	800788e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fb5b 	bl	8007f42 <USBD_CtlError>
        break;
 800788c:	e000      	b.n	8007890 <USBD_StdEPReq+0x14c>
        break;
 800788e:	bf00      	nop
      }
      break;
 8007890:	e0a8      	b.n	80079e4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007898:	2b02      	cmp	r3, #2
 800789a:	d002      	beq.n	80078a2 <USBD_StdEPReq+0x15e>
 800789c:	2b03      	cmp	r3, #3
 800789e:	d031      	beq.n	8007904 <USBD_StdEPReq+0x1c0>
 80078a0:	e095      	b.n	80079ce <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <USBD_StdEPReq+0x174>
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b80      	cmp	r3, #128	; 0x80
 80078ac:	d004      	beq.n	80078b8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fb46 	bl	8007f42 <USBD_CtlError>
          break;
 80078b6:	e08f      	b.n	80079d8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80078b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da0b      	bge.n	80078d8 <USBD_StdEPReq+0x194>
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	3310      	adds	r3, #16
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	4413      	add	r3, r2
 80078d4:	3304      	adds	r3, #4
 80078d6:	e00a      	b.n	80078ee <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2202      	movs	r2, #2
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fb8b 	bl	8008018 <USBD_CtlSendData>
          break;
 8007902:	e069      	b.n	80079d8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da11      	bge.n	8007930 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 020f 	and.w	r2, r3, #15
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	3318      	adds	r3, #24
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d117      	bne.n	8007956 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb0a 	bl	8007f42 <USBD_CtlError>
            break;
 800792e:	e053      	b.n	80079d8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	f003 020f 	and.w	r2, r3, #15
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	440b      	add	r3, r1
 8007942:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 faf7 	bl	8007f42 <USBD_CtlError>
            break;
 8007954:	e040      	b.n	80079d8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800795a:	2b00      	cmp	r3, #0
 800795c:	da0b      	bge.n	8007976 <USBD_StdEPReq+0x232>
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	3310      	adds	r3, #16
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4413      	add	r3, r2
 8007972:	3304      	adds	r3, #4
 8007974:	e00a      	b.n	800798c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	4413      	add	r3, r2
 800798c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <USBD_StdEPReq+0x256>
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b80      	cmp	r3, #128	; 0x80
 8007998:	d103      	bne.n	80079a2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	e00e      	b.n	80079c0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 ffb2 	bl	8008910 <USBD_LL_IsStallEP>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2201      	movs	r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	e002      	b.n	80079c0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2202      	movs	r2, #2
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fb26 	bl	8008018 <USBD_CtlSendData>
          break;
 80079cc:	e004      	b.n	80079d8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fab6 	bl	8007f42 <USBD_CtlError>
        break;
 80079d6:	bf00      	nop
      }
      break;
 80079d8:	e004      	b.n	80079e4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fab0 	bl	8007f42 <USBD_CtlError>
      break;
 80079e2:	bf00      	nop
    }
    break;
 80079e4:	e004      	b.n	80079f0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 faaa 	bl	8007f42 <USBD_CtlError>
    break;
 80079ee:	bf00      	nop
  }

  return ret;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	885b      	ldrh	r3, [r3, #2]
 8007a0a:	0a1b      	lsrs	r3, r3, #8
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b06      	cmp	r3, #6
 8007a12:	f200 80c9 	bhi.w	8007ba8 <USBD_GetDescriptor+0x1ac>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <USBD_GetDescriptor+0x20>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a39 	.word	0x08007a39
 8007a20:	08007a51 	.word	0x08007a51
 8007a24:	08007a91 	.word	0x08007a91
 8007a28:	08007ba9 	.word	0x08007ba9
 8007a2c:	08007ba9 	.word	0x08007ba9
 8007a30:	08007b55 	.word	0x08007b55
 8007a34:	08007b7b 	.word	0x08007b7b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	7c12      	ldrb	r2, [r2, #16]
 8007a44:	f107 010a 	add.w	r1, r7, #10
 8007a48:	4610      	mov	r0, r2
 8007a4a:	4798      	blx	r3
 8007a4c:	60f8      	str	r0, [r7, #12]
    break;
 8007a4e:	e0b0      	b.n	8007bb2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	7c1b      	ldrb	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10d      	bne.n	8007a74 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	f107 020a 	add.w	r2, r7, #10
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	2202      	movs	r2, #2
 8007a70:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007a72:	e09e      	b.n	8007bb2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f107 020a 	add.w	r2, r7, #10
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	701a      	strb	r2, [r3, #0]
    break;
 8007a8e:	e090      	b.n	8007bb2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	885b      	ldrh	r3, [r3, #2]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d856      	bhi.n	8007b48 <USBD_GetDescriptor+0x14c>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <USBD_GetDescriptor+0xa4>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ab9 	.word	0x08007ab9
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007ae9 	.word	0x08007ae9
 8007aac:	08007b01 	.word	0x08007b01
 8007ab0:	08007b19 	.word	0x08007b19
 8007ab4:	08007b31 	.word	0x08007b31
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 010a 	add.w	r1, r7, #10
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
      break;
 8007ace:	e040      	b.n	8007b52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	7c12      	ldrb	r2, [r2, #16]
 8007adc:	f107 010a 	add.w	r1, r7, #10
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4798      	blx	r3
 8007ae4:	60f8      	str	r0, [r7, #12]
      break;
 8007ae6:	e034      	b.n	8007b52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 010a 	add.w	r1, r7, #10
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
      break;
 8007afe:	e028      	b.n	8007b52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 010a 	add.w	r1, r7, #10
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
      break;
 8007b16:	e01c      	b.n	8007b52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 010a 	add.w	r1, r7, #10
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
      break;
 8007b2e:	e010      	b.n	8007b52 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 010a 	add.w	r1, r7, #10
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
      break;
 8007b46:	e004      	b.n	8007b52 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f9f9 	bl	8007f42 <USBD_CtlError>
      return;
 8007b50:	e04b      	b.n	8007bea <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007b52:	e02e      	b.n	8007bb2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7c1b      	ldrb	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d109      	bne.n	8007b70 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	f107 020a 	add.w	r2, r7, #10
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
      break;
 8007b6e:	e020      	b.n	8007bb2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f9e5 	bl	8007f42 <USBD_CtlError>
      return;
 8007b78:	e037      	b.n	8007bea <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7c1b      	ldrb	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10d      	bne.n	8007b9e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	f107 020a 	add.w	r2, r7, #10
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4798      	blx	r3
 8007b92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	2207      	movs	r2, #7
 8007b9a:	701a      	strb	r2, [r3, #0]
      break;
 8007b9c:	e009      	b.n	8007bb2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f9ce 	bl	8007f42 <USBD_CtlError>
      return;
 8007ba6:	e020      	b.n	8007bea <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9c9 	bl	8007f42 <USBD_CtlError>
    return;
 8007bb0:	e01b      	b.n	8007bea <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007bb2:	897b      	ldrh	r3, [r7, #10]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d011      	beq.n	8007bdc <USBD_GetDescriptor+0x1e0>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	88db      	ldrh	r3, [r3, #6]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00d      	beq.n	8007bdc <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	88da      	ldrh	r2, [r3, #6]
 8007bc4:	897b      	ldrh	r3, [r7, #10]
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	bf28      	it	cs
 8007bca:	4613      	movcs	r3, r2
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007bd0:	897b      	ldrh	r3, [r7, #10]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68f9      	ldr	r1, [r7, #12]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa1e 	bl	8008018 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	88db      	ldrh	r3, [r3, #6]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fa75 	bl	80080d4 <USBD_CtlSendStatus>
  }
}
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	889b      	ldrh	r3, [r3, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d130      	bne.n	8007c64 <USBD_SetAddress+0x74>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	88db      	ldrh	r3, [r3, #6]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d12c      	bne.n	8007c64 <USBD_SetAddress+0x74>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	885b      	ldrh	r3, [r3, #2]
 8007c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c10:	d828      	bhi.n	8007c64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d104      	bne.n	8007c32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f989 	bl	8007f42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c30:	e01c      	b.n	8007c6c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7bfa      	ldrb	r2, [r7, #15]
 8007c36:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fe92 	bl	8008968 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fa45 	bl	80080d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c58:	e008      	b.n	8007c6c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	e003      	b.n	8007c6c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f96b 	bl	8007f42 <USBD_CtlError>
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	4b41      	ldr	r3, [pc, #260]	; (8007d8c <USBD_SetConfig+0x118>)
 8007c86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c88:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <USBD_SetConfig+0x118>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d904      	bls.n	8007c9a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f955 	bl	8007f42 <USBD_CtlError>
 8007c98:	e075      	b.n	8007d86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d002      	beq.n	8007caa <USBD_SetConfig+0x36>
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d023      	beq.n	8007cf0 <USBD_SetConfig+0x7c>
 8007ca8:	e062      	b.n	8007d70 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007caa:	4b38      	ldr	r3, [pc, #224]	; (8007d8c <USBD_SetConfig+0x118>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01a      	beq.n	8007ce8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007cb2:	4b36      	ldr	r3, [pc, #216]	; (8007d8c <USBD_SetConfig+0x118>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cc4:	4b31      	ldr	r3, [pc, #196]	; (8007d8c <USBD_SetConfig+0x118>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fa29 	bl	8007122 <USBD_SetClassConfig>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d104      	bne.n	8007ce0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f932 	bl	8007f42 <USBD_CtlError>
          return;
 8007cde:	e052      	b.n	8007d86 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f9f7 	bl	80080d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007ce6:	e04e      	b.n	8007d86 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9f3 	bl	80080d4 <USBD_CtlSendStatus>
      break;
 8007cee:	e04a      	b.n	8007d86 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cf0:	4b26      	ldr	r3, [pc, #152]	; (8007d8c <USBD_SetConfig+0x118>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d112      	bne.n	8007d1e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007d00:	4b22      	ldr	r3, [pc, #136]	; (8007d8c <USBD_SetConfig+0x118>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d0a:	4b20      	ldr	r3, [pc, #128]	; (8007d8c <USBD_SetConfig+0x118>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff fa25 	bl	8007160 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f9dc 	bl	80080d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007d1c:	e033      	b.n	8007d86 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007d1e:	4b1b      	ldr	r3, [pc, #108]	; (8007d8c <USBD_SetConfig+0x118>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d01d      	beq.n	8007d68 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff fa13 	bl	8007160 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <USBD_SetConfig+0x118>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d44:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <USBD_SetConfig+0x118>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff f9e9 	bl	8007122 <USBD_SetClassConfig>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d104      	bne.n	8007d60 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f8f2 	bl	8007f42 <USBD_CtlError>
          return;
 8007d5e:	e012      	b.n	8007d86 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9b7 	bl	80080d4 <USBD_CtlSendStatus>
      break;
 8007d66:	e00e      	b.n	8007d86 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f9b3 	bl	80080d4 <USBD_CtlSendStatus>
      break;
 8007d6e:	e00a      	b.n	8007d86 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8e5 	bl	8007f42 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <USBD_SetConfig+0x118>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff f9ee 	bl	8007160 <USBD_ClrClassConfig>
      break;
 8007d84:	bf00      	nop
    }
  }
}
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	200001b0 	.word	0x200001b0

08007d90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	88db      	ldrh	r3, [r3, #6]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d004      	beq.n	8007dac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f8cc 	bl	8007f42 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007daa:	e021      	b.n	8007df0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	db17      	blt.n	8007de6 <USBD_GetConfig+0x56>
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	dd02      	ble.n	8007dc0 <USBD_GetConfig+0x30>
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d00b      	beq.n	8007dd6 <USBD_GetConfig+0x46>
 8007dbe:	e012      	b.n	8007de6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	2201      	movs	r2, #1
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f922 	bl	8008018 <USBD_CtlSendData>
      break;
 8007dd4:	e00c      	b.n	8007df0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	2201      	movs	r2, #1
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f91a 	bl	8008018 <USBD_CtlSendData>
      break;
 8007de4:	e004      	b.n	8007df0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8aa 	bl	8007f42 <USBD_CtlError>
      break;
 8007dee:	bf00      	nop
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d81e      	bhi.n	8007e4c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d004      	beq.n	8007e20 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f892 	bl	8007f42 <USBD_CtlError>
      break;
 8007e1e:	e01a      	b.n	8007e56 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f043 0202 	orr.w	r2, r3, #2
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	2202      	movs	r2, #2
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8e7 	bl	8008018 <USBD_CtlSendData>
    break;
 8007e4a:	e004      	b.n	8007e56 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f877 	bl	8007f42 <USBD_CtlError>
    break;
 8007e54:	bf00      	nop
  }
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	885b      	ldrh	r3, [r3, #2]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d106      	bne.n	8007e7e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f92b 	bl	80080d4 <USBD_CtlSendStatus>
  }

}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007e96:	3b01      	subs	r3, #1
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d80b      	bhi.n	8007eb4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	885b      	ldrh	r3, [r3, #2]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d10c      	bne.n	8007ebe <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f911 	bl	80080d4 <USBD_CtlSendStatus>
    }
    break;
 8007eb2:	e004      	b.n	8007ebe <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f843 	bl	8007f42 <USBD_CtlError>
    break;
 8007ebc:	e000      	b.n	8007ec0 <USBD_ClrFeature+0x3a>
    break;
 8007ebe:	bf00      	nop
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	785a      	ldrb	r2, [r3, #1]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	3303      	adds	r3, #3
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	3304      	adds	r3, #4
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	3305      	adds	r3, #5
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	4413      	add	r3, r2
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	3306      	adds	r3, #6
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	3307      	adds	r3, #7
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	021b      	lsls	r3, r3, #8
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4413      	add	r3, r2
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	80da      	strh	r2, [r3, #6]

}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007f4c:	2180      	movs	r1, #128	; 0x80
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fca0 	bl	8008894 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007f54:	2100      	movs	r1, #0
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fc9c 	bl	8008894 <USBD_LL_StallEP>
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d032      	beq.n	8007fe0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f834 	bl	8007fe8 <USBD_GetLen>
 8007f80:	4603      	mov	r3, r0
 8007f82:	3301      	adds	r3, #1
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	75fa      	strb	r2, [r7, #23]
 8007f94:	461a      	mov	r2, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4413      	add	r3, r2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	7812      	ldrb	r2, [r2, #0]
 8007f9e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	75fa      	strb	r2, [r7, #23]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4413      	add	r3, r2
 8007fac:	2203      	movs	r2, #3
 8007fae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007fb0:	e012      	b.n	8007fd8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	60fa      	str	r2, [r7, #12]
 8007fb8:	7dfa      	ldrb	r2, [r7, #23]
 8007fba:	1c51      	adds	r1, r2, #1
 8007fbc:	75f9      	strb	r1, [r7, #23]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	440a      	add	r2, r1
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	75fa      	strb	r2, [r7, #23]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e8      	bne.n	8007fb2 <USBD_GetString+0x4e>
    }
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007ff4:	e005      	b.n	8008002 <USBD_GetLen+0x1a>
    {
        len++;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3301      	adds	r3, #1
 8008000:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f5      	bne.n	8007ff6 <USBD_GetLen+0xe>
    }

    return len;
 800800a:	7bfb      	ldrb	r3, [r7, #15]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2202      	movs	r2, #2
 800802a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800802e:	88fa      	ldrh	r2, [r7, #6]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008034:	88fa      	ldrh	r2, [r7, #6]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	2100      	movs	r1, #0
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fcb0 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	2100      	movs	r1, #0
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fc9e 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2203      	movs	r2, #3
 8008086:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800808a:	88fa      	ldrh	r2, [r7, #6]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008092:	88fa      	ldrh	r2, [r7, #6]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	2100      	movs	r1, #0
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fca3 	bl	80089ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	2100      	movs	r1, #0
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fc91 	bl	80089ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2204      	movs	r2, #4
 80080e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080e4:	2300      	movs	r3, #0
 80080e6:	2200      	movs	r2, #0
 80080e8:	2100      	movs	r1, #0
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fc5b 	bl	80089a6 <USBD_LL_Transmit>

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2205      	movs	r2, #5
 8008106:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800810a:	2300      	movs	r3, #0
 800810c:	2200      	movs	r2, #0
 800810e:	2100      	movs	r1, #0
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fc6b 	bl	80089ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008124:	2200      	movs	r2, #0
 8008126:	4912      	ldr	r1, [pc, #72]	; (8008170 <MX_USB_DEVICE_Init+0x50>)
 8008128:	4812      	ldr	r0, [pc, #72]	; (8008174 <MX_USB_DEVICE_Init+0x54>)
 800812a:	f7fe ff9e 	bl	800706a <USBD_Init>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008134:	f7f8 fc70 	bl	8000a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008138:	490f      	ldr	r1, [pc, #60]	; (8008178 <MX_USB_DEVICE_Init+0x58>)
 800813a:	480e      	ldr	r0, [pc, #56]	; (8008174 <MX_USB_DEVICE_Init+0x54>)
 800813c:	f7fe ffc0 	bl	80070c0 <USBD_RegisterClass>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008146:	f7f8 fc67 	bl	8000a18 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800814a:	490c      	ldr	r1, [pc, #48]	; (800817c <MX_USB_DEVICE_Init+0x5c>)
 800814c:	4809      	ldr	r0, [pc, #36]	; (8008174 <MX_USB_DEVICE_Init+0x54>)
 800814e:	f7fe ff79 	bl	8007044 <USBD_AUDIO_RegisterInterface>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008158:	f7f8 fc5e 	bl	8000a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800815c:	4805      	ldr	r0, [pc, #20]	; (8008174 <MX_USB_DEVICE_Init+0x54>)
 800815e:	f7fe ffc9 	bl	80070f4 <USBD_Start>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008168:	f7f8 fc56 	bl	8000a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800816c:	bf00      	nop
 800816e:	bd80      	pop	{r7, pc}
 8008170:	200000dc 	.word	0x200000dc
 8008174:	200002bc 	.word	0x200002bc
 8008178:	2000000c 	.word	0x2000000c
 800817c:	200000c0 	.word	0x200000c0

08008180 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
//	    }
//	  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }
  return (USBD_OK);
 800818c:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
	/*
	 * TODO: GPIO disable DAC
	 *       Close I2S DMA
	 */
	HAL_I2S_DMAStop(&hi2s2);
 80081a4:	4803      	ldr	r0, [pc, #12]	; (80081b4 <AUDIO_DeInit_FS+0x18>)
 80081a6:	f7fa fb61 	bl	800286c <HAL_I2S_DMAStop>
  return (USBD_OK);
 80081aa:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000270 	.word	0x20000270

080081b8 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d013      	beq.n	80081f4 <AUDIO_AudioCmd_FS+0x3c>
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d019      	beq.n	8008204 <AUDIO_AudioCmd_FS+0x4c>
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d118      	bne.n	8008206 <AUDIO_AudioCmd_FS+0x4e>
  {
    case AUDIO_CMD_START:
    	/*
    	 * I2S Transmit Data
    	 */
    	HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pbuf,DMA_MAX(size/2));
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081da:	d203      	bcs.n	80081e4 <AUDIO_AudioCmd_FS+0x2c>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	e001      	b.n	80081e8 <AUDIO_AudioCmd_FS+0x30>
 80081e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081e8:	461a      	mov	r2, r3
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	4808      	ldr	r0, [pc, #32]	; (8008210 <AUDIO_AudioCmd_FS+0x58>)
 80081ee:	f7fa fa95 	bl	800271c <HAL_I2S_Transmit_DMA>
    break;
 80081f2:	e008      	b.n	8008206 <AUDIO_AudioCmd_FS+0x4e>

    case AUDIO_CMD_PLAY:
    	HAL_I2S_Transmit_DMA(&hi2s2,(uint16_t*)pbuf,size);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	4804      	ldr	r0, [pc, #16]	; (8008210 <AUDIO_AudioCmd_FS+0x58>)
 80081fe:	f7fa fa8d 	bl	800271c <HAL_I2S_Transmit_DMA>
    break;	
 8008202:	e000      	b.n	8008206 <AUDIO_AudioCmd_FS+0x4e>
    case AUDIO_CMD_STOP:

    break;
 8008204:	bf00      	nop

  }
  return (USBD_OK);
 8008206:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000270 	.word	0x20000270

08008214 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800821e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	/*
	 * TODO: GPIO Mute
	 */
  return (USBD_OK);
 8008236:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008238:	4618      	mov	r0, r3
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800824e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008260:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008262:	4618      	mov	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <TransferComplete_CallBack_FS>:
/**
  * @brief  Manages the DMA full transfer complete event.
  * @retval None
  */
void TransferComplete_CallBack_FS(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_FULL);
 8008270:	2102      	movs	r1, #2
 8008272:	4802      	ldr	r0, [pc, #8]	; (800827c <TransferComplete_CallBack_FS+0x10>)
 8008274:	f7fe fd5d 	bl	8006d32 <USBD_AUDIO_Sync>
  /* USER CODE END 7 */
}
 8008278:	bf00      	nop
 800827a:	bd80      	pop	{r7, pc}
 800827c:	200002bc 	.word	0x200002bc

08008280 <HalfTransfer_CallBack_FS>:
/**
  * @brief  Manages the DMA Half transfer complete event.
  * @retval None
  */
void HalfTransfer_CallBack_FS(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  USBD_AUDIO_Sync(&hUsbDeviceFS, AUDIO_OFFSET_HALF);
 8008284:	2101      	movs	r1, #1
 8008286:	4802      	ldr	r0, [pc, #8]	; (8008290 <HalfTransfer_CallBack_FS+0x10>)
 8008288:	f7fe fd53 	bl	8006d32 <USBD_AUDIO_Sync>
  /* USER CODE END 8 */
}
 800828c:	bf00      	nop
 800828e:	bd80      	pop	{r7, pc}
 8008290:	200002bc 	.word	0x200002bc

08008294 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2212      	movs	r2, #18
 80082a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082a6:	4b03      	ldr	r3, [pc, #12]	; (80082b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	200000f8 	.word	0x200000f8

080082b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2204      	movs	r2, #4
 80082c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082ca:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	2000010c 	.word	0x2000010c

080082dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4907      	ldr	r1, [pc, #28]	; (8008310 <USBD_FS_ProductStrDescriptor+0x34>)
 80082f2:	4808      	ldr	r0, [pc, #32]	; (8008314 <USBD_FS_ProductStrDescriptor+0x38>)
 80082f4:	f7ff fe36 	bl	8007f64 <USBD_GetString>
 80082f8:	e004      	b.n	8008304 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4904      	ldr	r1, [pc, #16]	; (8008310 <USBD_FS_ProductStrDescriptor+0x34>)
 80082fe:	4805      	ldr	r0, [pc, #20]	; (8008314 <USBD_FS_ProductStrDescriptor+0x38>)
 8008300:	f7ff fe30 	bl	8007f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000558 	.word	0x20000558
 8008314:	08008e68 	.word	0x08008e68

08008318 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	4904      	ldr	r1, [pc, #16]	; (8008338 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008328:	4804      	ldr	r0, [pc, #16]	; (800833c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800832a:	f7ff fe1b 	bl	8007f64 <USBD_GetString>
  return USBD_StrDesc;
 800832e:	4b02      	ldr	r3, [pc, #8]	; (8008338 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20000558 	.word	0x20000558
 800833c:	08008e74 	.word	0x08008e74

08008340 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	221a      	movs	r2, #26
 8008350:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008352:	f000 f843 	bl	80083dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008356:	4b02      	ldr	r3, [pc, #8]	; (8008360 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000110 	.word	0x20000110

08008364 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d105      	bne.n	8008382 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	4907      	ldr	r1, [pc, #28]	; (8008398 <USBD_FS_ConfigStrDescriptor+0x34>)
 800837a:	4808      	ldr	r0, [pc, #32]	; (800839c <USBD_FS_ConfigStrDescriptor+0x38>)
 800837c:	f7ff fdf2 	bl	8007f64 <USBD_GetString>
 8008380:	e004      	b.n	800838c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	4904      	ldr	r1, [pc, #16]	; (8008398 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008386:	4805      	ldr	r0, [pc, #20]	; (800839c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008388:	f7ff fdec 	bl	8007f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800838c:	4b02      	ldr	r3, [pc, #8]	; (8008398 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000558 	.word	0x20000558
 800839c:	08008e80 	.word	0x08008e80

080083a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	4907      	ldr	r1, [pc, #28]	; (80083d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083b6:	4808      	ldr	r0, [pc, #32]	; (80083d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083b8:	f7ff fdd4 	bl	8007f64 <USBD_GetString>
 80083bc:	e004      	b.n	80083c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4904      	ldr	r1, [pc, #16]	; (80083d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083c2:	4805      	ldr	r0, [pc, #20]	; (80083d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083c4:	f7ff fdce 	bl	8007f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083c8:	4b02      	ldr	r3, [pc, #8]	; (80083d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000558 	.word	0x20000558
 80083d8:	08008e90 	.word	0x08008e90

080083dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083e2:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <Get_SerialNum+0x44>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083e8:	4b0e      	ldr	r3, [pc, #56]	; (8008424 <Get_SerialNum+0x48>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083ee:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <Get_SerialNum+0x4c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008402:	2208      	movs	r2, #8
 8008404:	4909      	ldr	r1, [pc, #36]	; (800842c <Get_SerialNum+0x50>)
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 f814 	bl	8008434 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800840c:	2204      	movs	r2, #4
 800840e:	4908      	ldr	r1, [pc, #32]	; (8008430 <Get_SerialNum+0x54>)
 8008410:	68b8      	ldr	r0, [r7, #8]
 8008412:	f000 f80f 	bl	8008434 <IntToUnicode>
  }
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	1fff7a10 	.word	0x1fff7a10
 8008424:	1fff7a14 	.word	0x1fff7a14
 8008428:	1fff7a18 	.word	0x1fff7a18
 800842c:	20000112 	.word	0x20000112
 8008430:	20000122 	.word	0x20000122

08008434 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008446:	2300      	movs	r3, #0
 8008448:	75fb      	strb	r3, [r7, #23]
 800844a:	e027      	b.n	800849c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	0f1b      	lsrs	r3, r3, #28
 8008450:	2b09      	cmp	r3, #9
 8008452:	d80b      	bhi.n	800846c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	0f1b      	lsrs	r3, r3, #28
 8008458:	b2da      	uxtb	r2, r3
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	4619      	mov	r1, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	440b      	add	r3, r1
 8008464:	3230      	adds	r2, #48	; 0x30
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e00a      	b.n	8008482 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	0f1b      	lsrs	r3, r3, #28
 8008470:	b2da      	uxtb	r2, r3
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	4619      	mov	r1, r3
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	440b      	add	r3, r1
 800847c:	3237      	adds	r2, #55	; 0x37
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	3301      	adds	r3, #1
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	4413      	add	r3, r2
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	3301      	adds	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
 800849c:	7dfa      	ldrb	r2, [r7, #23]
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d3d3      	bcc.n	800844c <IntToUnicode+0x18>
  }
}
 80084a4:	bf00      	nop
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b8:	f107 0314 	add.w	r3, r7, #20
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	609a      	str	r2, [r3, #8]
 80084c4:	60da      	str	r2, [r3, #12]
 80084c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084d0:	d13a      	bne.n	8008548 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084d2:	2300      	movs	r3, #0
 80084d4:	613b      	str	r3, [r7, #16]
 80084d6:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	4a1d      	ldr	r2, [pc, #116]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 80084dc:	f043 0301 	orr.w	r3, r3, #1
 80084e0:	6313      	str	r3, [r2, #48]	; 0x30
 80084e2:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 80084e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	613b      	str	r3, [r7, #16]
 80084ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80084f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f4:	2302      	movs	r3, #2
 80084f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084fc:	2303      	movs	r3, #3
 80084fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008500:	230a      	movs	r3, #10
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	4619      	mov	r1, r3
 800850a:	4812      	ldr	r0, [pc, #72]	; (8008554 <HAL_PCD_MspInit+0xa4>)
 800850c:	f7f9 fa9a 	bl	8001a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008510:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 8008512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008514:	4a0e      	ldr	r2, [pc, #56]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 8008516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851a:	6353      	str	r3, [r2, #52]	; 0x34
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 8008522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008524:	4a0a      	ldr	r2, [pc, #40]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 8008526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800852a:	6453      	str	r3, [r2, #68]	; 0x44
 800852c:	4b08      	ldr	r3, [pc, #32]	; (8008550 <HAL_PCD_MspInit+0xa0>)
 800852e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008538:	2200      	movs	r2, #0
 800853a:	2100      	movs	r1, #0
 800853c:	2043      	movs	r0, #67	; 0x43
 800853e:	f7f8 fcd7 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008542:	2043      	movs	r0, #67	; 0x43
 8008544:	f7f8 fd00 	bl	8000f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008548:	bf00      	nop
 800854a:	3728      	adds	r7, #40	; 0x28
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	40023800 	.word	0x40023800
 8008554:	40020000 	.word	0x40020000

08008558 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	f7fe fe09 	bl	8007186 <USBD_LL_SetupStage>
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800858e:	78fa      	ldrb	r2, [r7, #3]
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	78fb      	ldrb	r3, [r7, #3]
 80085a4:	4619      	mov	r1, r3
 80085a6:	f7fe fe39 	bl	800721c <USBD_LL_DataOutStage>
}
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085c4:	78fa      	ldrb	r2, [r7, #3]
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	4613      	mov	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	440b      	add	r3, r1
 80085d2:	3348      	adds	r3, #72	; 0x48
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	4619      	mov	r1, r3
 80085da:	f7fe fe90 	bl	80072fe <USBD_LL_DataInStage>
}
 80085de:	bf00      	nop
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe ff9e 	bl	8007536 <USBD_LL_SOF>
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800860a:	2301      	movs	r3, #1
 800860c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d102      	bne.n	800861c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
 800861a:	e008      	b.n	800862e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b02      	cmp	r3, #2
 8008622:	d102      	bne.n	800862a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008624:	2301      	movs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
 8008628:	e001      	b.n	800862e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800862a:	f7f8 f9f5 	bl	8000a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008634:	7bfa      	ldrb	r2, [r7, #15]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe ff46 	bl	80074ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe feff 	bl	8007448 <USBD_LL_Reset>
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe ff41 	bl	80074ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6812      	ldr	r2, [r2, #0]
 8008676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800867a:	f043 0301 	orr.w	r3, r3, #1
 800867e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008688:	4b04      	ldr	r3, [pc, #16]	; (800869c <HAL_PCD_SuspendCallback+0x48>)
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	4a03      	ldr	r2, [pc, #12]	; (800869c <HAL_PCD_SuspendCallback+0x48>)
 800868e:	f043 0306 	orr.w	r3, r3, #6
 8008692:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	e000ed00 	.word	0xe000ed00

080086a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe ff30 	bl	8007514 <USBD_LL_Resume>
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ce:	78fa      	ldrb	r2, [r7, #3]
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe ff56 	bl	8007584 <USBD_LL_IsoOUTIncomplete>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe ff37 	bl	800756a <USBD_LL_IsoINIncomplete>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe ff43 	bl	800759e <USBD_LL_DevConnected>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe ff40 	bl	80075b4 <USBD_LL_DevDisconnected>
}
 8008734:	bf00      	nop
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d13c      	bne.n	80087c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800874c:	4a20      	ldr	r2, [pc, #128]	; (80087d0 <USBD_LL_Init+0x94>)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <USBD_LL_Init+0x94>)
 8008758:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800875c:	4b1c      	ldr	r3, [pc, #112]	; (80087d0 <USBD_LL_Init+0x94>)
 800875e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008762:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008764:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <USBD_LL_Init+0x94>)
 8008766:	2204      	movs	r2, #4
 8008768:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800876a:	4b19      	ldr	r3, [pc, #100]	; (80087d0 <USBD_LL_Init+0x94>)
 800876c:	2202      	movs	r2, #2
 800876e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008770:	4b17      	ldr	r3, [pc, #92]	; (80087d0 <USBD_LL_Init+0x94>)
 8008772:	2200      	movs	r2, #0
 8008774:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008776:	4b16      	ldr	r3, [pc, #88]	; (80087d0 <USBD_LL_Init+0x94>)
 8008778:	2202      	movs	r2, #2
 800877a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800877c:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <USBD_LL_Init+0x94>)
 800877e:	2200      	movs	r2, #0
 8008780:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008782:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <USBD_LL_Init+0x94>)
 8008784:	2200      	movs	r2, #0
 8008786:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008788:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <USBD_LL_Init+0x94>)
 800878a:	2200      	movs	r2, #0
 800878c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800878e:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <USBD_LL_Init+0x94>)
 8008790:	2200      	movs	r2, #0
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008794:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <USBD_LL_Init+0x94>)
 8008796:	2200      	movs	r2, #0
 8008798:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800879a:	480d      	ldr	r0, [pc, #52]	; (80087d0 <USBD_LL_Init+0x94>)
 800879c:	f7fa fcc0 	bl	8003120 <HAL_PCD_Init>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087a6:	f7f8 f937 	bl	8000a18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087aa:	2180      	movs	r1, #128	; 0x80
 80087ac:	4808      	ldr	r0, [pc, #32]	; (80087d0 <USBD_LL_Init+0x94>)
 80087ae:	f7fb fe18 	bl	80043e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087b2:	2240      	movs	r2, #64	; 0x40
 80087b4:	2100      	movs	r1, #0
 80087b6:	4806      	ldr	r0, [pc, #24]	; (80087d0 <USBD_LL_Init+0x94>)
 80087b8:	f7fb fdcc 	bl	8004354 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087bc:	2280      	movs	r2, #128	; 0x80
 80087be:	2101      	movs	r1, #1
 80087c0:	4803      	ldr	r0, [pc, #12]	; (80087d0 <USBD_LL_Init+0x94>)
 80087c2:	f7fb fdc7 	bl	8004354 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000758 	.word	0x20000758

080087d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fa fdc0 	bl	8003370 <HAL_PCD_Start>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f91c 	bl	8008a34 <USBD_Get_USB_Status>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008800:	7bbb      	ldrb	r3, [r7, #14]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	461a      	mov	r2, r3
 8008818:	4603      	mov	r3, r0
 800881a:	70fb      	strb	r3, [r7, #3]
 800881c:	460b      	mov	r3, r1
 800881e:	70bb      	strb	r3, [r7, #2]
 8008820:	4613      	mov	r3, r2
 8008822:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008832:	78bb      	ldrb	r3, [r7, #2]
 8008834:	883a      	ldrh	r2, [r7, #0]
 8008836:	78f9      	ldrb	r1, [r7, #3]
 8008838:	f7fb f995 	bl	8003b66 <HAL_PCD_EP_Open>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f8f6 	bl	8008a34 <USBD_Get_USB_Status>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800884c:	7bbb      	ldrb	r3, [r7, #14]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f7fb f9de 	bl	8003c36 <HAL_PCD_EP_Close>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f8d7 	bl	8008a34 <USBD_Get_USB_Status>
 8008886:	4603      	mov	r3, r0
 8008888:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800888a:	7bbb      	ldrb	r3, [r7, #14]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fb fa9e 	bl	8003df4 <HAL_PCD_EP_SetStall>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f8b8 	bl	8008a34 <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fb fae3 	bl	8003ebc <HAL_PCD_EP_ClrStall>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f899 	bl	8008a34 <USBD_Get_USB_Status>
 8008902:	4603      	mov	r3, r0
 8008904:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008906:	7bbb      	ldrb	r3, [r7, #14]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008922:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008928:	2b00      	cmp	r3, #0
 800892a:	da0b      	bge.n	8008944 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	4613      	mov	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	333e      	adds	r3, #62	; 0x3e
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	e00b      	b.n	800895c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	4613      	mov	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800895a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7fb f8c8 	bl	8003b1c <HAL_PCD_SetAddress>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f84e 	bl	8008a34 <USBD_Get_USB_Status>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800899c:	7bbb      	ldrb	r3, [r7, #14]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	461a      	mov	r2, r3
 80089b2:	460b      	mov	r3, r1
 80089b4:	72fb      	strb	r3, [r7, #11]
 80089b6:	4613      	mov	r3, r2
 80089b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80089c8:	893b      	ldrh	r3, [r7, #8]
 80089ca:	7af9      	ldrb	r1, [r7, #11]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	f7fb f9c7 	bl	8003d60 <HAL_PCD_EP_Transmit>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f82b 	bl	8008a34 <USBD_Get_USB_Status>
 80089de:	4603      	mov	r3, r0
 80089e0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80089e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	607a      	str	r2, [r7, #4]
 80089f6:	461a      	mov	r2, r3
 80089f8:	460b      	mov	r3, r1
 80089fa:	72fb      	strb	r3, [r7, #11]
 80089fc:	4613      	mov	r3, r2
 80089fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a0e:	893b      	ldrh	r3, [r7, #8]
 8008a10:	7af9      	ldrb	r1, [r7, #11]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	f7fb f959 	bl	8003cca <HAL_PCD_EP_Receive>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f808 	bl	8008a34 <USBD_Get_USB_Status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008a28:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d817      	bhi.n	8008a78 <USBD_Get_USB_Status+0x44>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <USBD_Get_USB_Status+0x1c>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a61 	.word	0x08008a61
 8008a54:	08008a67 	.word	0x08008a67
 8008a58:	08008a6d 	.word	0x08008a6d
 8008a5c:	08008a73 	.word	0x08008a73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
    break;
 8008a64:	e00b      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	73fb      	strb	r3, [r7, #15]
    break;
 8008a6a:	e008      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a70:	e005      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a72:	2302      	movs	r3, #2
 8008a74:	73fb      	strb	r3, [r7, #15]
    break;
 8008a76:	e002      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7c:	bf00      	nop
  }
  return usb_status;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	; (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	2000012c 	.word	0x2000012c

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4e0d      	ldr	r6, [pc, #52]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1ba4      	subs	r4, r4, r6
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4e0b      	ldr	r6, [pc, #44]	; (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	; (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 f8ea 	bl	8008c84 <_init>
 8008ab0:	1ba4      	subs	r4, r4, r6
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2500      	movs	r5, #0
 8008ab6:	42a5      	cmp	r5, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ac0:	4798      	blx	r3
 8008ac2:	3501      	adds	r5, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aca:	4798      	blx	r3
 8008acc:	3501      	adds	r5, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08008f28 	.word	0x08008f28
 8008ad4:	08008f28 	.word	0x08008f28
 8008ad8:	08008f28 	.word	0x08008f28
 8008adc:	08008f2c 	.word	0x08008f2c

08008ae0 <malloc>:
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <malloc+0xc>)
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	f000 b861 	b.w	8008bac <_malloc_r>
 8008aea:	bf00      	nop
 8008aec:	2000012c 	.word	0x2000012c

08008af0 <free>:
 8008af0:	4b02      	ldr	r3, [pc, #8]	; (8008afc <free+0xc>)
 8008af2:	4601      	mov	r1, r0
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	f000 b80b 	b.w	8008b10 <_free_r>
 8008afa:	bf00      	nop
 8008afc:	2000012c 	.word	0x2000012c

08008b00 <memset>:
 8008b00:	4402      	add	r2, r0
 8008b02:	4603      	mov	r3, r0
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <memset+0xa>
 8008b08:	4770      	bx	lr
 8008b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0e:	e7f9      	b.n	8008b04 <memset+0x4>

08008b10 <_free_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4605      	mov	r5, r0
 8008b14:	2900      	cmp	r1, #0
 8008b16:	d045      	beq.n	8008ba4 <_free_r+0x94>
 8008b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b1c:	1f0c      	subs	r4, r1, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bfb8      	it	lt
 8008b22:	18e4      	addlt	r4, r4, r3
 8008b24:	f000 f8ac 	bl	8008c80 <__malloc_lock>
 8008b28:	4a1f      	ldr	r2, [pc, #124]	; (8008ba8 <_free_r+0x98>)
 8008b2a:	6813      	ldr	r3, [r2, #0]
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	b933      	cbnz	r3, 8008b3e <_free_r+0x2e>
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	6014      	str	r4, [r2, #0]
 8008b34:	4628      	mov	r0, r5
 8008b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b3a:	f000 b8a2 	b.w	8008c82 <__malloc_unlock>
 8008b3e:	42a3      	cmp	r3, r4
 8008b40:	d90c      	bls.n	8008b5c <_free_r+0x4c>
 8008b42:	6821      	ldr	r1, [r4, #0]
 8008b44:	1862      	adds	r2, r4, r1
 8008b46:	4293      	cmp	r3, r2
 8008b48:	bf04      	itt	eq
 8008b4a:	681a      	ldreq	r2, [r3, #0]
 8008b4c:	685b      	ldreq	r3, [r3, #4]
 8008b4e:	6063      	str	r3, [r4, #4]
 8008b50:	bf04      	itt	eq
 8008b52:	1852      	addeq	r2, r2, r1
 8008b54:	6022      	streq	r2, [r4, #0]
 8008b56:	6004      	str	r4, [r0, #0]
 8008b58:	e7ec      	b.n	8008b34 <_free_r+0x24>
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	b10a      	cbz	r2, 8008b64 <_free_r+0x54>
 8008b60:	42a2      	cmp	r2, r4
 8008b62:	d9fa      	bls.n	8008b5a <_free_r+0x4a>
 8008b64:	6819      	ldr	r1, [r3, #0]
 8008b66:	1858      	adds	r0, r3, r1
 8008b68:	42a0      	cmp	r0, r4
 8008b6a:	d10b      	bne.n	8008b84 <_free_r+0x74>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	4401      	add	r1, r0
 8008b70:	1858      	adds	r0, r3, r1
 8008b72:	4282      	cmp	r2, r0
 8008b74:	6019      	str	r1, [r3, #0]
 8008b76:	d1dd      	bne.n	8008b34 <_free_r+0x24>
 8008b78:	6810      	ldr	r0, [r2, #0]
 8008b7a:	6852      	ldr	r2, [r2, #4]
 8008b7c:	605a      	str	r2, [r3, #4]
 8008b7e:	4401      	add	r1, r0
 8008b80:	6019      	str	r1, [r3, #0]
 8008b82:	e7d7      	b.n	8008b34 <_free_r+0x24>
 8008b84:	d902      	bls.n	8008b8c <_free_r+0x7c>
 8008b86:	230c      	movs	r3, #12
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	e7d3      	b.n	8008b34 <_free_r+0x24>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	428a      	cmp	r2, r1
 8008b92:	bf04      	itt	eq
 8008b94:	6811      	ldreq	r1, [r2, #0]
 8008b96:	6852      	ldreq	r2, [r2, #4]
 8008b98:	6062      	str	r2, [r4, #4]
 8008b9a:	bf04      	itt	eq
 8008b9c:	1809      	addeq	r1, r1, r0
 8008b9e:	6021      	streq	r1, [r4, #0]
 8008ba0:	605c      	str	r4, [r3, #4]
 8008ba2:	e7c7      	b.n	8008b34 <_free_r+0x24>
 8008ba4:	bd38      	pop	{r3, r4, r5, pc}
 8008ba6:	bf00      	nop
 8008ba8:	200001b4 	.word	0x200001b4

08008bac <_malloc_r>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	1ccd      	adds	r5, r1, #3
 8008bb0:	f025 0503 	bic.w	r5, r5, #3
 8008bb4:	3508      	adds	r5, #8
 8008bb6:	2d0c      	cmp	r5, #12
 8008bb8:	bf38      	it	cc
 8008bba:	250c      	movcc	r5, #12
 8008bbc:	2d00      	cmp	r5, #0
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	db01      	blt.n	8008bc6 <_malloc_r+0x1a>
 8008bc2:	42a9      	cmp	r1, r5
 8008bc4:	d903      	bls.n	8008bce <_malloc_r+0x22>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	6033      	str	r3, [r6, #0]
 8008bca:	2000      	movs	r0, #0
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	f000 f857 	bl	8008c80 <__malloc_lock>
 8008bd2:	4a21      	ldr	r2, [pc, #132]	; (8008c58 <_malloc_r+0xac>)
 8008bd4:	6814      	ldr	r4, [r2, #0]
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	b991      	cbnz	r1, 8008c00 <_malloc_r+0x54>
 8008bda:	4c20      	ldr	r4, [pc, #128]	; (8008c5c <_malloc_r+0xb0>)
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	b91b      	cbnz	r3, 8008be8 <_malloc_r+0x3c>
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 f83d 	bl	8008c60 <_sbrk_r>
 8008be6:	6020      	str	r0, [r4, #0]
 8008be8:	4629      	mov	r1, r5
 8008bea:	4630      	mov	r0, r6
 8008bec:	f000 f838 	bl	8008c60 <_sbrk_r>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d124      	bne.n	8008c3e <_malloc_r+0x92>
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	6033      	str	r3, [r6, #0]
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f000 f842 	bl	8008c82 <__malloc_unlock>
 8008bfe:	e7e4      	b.n	8008bca <_malloc_r+0x1e>
 8008c00:	680b      	ldr	r3, [r1, #0]
 8008c02:	1b5b      	subs	r3, r3, r5
 8008c04:	d418      	bmi.n	8008c38 <_malloc_r+0x8c>
 8008c06:	2b0b      	cmp	r3, #11
 8008c08:	d90f      	bls.n	8008c2a <_malloc_r+0x7e>
 8008c0a:	600b      	str	r3, [r1, #0]
 8008c0c:	50cd      	str	r5, [r1, r3]
 8008c0e:	18cc      	adds	r4, r1, r3
 8008c10:	4630      	mov	r0, r6
 8008c12:	f000 f836 	bl	8008c82 <__malloc_unlock>
 8008c16:	f104 000b 	add.w	r0, r4, #11
 8008c1a:	1d23      	adds	r3, r4, #4
 8008c1c:	f020 0007 	bic.w	r0, r0, #7
 8008c20:	1ac3      	subs	r3, r0, r3
 8008c22:	d0d3      	beq.n	8008bcc <_malloc_r+0x20>
 8008c24:	425a      	negs	r2, r3
 8008c26:	50e2      	str	r2, [r4, r3]
 8008c28:	e7d0      	b.n	8008bcc <_malloc_r+0x20>
 8008c2a:	428c      	cmp	r4, r1
 8008c2c:	684b      	ldr	r3, [r1, #4]
 8008c2e:	bf16      	itet	ne
 8008c30:	6063      	strne	r3, [r4, #4]
 8008c32:	6013      	streq	r3, [r2, #0]
 8008c34:	460c      	movne	r4, r1
 8008c36:	e7eb      	b.n	8008c10 <_malloc_r+0x64>
 8008c38:	460c      	mov	r4, r1
 8008c3a:	6849      	ldr	r1, [r1, #4]
 8008c3c:	e7cc      	b.n	8008bd8 <_malloc_r+0x2c>
 8008c3e:	1cc4      	adds	r4, r0, #3
 8008c40:	f024 0403 	bic.w	r4, r4, #3
 8008c44:	42a0      	cmp	r0, r4
 8008c46:	d005      	beq.n	8008c54 <_malloc_r+0xa8>
 8008c48:	1a21      	subs	r1, r4, r0
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f000 f808 	bl	8008c60 <_sbrk_r>
 8008c50:	3001      	adds	r0, #1
 8008c52:	d0cf      	beq.n	8008bf4 <_malloc_r+0x48>
 8008c54:	6025      	str	r5, [r4, #0]
 8008c56:	e7db      	b.n	8008c10 <_malloc_r+0x64>
 8008c58:	200001b4 	.word	0x200001b4
 8008c5c:	200001b8 	.word	0x200001b8

08008c60 <_sbrk_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4c06      	ldr	r4, [pc, #24]	; (8008c7c <_sbrk_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4605      	mov	r5, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	f7f7 ff50 	bl	8000b10 <_sbrk>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_sbrk_r+0x1a>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_sbrk_r+0x1a>
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20000b60 	.word	0x20000b60

08008c80 <__malloc_lock>:
 8008c80:	4770      	bx	lr

08008c82 <__malloc_unlock>:
 8008c82:	4770      	bx	lr

08008c84 <_init>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr

08008c90 <_fini>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr
