##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.6.0] date: [Sun Feb 09 12:32:16 CST 2020]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = stmf4


######################################
# building variables
######################################
# debug build?
ifeq ($(BUILD_MODE), DEBUG)
DEBUG = 1
OPT = -Og
else
DEBUG = 0
OPT = -O2
endif


#######################################
# paths
#######################################
# Build path
OBJ_DIR = obj
BIN_DIR = bin

######################################
# source
######################################
# C sources
C_SOURCES =  \
src 


# ASM sources
ASM_SOURCES =

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
AR = $(GCC_PATH)/$(PREFIX)ar
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
AR = $(PREFIX)ar
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  
ifeq ($(MCU_MODEL), STM32F401xx)
C_DEFS+=-DSTM32F401xx -DARM_MATH_CM4
$(info MCU sub-family = STM32F401xx)
endif

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-Iinc \
-ID:/STMLibrary/STM32F4_Lib/Driver/inc \
-ID:/STMLibrary/STM32F4_Lib/CMSIS/Device/ST/STM32F4xx/Include \
-ID:/STMLibrary/STM32F4_Lib/CMSIS/Include \
-ID:/STMLibrary/STM32F4_Lib/CMSIS/RTOS/Template 

# compile gcc flags
ARFLAGS = -r

ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = LinkerScript/STM32F401RETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections
LDFLAGS+= -L$(LIB_PATH)\lib
LDLIBS= -lstm32f4
#+=$(addprefix -l, -l$(LIBSCCC_BIN)$(BIN_SUFFIX)

# default action: build all
all: $(BIN_DIR)/$(TARGET).elf $(BIN_DIR)/$(TARGET).hex $(BIN_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects

OBJECTS = $(addsuffix .o,$(addprefix $(OBJ_DIR)/,$(basename $(notdir $(foreach dir,$(C_SOURCES),$(wildcard $(dir)/*))))))
vpath %.c $(sort $(C_SOURCES))
# list of ASM program objects
OBJECTS += $(addprefix $(OBJ_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))



#$(BIN_DIR)/$(TARGET).elf: $(OBJECTS) $(LIB_PATH)/lib/STM32F4_lib.a | $(BIN_DIR)
#	$(info Linking objects)
#	@$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LDLIBS)
#	@$(SZ) $@

#$(BIN_DIR):
#	mkdir $@

$(OBJ_DIR)/%.o: %.c Makefile | $(OBJ_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(OBJ_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(OBJ_DIR)/%.o: %.s Makefile | $(OBJ_DIR)
	$(AS) -c $(CFLAGS) $< -o $@
	
$(BIN_DIR)/$(TARGET).elf: $(OBJECTS) $(LIB_PATH)/lib/libstm32f4.a Makefile | $(BIN_DIR)
	$(CC) $(OBJECTS) $(LDFLAGS) $(LDLIBS) -o $@
	$(SZ) $@

$(BIN_DIR)/%.hex: $(BIN_DIR)/%.elf | $(BIN_DIR)
	$(HEX) $< $@
	
$(BIN_DIR)/%.bin: $(BIN_DIR)/%.elf | $(BIN_DIR)
	$(BIN) $< $@
	
$(BIN_DIR):
	mkdir $@
	
$(OBJ_DIR):
	mkdir $@

		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(LIB_DIR) $(OBJ_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(OBJ_DIR)/*.d)

# *** EOF ***